diff -r /home/yajat/Desktop/aosp12_r11/frameworks/av/camera/include/camera/CameraBase.h /home/yajat/Desktop/H618-Android12-Src/frameworks/av/camera/include/camera/CameraBase.h
39a40
>     CAMERA_FACING_EXTERNAL = 2,
Only in /home/yajat/Desktop/aosp12_r11/frameworks/av: .git
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/av/include/media: AudioSource.h
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/av/include/media: IHDCP.h
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/av/include/media: mediaplayerinfo.h
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/av/include/media/MediaPlayerInterface.h /home/yajat/Desktop/H618-Android12-Src/frameworks/av/include/media/MediaPlayerInterface.h
54a55
>     AW_PLAYER = 6,
308a310,329
>     }
>     /* expend interfaces about subtitle, track and so on */
>     virtual status_t setSubCharset(const char*  /* charset */)
>     {
>         return OK;
>     }
> 
>     virtual status_t getSubCharset(char* /* charset */)
>     {
>         return OK;
>     }
> 
>     virtual status_t setSubDelay(int /* time */)
>     {
>         return OK;
>     }
> 
>     virtual int getSubDelay()
>     {
>         return -1;
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/av/include/mediadrm: ICrypto.h
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/av/media/codec2/components/mp3/C2SoftMp3Dec.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/codec2/components/mp3/C2SoftMp3Dec.cpp
409c409
<         mConfig->outputFrameSize = (calOutSize - outSize);
---
>         mConfig->outputFrameSize = (calOutSize - outSize) / sizeof(int16_t);
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/av/media/codec2/sfplugin/CCodec.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/codec2/sfplugin/CCodec.cpp
2416a2417,2418
>             MIMETYPE_VIDEO_MPEG1,
>             MIMETYPE_VIDEO_MJPEG,
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/av/media/extractors/mp4/MPEG4Extractor.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/extractors/mp4/MPEG4Extractor.cpp
159a160
>     size_t mSrcBufferSize;
5085a5087
>       mSrcBufferSize(0),
5266a5269
>     mSrcBufferSize = max_size;
5282a5286
>     mSrcBufferSize = 0;
6470c6474,6481
<         num_bytes_read = mDataSource->readAt(offset, mSrcBuffer, size);
---
>         bool mSrcBufferFitsDataToRead = size <= mSrcBufferSize;
>         if (mSrcBufferFitsDataToRead) {
>           num_bytes_read = mDataSource->readAt(offset, mSrcBuffer, size);
>         } else {
>           // We are trying to read a sample larger than the expected max sample size.
>           // Fall through and let the failure be handled by the following if.
>           android_errorWriteLog(0x534e4554, "188893559");
>         }
6475,6476c6486
< 
<             return AMEDIA_ERROR_IO;
---
>             return mSrcBufferFitsDataToRead ? AMEDIA_ERROR_IO : AMEDIA_ERROR_MALFORMED;
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/av/media/libaudioclient/aidl/android/media/AudioMode.aidl /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libaudioclient/aidl/android/media/AudioMode.aidl
29a30,31
>     FM = 5,
>     MODE_FACTORY_TEST = 6,
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/av/media/libaudioclient/aidl/android/media/AudioSourceType.aidl /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libaudioclient/aidl/android/media/AudioSourceType.aidl
34a35
>     HDMI_IN = 11,
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/av/media/libaudioclient/AidlConversion.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libaudioclient/AidlConversion.cpp
852a853,854
>         case media::AudioSourceType::HDMI_IN:
>             return AUDIO_SOURCE_HDMI_IN;
889a892,893
>         case AUDIO_SOURCE_HDMI_IN:
>             return media::AudioSourceType::HDMI_IN;
2076a2081,2084
>         case media::AudioMode::FM:
>             return AUDIO_MODE_FM;
>         case media::AudioMode::MODE_FACTORY_TEST:
>             return AUDIO_MODE_MODE_FACTORY_TEST;
2097a2106,2109
>         case AUDIO_MODE_FM:
>             return media::AudioMode::FM;
>         case AUDIO_MODE_MODE_FACTORY_TEST:
>             return media::AudioMode::MODE_FACTORY_TEST;
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/av/media/libaudioclient/AudioRecord.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libaudioclient/AudioRecord.cpp
306c306
<     if (pAttributes == NULL) {
---
>     if (pAttributes < (audio_attributes_t*)0x500/*== NULL*/) {
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libaudioclient/include/media: MediaMetricsConstants.h
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libaudioclient/include/media: MediaMetrics.h
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libaudioclient/include/media: MediaMetricsItem.h
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media: libcedarc
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media: libcedarx
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/av/media/libeffects/preprocessing/PreProcessing.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libeffects/preprocessing/PreProcessing.cpp
958a959,960
>     session->revConfig.set_sample_rate_hz(session->samplingRate);
>     session->revConfig.set_num_channels(inCnl);
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/av/media/libmedia/Android.bp /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libmedia/Android.bp
300a301
>         "IHDCP.cpp",
363a365
> 	"libui",
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libmedia: IHDCP.cpp
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/av/media/libmedia/IMediaPlayer.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libmedia/IMediaPlayer.cpp
606a607,642
> 
>     status_t setSubCharset(const char *charset)
>     {
>         Parcel data, reply;
>         data.writeInterfaceToken(IMediaPlayer::getInterfaceDescriptor());
>         data.writeCString(charset);
>         remote()->transact(SET_SUB_CHARSET, data, &reply);
>         return reply.readInt32();
>     }
> 
>     status_t getSubCharset(char *charset)
>     {
>         Parcel data, reply;
>         data.writeInterfaceToken(IMediaPlayer::getInterfaceDescriptor());
>         remote()->transact(GET_SUB_CHARSET, data, &reply);
>         status_t ret = reply.readInt32();
>         if(ret == OK)
>             strcpy(charset, reply.readCString());
>         return ret;
>     }
>     status_t setSubDelay(int time)
>     {
>         Parcel data, reply;
>         data.writeInterfaceToken(IMediaPlayer::getInterfaceDescriptor());
>         data.writeInt32(time);
>         remote()->transact(SET_SUB_DELAY, data, &reply);
>         return reply.readInt32();
>     }
> 
>     int getSubDelay()
>     {
>         Parcel data, reply;
>         data.writeInterfaceToken(IMediaPlayer::getInterfaceDescriptor());
>         remote()->transact(GET_SUB_DELAY, data, &reply);
>         return reply.readInt32();
>     }
951c987,1011
< 
---
>         case SET_SUB_CHARSET: {
>             CHECK_INTERFACE(IMediaPlayer, data, reply);
>             reply->writeInt32(setSubCharset(data.readCString()));
>             return NO_ERROR;
>         } break;
>         case GET_SUB_CHARSET: {
>             CHECK_INTERFACE(IMediaPlayer, data, reply);
>             char *charset = new char[MEDIAPLAYER_NAME_LEN_MAX];
>             status_t ret = getSubCharset(charset);
>             reply->writeInt32(ret);
>             if(ret == OK)
>                 reply->writeCString(charset);
>             delete[] charset;
>             return NO_ERROR;
>         } break;
>         case SET_SUB_DELAY: {
>             CHECK_INTERFACE(IMediaPlayer, data, reply);
>             reply->writeInt32(setSubDelay(data.readInt32()));
>             return NO_ERROR;
>         } break;
>         case GET_SUB_DELAY: {
>             CHECK_INTERFACE(IMediaPlayer, data, reply);
>             reply->writeInt32(getSubDelay());
>             return NO_ERROR;
>         } break;
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/av/media/libmedia/IMediaPlayerService.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libmedia/IMediaPlayerService.cpp
22a23
> #include <media/IHDCP.h>
43a45,46
>     GET_OMX,
>     MAKE_HDCP,
87a91,106
> /*
>     virtual sp<IOMX> getOMX() {
>         Parcel data, reply;
>         data.writeInterfaceToken(IMediaPlayerService::getInterfaceDescriptor());
>         remote()->transact(GET_OMX, data, &reply);
>         return interface_cast<IOMX>(reply.readStrongBinder());
>     }
> */
>     virtual sp<IHDCP> makeHDCP(bool createEncryptionModule) {
>         Parcel data, reply;
>         data.writeInterfaceToken(IMediaPlayerService::getInterfaceDescriptor());
>         data.writeInt32(createEncryptionModule);
>         remote()->transact(MAKE_HDCP, data, &reply);
>         return interface_cast<IHDCP>(reply.readStrongBinder());
>     }
> 
157a177,191
>             return NO_ERROR;
>         } break;
>         /*
>         case GET_OMX: {
>             CHECK_INTERFACE(IMediaPlayerService, data, reply);
>             sp<IOMX> omx = getOMX();
>             reply->writeStrongBinder(IInterface::asBinder(omx));
>             return NO_ERROR;
>         } break;*/
>         case MAKE_HDCP: {
>             CHECK_INTERFACE(IMediaPlayerService, data, reply);
>             bool createEncryptionModule = data.readInt32();
> 			ALOGE("the_hdcp, Unable to locate libstagefright_hdcp.so, 2");
>             sp<IHDCP> hdcp = makeHDCP(createEncryptionModule);
>             reply->writeStrongBinder(IInterface::asBinder(hdcp));
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libmedia/include/media: ICrypto.h
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libmedia/include/media: IHDCP.h
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/av/media/libmedia/include/media/IMediaPlayer.h /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libmedia/include/media/IMediaPlayer.h
25a26
> #include <media/mediaplayerinfo.h>
139a141,144
>     virtual status_t        setSubCharset(const char *charset) = 0;
>     virtual status_t        getSubCharset(char *charset) = 0;
>     virtual status_t        setSubDelay(int time) = 0;
>     virtual int             getSubDelay() = 0;
188a194,198
>         /* expend interfaces about subtitle, track and so on */
>         SET_SUB_CHARSET,
>         GET_SUB_CHARSET,
>         SET_SUB_DELAY,
>         GET_SUB_DELAY,
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/av/media/libmedia/include/media/IMediaPlayerService.h /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libmedia/include/media/IMediaPlayerService.h
35c35
< 
---
> struct IHDCP;
56a57,58
> //    virtual sp<IOMX>            getOMX() = 0;
>     virtual sp<IHDCP>           makeHDCP(bool createEncryptionModule) = 0;
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libmedia/include/media: MediaMetrics.h
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/av/media/libmedia/include/media/mediaplayer.h /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libmedia/include/media/mediaplayer.h
31a32
> #include <media/mediaplayerinfo.h>
96a98,99
>     MEDIA_ERROR_IO = -1004,
>     MEDIA_ERROR_UNSUPPORTED = -1010,
198c201,204
<     INVOKE_ID_GET_SELECTED_TRACK = 7
---
>     INVOKE_ID_GET_SELECTED_TRACK = 7,
>     INVOKE_ID_SET_DI_DEMO = 8,
>     INVOKE_ID_SET_DI_TNR = 9,
>     INVOKE_ID_SET_DI_FMD = 10,
283a290,294
>             // SubTitle
>             status_t        setSubCharset(const char *charset);
>             status_t        getSubCharset(char *charset);
>             status_t        setSubDelay(int time);
>             int             getSubDelay();
320a332,334
>     /* save properties before creating the real player */
>     int				mSubDelay;
>     char			mSubCharset[MEDIAPLAYER_NAME_LEN_MAX];
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/av/media/libmedia/mediaplayer.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libmedia/mediaplayer.cpp
1004a1005,1042
> status_t MediaPlayer::setSubDelay(int time)
> {
>     Mutex::Autolock lock(mLock);
>     mSubDelay = time;
>     if (mPlayer == NULL) {
>         return OK;
>     }
>     return mPlayer->setSubDelay(time);
> }
> 
> int MediaPlayer::getSubDelay()
> {
>     Mutex::Autolock lock(mLock);
>     if (mPlayer == NULL) {
>         return -1;
>     }
>     return mPlayer->getSubDelay();
> }
> 
> status_t MediaPlayer::setSubCharset(const char *charset)
> {
>     Mutex::Autolock lock(mLock);
>     strcpy(mSubCharset, charset);
>     if (mPlayer == NULL) {
>         return OK;
>     }
>     return mPlayer->setSubCharset(charset);
> }
> 
> status_t MediaPlayer::getSubCharset(char *charset)
> {
>     Mutex::Autolock lock(mLock);
>     if (mPlayer == NULL) {
>         return NO_INIT;
>     }
>     return mPlayer->getSubCharset(charset);
> }
> 
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/av/media/libmedia/MediaScanner.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libmedia/MediaScanner.cpp
130a131,137
> static bool shouldStopScanner() {
>     char state[PROPERTY_VALUE_MAX] = {0};
>     property_get("mediasw.stopscaner", state, "0");
>     if (state[0] == '1')
>         return true;
>     return false;
> }
233a241,243
>         }
>         while (shouldStopScanner()) {
>             sleep(2);
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/av/media/libmediametrics/include/media/MediaMetricsItem.h /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libmediametrics/include/media/MediaMetricsItem.h
29a30
> #include <log/log.h>
472c473
<         while (*ptr != 0) {
---
>         do {
474a476
>                 android_errorWriteLog(0x534e4554, "204445255");
477,479c479,480
<             ++ptr;
<         }
<         const size_t size = (ptr - *bufferpptr) + 1;
---
>         } while (*ptr++ != 0);
>         // ptr is terminator+1, == bufferptrmax if we finished entire buffer
481c482
<         *bufferpptr += size;
---
>         *bufferpptr = ptr;
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libmediametrics/include: MediaMetrics.h
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/av/media/libmediaplayerservice/Android.bp /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libmediaplayerservice/Android.bp
0a1,18
> bootstrap_go_package {
>     name: "soong-mpsproduct",
>     pkgPath: "android/soong/mpsproduct",
>     deps: [
>         "soong",
>         "soong-android",
>         "soong-cc",
>     ],
>     srcs: [
>         "mpsproduct.go",
>     ],
>     pluginFor: ["soong_build"],
> }
> 
> mpsproduct_defaults {
>     name: "mpsproduct_defaults",
> }
> 
31a50,51
> 	"HDCP.cpp",
> 	"RemoteDisplay.cpp",
67a88,92
>         "libawplayer",
>         "libawmetadataretriever",
>         "libstagefright_omx",
>         "libstagefright_wfd",
>         "libisomountmanagerservice",
89a115,119
>         "frameworks/av/media/libdatasource/include/datasource",
>         "frameworks/av/media/libstagefright/wifi-display",
>         "frameworks/av/media/libcedarx/android_adapter/awplayer",
>         "frameworks/av/media/libcedarx/android_adapter/metadataretriever",
>         "vendor/aw/homlet/framework/isomountmanager/include",
97a128,129
>         "-DCONF_ANDROID_MAJOR_VER=12",
>         "-DSUPPORT_BDMV",
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libmediaplayerservice: HDCP.cpp
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libmediaplayerservice: HDCP.h
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/av/media/libmediaplayerservice/include/MediaPlayerInterface.h /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libmediaplayerservice/include/MediaPlayerInterface.h
54a55
>     AW_PLAYER = 6,
308a310,329
>     }
>     /* expend interfaces about subtitle, track and so on */
>     virtual status_t setSubCharset(const char*  /* charset */)
>     {
>         return OK;
>     }
> 
>     virtual status_t getSubCharset(char* /* charset */)
>     {
>         return OK;
>     }
> 
>     virtual status_t setSubDelay(int /* time */)
>     {
>         return OK;
>     }
> 
>     virtual int getSubDelay()
>     {
>         return -1;
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/av/media/libmediaplayerservice/MediaPlayerFactory.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libmediaplayerservice/MediaPlayerFactory.cpp
23a24
> #include <media/stagefright/Utils.h>
29a31,33
> #include <set>
> #include <vector>
> 
33a38
> #include "awplayer.h"
40a46,118
> std::set<const std::string> sNuPlayerSets = {
>     "mid",
>     "midi",
>     "smf",
>     "xmf",
>     "mxmf",
>     "imy",
>     "rtttl",
>     "rtx",
>     "ota",
>     "wvm"
> };
> 
> std::set<const std::string> sAwPlayerSets = {
>     "ogg",
>     "mp3",
>     "wav",
>     "amr",
>     "flac",
>     "m4a",
>     "m4r",
>     "3gpp",
>     "out",
>     "3gp",
>     "aac",
>     "ape",
>     "ac3",
>     "dts",
>     "wma",
>     "aac",
>     "mp2",
>     "mp1"
> };
> 
> std::vector<const std::string> sCtsTests = {
>     "android.drm.cts",
>     "com.google.android.media.gts",
>     "android.video.cts",
>     "android.media.cts",
>     "android.mediastress.cts",
>     "android.view.cts",
>     "android.security.cts",
>     "com.android.cts.media",
>     "com.android.server.cts.device.statsd",
>     "com.android.server.cts.device.statsdatom",
>     "android.provider.cts",
>     "android.mediaprovidertranscode.cts"
> };
> 
> std::string getFileExt(const std::string& s) {
>     size_t i = s.rfind('.', s.length());
>     if (i != std::string::npos) {
>         return(s.substr(i+1, s.length() - i));
>     }
>     return("");
> }
> 
> void getCallingProcessName(char *name)
> {
>     char value[1024];
>     if (name == 0)
>     {
>         ALOGE("params error");
>         return;
>     }
>     int getpersist = property_get("persist.sys.cts", value, NULL);
>     ALOGD("Initialize getpersist = %d value=%s", getpersist, value);
>     strcpy(name, value);
> }
> 
> 
> 
> 
65c143
<     return NU_PLAYER;
---
>     return AW_PLAYER;
176a255,264
>         char mCallingProcess[256]={0};
>         getCallingProcessName(mCallingProcess);
>         for (auto &ctsTest: sCtsTests)
>         {
>             if (strcmp(mCallingProcess, ctsTest.c_str()) == 0)
>             {
>                 return 1.0;
>             }
>         }
> 
200a289,312
>         char value[1024];
>         property_get("media.use_nuplayer", value, NULL);
>         if (strcmp(value, "true") == 0)
>         {
>             return kOurScore;
>         }
> 
>         if (!strncasecmp("widevine://", url, 11))
>         {
>             ALOGD("widevine stream NU_PLAYER");
>             return kOurScore;
>         }
> 
>         if ((!strncmp("data:", url, strlen("data:"))) && (strpbrk(url, "base64")))
>         {
>             ALOGD("this is a url for base64 encoding ,use the  nuplayer.");
>             ALOGD("url = %s.",url);
>             return kOurScore;
>         }
> 
>         if (sNuPlayerSets.count(getFileExt(url)) != 0)
>         {
>             return kOurScore;
>         }
216a329,392
>     virtual float scoreFactory(const sp<IMediaPlayer>& /*client*/,
>             int fd,
>             int64_t offset,
>             int64_t /*length*/,
>             float curScore) {
> 
>         static const float kOurScore = 0.8;
>         if (kOurScore <= curScore)
>             return 0.0;
> 
>         int r_size;
>         char buf[4096];
>         lseek(fd, offset, SEEK_SET);
>         r_size = read(fd, buf, sizeof(buf));
>         lseek(fd, offset, SEEK_SET);
>         long ident = *((long*)buf);
> 
>         // Ogg vorbis?
>         if (ident == 0x5367674f) {
>             // 'OggS'
>             return kOurScore;
>         } else if(ident == 0x6d756874){
>             //return THUMBNAIL_PLAYER;
>         } else if (ident == 0x6468544d) {
>             //'MThd'
>             return kOurScore;
>         }
> 
>         char value[1024];
>         property_get("media.use_nuplayer", value, NULL);
>         if(strcmp(value, "true") == 0)
>         {
>             return kOurScore;
>         }
> 
>         // Modify for WVM
>         const char* my_uri;
>         my_uri = strdup((char*)nameForFd(fd).c_str());
>         if (strrchr(my_uri, '.') != NULL &&
>                 (!strncasecmp(".wvm", strrchr(my_uri, '.'), 4)
>                  || !strncasecmp(".mid", strrchr(my_uri, '.'), 4)
>                  || !strncasecmp(".midi", strrchr(my_uri, '.'), 5)))
>         {
>             ALOGD("fd NU_PLAYER.");
>             free((void*)my_uri);
>             return kOurScore;
>         }
>         else
>         {
>             free((void*)my_uri);
>         }
>         char mCallingProcess[256]={0};
>         getCallingProcessName(mCallingProcess);
>         for (auto &ctsTest: sCtsTests)
>         {
>             if (strcmp(mCallingProcess, ctsTest.c_str()) == 0)
>             {
>                 return kOurScore;
>             }
>         }
> 
>         return 0.0;
>     }
> 
240a417,468
> class AwPlayerFactory : public MediaPlayerFactory::IFactory {
>   public:
>     virtual float scoreFactory(const sp<IMediaPlayer>& /*client*/,
>                                const char* url,
>                                float curScore) {
>         static const float kOurScore = 0.8;
> 
>         if (!strncasecmp("http://", url, 7)
>                 || !strncasecmp("https://", url, 8)
>                 || !strncasecmp("file://", url, 7)) {
>             if (strstr(url,"m3u8")) {
>                 return 0.9;
>             }
>         }
> 
>         if (!strncasecmp("rtsp://", url, 7)) {
>             return 0.9;
>         }
> 
>         if (kOurScore <= curScore)
>             return 0.0;
>         if (sAwPlayerSets.count(getFileExt(url)) != 0)
>         {
>             return kOurScore;
>         }
>         return 0.0;
>     }
> 
>     virtual float scoreFactory(const sp<IMediaPlayer>& /*client*/,
>                                const sp<IStreamSource>& /*source*/,
>                                float /*curScore*/) {
>         return 1.0;
>     }
> 
>     virtual float scoreFactory(const sp<IMediaPlayer>& /*client*/,
>             int /*fd*/,
>             int64_t /* offset */,
>             int64_t /*length*/,
>             float curScore) {
>         static const float kOurScore = 0.5;
>         if (kOurScore <= curScore)
>             return 0.0;
> 
>         return kOurScore;
>     }
> 
>     virtual sp<MediaPlayerBase> createPlayer(pid_t /* pid */) {
>         ALOGV("Create AwPlayer");
>         return new AwPlayer();
>     }
> };
> 
251a480,482
>         delete factory;
>     factory = new AwPlayerFactory();
>     if (registerFactory_l(factory, AW_PLAYER) != OK)
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/av/media/libmediaplayerservice/MediaPlayerService.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libmediaplayerservice/MediaPlayerService.cpp
82a83,86
> #if defined(SUPPORT_BDMV)
> #include <IISOMountManagerService.h>
> #endif
> 
85a90,95
> #include <media/stagefright/OMXClient.h>
> 
> #include "HDCP.h"
> #include "HTTPBase.h"
> #include "RemoteDisplay.h"
> 
259a270,341
> #if defined(SUPPORT_BDMV)
> #define ISO_MOUNT_PATH "/mnt/bluray"
> static const char *BDMV_URL = "bdmv://" ISO_MOUNT_PATH;
> 
> static int isoMount(sp<IBinder> binder, const char *isoPath)
> {
>     sp<IISOMountManagerService> isoManager;
> 
>     if (binder.get() == NULL) {
>         const sp<IServiceManager> sm(defaultServiceManager());
>         binder = sm->getService(String16("softwinner.isomountmanager"));
>         if (binder != 0) {
>             isoManager =interface_cast<IISOMountManagerService>(binder);
>         }
>     } else {
>         isoManager =interface_cast<IISOMountManagerService>(binder);
>     }
> 
>     if (isoManager.get() != NULL) {
>         isoManager->umountAll();
> 
>         if (isoManager->isoMount(ISO_MOUNT_PATH, isoPath) < 0)
>         {
>             ALOGE("mount iso failed!");
>             return -1;
>         }
>         return 0;
>     }
> 
>     ALOGE("isoManager is null");
>     return -1;
> }
> 
> static int isoUmount(sp<IBinder> binder)
> {
>     sp<IISOMountManagerService> isoManager;
> 
>     if (binder.get() == NULL) {
>         const sp<IServiceManager> sm(defaultServiceManager());
>         binder = sm->getService(String16("softwinner.isomountmanager"));
>         if (binder != 0) {
>             isoManager =interface_cast<IISOMountManagerService>(binder);
>         }
>     } else {
>         isoManager =interface_cast<IISOMountManagerService>(binder);
>     }
> 
>     if (isoManager.get() != NULL) {
>         return isoManager->umountAll();
>     }
> 
>     return -1;
> }
> 
> uint32_t MediaPlayerService::Client::checkAndMountISO(const char *filePath)
> {
>     if (strncasecmp(filePath + strlen(filePath) - 4, ".iso", 4))
>         return 'pass';
> 
>     if (isoMount(isoManager, filePath) < 0)
>         return 'fail';
> 
>     if (access(ISO_MOUNT_PATH "/BDMV/STREAM", R_OK)) {
>         ALOGW("not looks like bluray");
>         isoUmount(isoManager);
>         return 'fail';
>     }
> 
>     return 'good';
> }
> #endif
> 
520a603,615
> /*
> sp<IOMX> MediaPlayerService::getOMX() {
>     ALOGI("MediaPlayerService::getOMX");
>     Mutex::Autolock autoLock(mLock);
> 
>     return mOmx;
> }*/
> 
> sp<IHDCP> MediaPlayerService::makeHDCP(bool createEncryptionModule) {
> 	ALOGE("the_hdcp, Unable to locate libstagefright_hdcp.so");
>     return new HDCP(createEncryptionModule);
> }
> 
522,524c617,619
<         const String16 &/*opPackageName*/,
<         const sp<IRemoteDisplayClient>& /*client*/,
<         const String8& /*iface*/) {
---
>         const String16 &opPackageName,
>         const sp<IRemoteDisplayClient>& client,
>         const String8& iface) {
525a621,623
>     if (!checkPermission("android.permission.CONTROL_WIFI_DISPLAY")) {
>         return NULL;
>     }
527c625
<     return NULL;
---
>     return new RemoteDisplay(opPackageName, client, iface.string());
764a863,865
> #if defined(SUPPORT_BDMV)
>     isBlurayISO = false;
> #endif
990a1092,1106
> #if defined(SUPPORT_BDMV)
>     if (strncasecmp(url, "file://", 7) == 0) {
>         switch (checkAndMountISO(url + 7)) {
>             case 'pass':
>                 break;
>             case 'good':
>                 isBlurayISO = true;
>                 url = BDMV_URL;
>                 break;
>             case 'fail':
>                 return UNKNOWN_ERROR;
>         }
>     }
> #endif
> 
1011a1128,1131
>         //* save properties before creating the real player
>         p->setSubDelay(mSubDelay);
>         p->setSubCharset(mSubCharset);
> 
1043a1164,1183
> #if defined(SUPPORT_BDMV)
>     // check if it is bluray
>         char fdInProc[128] = {0};
>         snprintf(fdInProc, sizeof(fdInProc), "proc/self/fd/%d", fd);
>         char filePath[1024] = {0};
>         ssize_t len = readlink(fdInProc, filePath, sizeof(filePath) - 1);
>         ALOGV("file path %s", filePath);
>         if (len > 0) {
>             switch (checkAndMountISO(filePath)) {
>                 case 'pass':
>                     break;
>                 case 'good':
>                     isBlurayISO = true;
>                     return setDataSource(NULL, BDMV_URL, NULL);
>                 case 'fail':
>                     return UNKNOWN_ERROR;
>             }
>         }
> #endif
> 
1052a1193,1196
>     //* save properties before creating the real player
>     p->setSubDelay(mSubDelay);
>     p->setSubCharset(mSubCharset);
> 
1282a1427,1430
> #if defined(SUPPORT_BDMV)
>     if (isBlurayISO)
>         isoUmount(isoManager);
> #endif
1454a1603,1606
> #if defined(SUPPORT_BDMV)
>     if (isBlurayISO)
>         isoUmount(isoManager);
> #endif
1751a1904,1938
> }
> 
> /* expend interfaces about subtitle, track and so on */
> status_t MediaPlayerService::Client::setSubCharset(const char *charset)
> {
>     strcpy(mSubCharset, charset);
>     sp<MediaPlayerBase> p = getPlayer();
>     if (p == 0)
>         return OK;
>     return p->setSubCharset(charset);
> }
> 
> status_t MediaPlayerService::Client::getSubCharset(char *charset)
> {
>     sp<MediaPlayerBase> p = getPlayer();
>     if (p == 0)
>         return UNKNOWN_ERROR;
>     return p->getSubCharset(charset);
> }
> 
> status_t MediaPlayerService::Client::setSubDelay(int time)
> {
>     mSubDelay = time;
>     sp<MediaPlayerBase> p = getPlayer();
>     if (p == 0)
>         return OK;
>     return p->setSubDelay(time);
> }
> 
> int MediaPlayerService::Client::getSubDelay()
> {
>     sp<MediaPlayerBase> p = getPlayer();
>     if (p == 0)
>         return 0;
>     return p->getSubDelay();
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/av/media/libmediaplayerservice/MediaPlayerService.h /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libmediaplayerservice/MediaPlayerService.h
245a246,248
> //    virtual sp<IOMX>            getOMX();
>     virtual sp<IHDCP>           makeHDCP(bool createEncryptionModule);
> 
357a361,365
>         /* expend interfaces about subtitle, track and so on */
>         virtual status_t        setSubCharset(const char *charset);
>         virtual status_t        getSubCharset(char *charset);
>         virtual status_t        setSubDelay(int time);
>         virtual int             getSubDelay();
443a452,455
> #if defined(SUPPORT_BDMV)
>         uint32_t checkAndMountISO(const char *filePath);
> #endif
> 
474a487,489
>                     /* save properties before creating the real player */
>                     int                           mSubDelay;
>                     char                          mSubCharset[MEDIAPLAYER_NAME_LEN_MAX];
487a503,507
> 
> #if defined(SUPPORT_BDMV)
>         sp<IBinder> isoManager;
>         bool isBlurayISO;
> #endif
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/av/media/libmediaplayerservice/MetadataRetrieverClient.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libmediaplayerservice/MetadataRetrieverClient.cpp
44a45
> #include "awmetadataretriever.h"
91a93,97
>             break;
>         }
>         case AW_PLAYER:
>         {
>             p = new AwMetadataRetriever;
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libmediaplayerservice: mpsproduct.go
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libmediaplayerservice: RemoteDisplay.cpp
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libmediaplayerservice: RemoteDisplay.h
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/av/media/libstagefright/Android.bp /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libstagefright/Android.bp
299a300
>         "SurfaceMediaSource.cpp",
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/av/media/libstagefright/CameraSource.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libstagefright/CameraSource.cpp
37a38,39
> #include <cstdlib>
> #include <algorithm>
301,303c303,315
<             ALOGE("Requested frame rate (%d) is not supported: %s",
<                 frameRate, supportedFrameRates);
<             return BAD_VALUE;
---
>             std::vector<int> supportedFrameRatesVec;
>             char *tokenPtr=strtok(const_cast<char*>(supportedFrameRates), ",");
>             while (tokenPtr != NULL) {
>               supportedFrameRatesVec.push_back(atoi(tokenPtr));
>               tokenPtr=strtok(NULL, ",");
>             }
>             std::vector<int>::iterator maxFrameRate =
>               std::max_element(supportedFrameRatesVec.begin(),
>                   supportedFrameRatesVec.end());
>             ALOGW("Requested frame rate (%d) is not supported: %s "
>                 "will choose (%d)",
>                 frameRate, supportedFrameRates, *maxFrameRate);
>             frameRate = *maxFrameRate;
403c415
<         ALOGE("Failed to set preview frame rate to %d fps. The actual "
---
>         ALOGW("Failed to set preview frame rate to %d fps. The actual "
405c417
<         return UNKNOWN_ERROR;
---
>         //return UNKNOWN_ERROR;
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/av/media/libstagefright/data/media_codecs_sw.xml /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libstagefright/data/media_codecs_sw.xml
167c167
<         <MediaCodec name="c2.android.vp9.decoder" type="video/x-vnd.on2.vp9" variant="slow-cpu,!slow-cpu">
---
>         <!--MediaCodec name="c2.android.vp9.decoder" type="video/x-vnd.on2.vp9" variant="slow-cpu,!slow-cpu">
179c179
<                 <Limit name="block-count" range="1-3600" /> <!-- max 1280x720 -->
---
>                 <Limit name="block-count" range="1-3600" />
185,186c185,186
<         <MediaCodec name="c2.android.av1.decoder" type="video/av01" variant="!slow-cpu">
<             <Limit name="size" min="2x2" max="2048x2048" />
---
>         <MediaCodec name="c2.android.av1.decoder" type="video/av01" variant="slow-cpu,!slow-cpu">
>             <Limit name="size" min="2x2" max="1280x720" />
193c193
<         </MediaCodec>
---
>         </MediaCodec -->
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/av/media/libstagefright/foundation/Android.bp /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libstagefright/foundation/Android.bp
100a101,102
> 	"ANetworkSession.cpp",
> 	"ParsedMessage.cpp",
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libstagefright/foundation: ANetworkSession.cpp
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libstagefright/foundation/include/media/stagefright/foundation: ANetworkSession.h
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/av/media/libstagefright/foundation/include/media/stagefright/foundation/MediaDefs.h /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libstagefright/foundation/include/media/stagefright/foundation/MediaDefs.h
42a43,46
> extern const char *MEDIA_MIMETYPE_VIDEO_MPEG1;
> extern const char *MEDIA_MIMETYPE_VIDEO_VC1;
> extern const char *MEDIA_MIMETYPE_VIDEO_S263;
> 
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libstagefright/foundation/include/media/stagefright/foundation: ParsedMessage.h
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/av/media/libstagefright/foundation/MediaDefs.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libstagefright/foundation/MediaDefs.cpp
40a41,44
> const char *MEDIA_MIMETYPE_VIDEO_MPEG1 = "video/mpeg1";
> const char *MEDIA_MIMETYPE_VIDEO_VC1 = "video/wvc1";
> const char *MEDIA_MIMETYPE_VIDEO_S263 = "video/flv1";
> 
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libstagefright/foundation: ParsedMessage.cpp
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/av/media/libstagefright/include/media/stagefright/MediaCodecConstants.h /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libstagefright/include/media/stagefright/MediaCodecConstants.h
701a702,703
> constexpr char MIMETYPE_VIDEO_MPEG1[] = "video/mpeg1";
> constexpr char MIMETYPE_VIDEO_MJPEG[] = "video/x-motion-jpeg";
705d706
< 
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libstagefright/include/media/stagefright: SurfaceMediaSource.h
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/av/media/libstagefright/include/media/stagefright/Utils.h /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libstagefright/include/media/stagefright/Utils.h
83a84,85
> AString nameForFd(int fd);
> 
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/av/media/libstagefright/rtsp/AAVCAssembler.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libstagefright/rtsp/AAVCAssembler.cpp
297a298,301
>     if (buffer->size() == 0) {
>         android_errorWriteLog(0x534e4554, "204077881");
>         return;
>     }
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/av/media/libstagefright/SimpleDecodingSource.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libstagefright/SimpleDecodingSource.cpp
321c321
<                         cpLen );
---
>                         cpLen);
328c328,333
<                     memcpy(in_buffer->base() + cpLen, &numPageSamples, sizeof(numPageSamples));
---
>                     if (cpLen + sizeof(numPageSamples) <= in_buffer->capacity()) {
>                         memcpy(in_buffer->base() + cpLen, &numPageSamples, sizeof(numPageSamples));
>                         cpLen += sizeof(numPageSamples);
>                     } else {
>                         ALOGW("Didn't have enough space to copy kKeyValidSamples");
>                     }
332c337
<                         in_ix, 0 /* offset */, in_buf->range_length() + (mIsVorbis ? 4 : 0),
---
>                         in_ix, 0 /* offset */, cpLen,
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libstagefright: SurfaceMediaSource.cpp
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/av/media/libstagefright/Utils.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libstagefright/Utils.cpp
2353a2354,2385
> AString nameForFd(int fd) {
>     const size_t SIZE = 256;
>     char buffer[SIZE];
>     AString result;
>     snprintf(buffer, SIZE, "/proc/%d/fd/%d", getpid(), fd);
>     struct stat s;
>     if (lstat(buffer, &s) == 0) {
>         if ((s.st_mode & S_IFMT) == S_IFLNK) {
>             char linkto[256];
>             int len = readlink(buffer, linkto, sizeof(linkto));
>             if(len > 0) {
>                 if(len > 255) {
>                     linkto[252] = '.';
>                     linkto[253] = '.';
>                     linkto[254] = '.';
>                     linkto[255] = 0;
>                 } else {
>                     linkto[len] = 0;
>                 }
>                 result.append(linkto);
>             }
>         } else {
>             result.append("unexpected type for ");
>             result.append(buffer);
>         }
>     } else {
>         result.append("couldn't open ");
>         result.append(buffer);
>     }
>     return result;
> }
> 
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/libstagefright: wifi-display
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/av/media/mediaserver/mediaserver.rc /home/yajat/Desktop/H618-Android12-Src/frameworks/av/media/mediaserver/mediaserver.rc
7c7
<     group audio camera inet net_bt net_bt_admin net_bw_acct drmrpc mediadrm
---
>     group audio camera inet net_bt net_bt_admin net_bw_acct drmrpc mediadrm sdcard_rw
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/av/services/audiopolicy/config/a2dp_audio_policy_configuration.xml /home/yajat/Desktop/H618-Android12-Src/frameworks/av/services/audiopolicy/config/a2dp_audio_policy_configuration.xml
8,9c8,9
<                      samplingRates="44100,48000"
<                      channelMasks="AUDIO_CHANNEL_IN_MONO,AUDIO_CHANNEL_IN_STEREO"/>
---
>                      samplingRates="44100 48000"
>                      channelMasks="AUDIO_CHANNEL_IN_MONO AUDIO_CHANNEL_IN_STEREO"/>
30,31c30,31
<                      samplingRates="44100,48000"
<                      channelMasks="AUDIO_CHANNEL_IN_MONO,AUDIO_CHANNEL_IN_STEREO"/>
---
>                      samplingRates="44100 48000"
>                      channelMasks="AUDIO_CHANNEL_IN_MONO AUDIO_CHANNEL_IN_STEREO"/>
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/av/services/camera/libcameraservice/api1/client2/Parameters.h /home/yajat/Desktop/H618-Android12-Src/frameworks/av/services/camera/libcameraservice/api1/client2/Parameters.h
217c217
<     static constexpr double MIN_PREVIEW_RECORD_FPS = 29.97;
---
>     static constexpr double MIN_PREVIEW_RECORD_FPS = 20.03;
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/av/services/camera/libcameraservice/common/CameraProviderManager.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/av/services/camera/libcameraservice/common/CameraProviderManager.cpp
57a58,64
> static std::string getUvcFacing(){
>   char uvcFacing[1024];
>   memset(uvcFacing, 0, sizeof(uvcFacing));
>   property_get("ro.camera.uvcfacing", uvcFacing, "external");
>   return std::string(uvcFacing);
> }
> 
422c429,433
<     if (!kEnableLazyHal) {
---
>     auto deviceInfo = findDeviceInfoLocked(cameraId);
>     if (deviceInfo == nullptr) return;
>     sp<ProviderInfo> parentProvider = deviceInfo->mParentProvider.promote();
>     auto type = parentProvider->getType();
>     if (!kEnableLazyHal || type.compare(std::string("external")) == 0) {
424a436
> 
446c458,462
<     if (!kEnableLazyHal) {
---
>     auto deviceInfo = findDeviceInfoLocked(cameraId);
>     if (deviceInfo == nullptr) return;
>     sp<ProviderInfo> parentProvider = deviceInfo->mParentProvider.promote();
>     auto type = parentProvider->getType();
>     if (!kEnableLazyHal || type.compare(std::string("external")) == 0) {
1419,1420c1435,1436
< 
<     if (!kEnableLazyHal) {
---
>     if (!kEnableLazyHal || mType.compare(std::string("external")) == 0) {
>     //if (!kEnableLazyHal) {
1549c1565
<     if (!kEnableLazyHal) {
---
>     if (!kEnableLazyHal || mType.compare(std::string("external")) == 0) {
2407,2409c2423,2424
< 
<     if (!kEnableLazyHal) {
<         // Save HAL reference indefinitely
---
>     auto type = parentProvider->getType();
>     if (!kEnableLazyHal || type.compare(std::string("external")) == 0) {
2432a2448,2455
>                  if (getUvcFacing().compare("front") == 0) {
>                   info->facing = hardware::CAMERA_FACING_FRONT;
>                 } else if (getUvcFacing().compare("back") == 0) {
>                   info->facing = hardware::CAMERA_FACING_BACK;
>                 } else {
>                   info->facing = hardware::CAMERA_FACING_EXTERNAL;
>                 }
>                 break;
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/apex/jobscheduler/service/java/com/android/server/alarm/AlarmManagerService.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/apex/jobscheduler/service/java/com/android/server/alarm/AlarmManagerService.java
262a263
>     private ShutdownReceiver mShutdownReceiver;
1705a1707
>             mShutdownReceiver = new ShutdownReceiver();
3464a3467
>             mShutdownReceiver.setTime(alarmClock.getTriggerTime()/1000 - 90);
3469a3473
>             mShutdownReceiver.setTime(0);
3868a3873
>     private native void updateNextRtcAlarm(long time);
4627a4633,4653
>     class ShutdownReceiver extends BroadcastReceiver {
>         private long mTime = 0;
>         public ShutdownReceiver() {
>             IntentFilter filter = new IntentFilter();
>             filter.addAction(Intent.ACTION_SHUTDOWN);
>             getContext().registerReceiver(this, filter);
>             updateNextRtcAlarm(0);
>         }
> 
>         @Override
>         public void onReceive(Context context, Intent intent) {
>             Slog.i(TAG, "AlarmManagerService receive shutting down set rtc alarm time: " + mTime);
>             synchronized (mLock) {
>                 updateNextRtcAlarm(mTime);
>             }
>         }
> 
>         public void setTime(long time) {
>             mTime = time;
>         }
>     }
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/apex/jobscheduler/service/java/com/android/server/DeviceIdleController.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/apex/jobscheduler/service/java/com/android/server/DeviceIdleController.java
30a31
> import android.app.PendingIntent;
38a40
> import android.database.ContentObserver;
51a54
> import android.net.NetworkPolicyManager;
76a80
> import android.provider.Settings;
298a303
>     private PendingIntent mQuickDozeIntent = null;
300a306,310
>     private final ArraySet<String> mNormalMeteredRestrictedSet;
>     private final ArraySet<String> mQuickDozeMeteredRestrictedSet;
>     private boolean mEnableAutoQuickDoze;
>     private boolean mNeedMeteredRestricted;
>     private boolean mOldRestrictBackground;
436a447,450
>     static final String ACTION_QUICK_DOZE = "com.android.deviceidle.action.QUICK_DOZE";
>     static final String DEVICE_IDLE_QUICK_DOZE = "device_idle_quick_doze";
>     static final long QUICK_DOZE_TIME = !COMPRESS_TIME ? 30 * 60 * 1000 : 60 * 1000; /* 30 minutes */
> 
458a473
>     private long mQuickDozeTime;
2266a2282,2288
>         mNormalMeteredRestrictedSet = new ArraySet<>();
>         mQuickDozeMeteredRestrictedSet = new ArraySet<>();
>         String[] sets = context.getResources().getStringArray(
>                 com.android.internal.R.array.config_quickDozeMeteredRestricted);
>         for (String s : sets) {
>             mQuickDozeMeteredRestrictedSet.add(s);
>         }
2341a2364,2367
>             mEnableAutoQuickDoze = getContext().getResources().getBoolean(com.android.internal.R.bool.config_enableAutoQuickDoze);
>             mNeedMeteredRestricted = true;
>             long qdt = getContext().getResources().getInteger(com.android.internal.R.integer.config_autoQuickDozeDelay);
>             mQuickDozeTime = qdt >= 0L ? qdt : QUICK_DOZE_TIME;
2407a2434,2435
>                 mQuickDozeIntent = PendingIntent.getBroadcast(getContext(), 0, new Intent(ACTION_QUICK_DOZE, null), PendingIntent.FLAG_MUTABLE);
> 
2425a2454,2464
>                 filter = new IntentFilter();
>                 filter.addAction(ACTION_QUICK_DOZE);
>                 getContext().registerReceiver(mQuickDozeReceiver, filter);
> 
>                 filter = new IntentFilter();
>                 filter.addAction(Intent.ACTION_PACKAGE_ADDED);
>                 filter.addAction(Intent.ACTION_PACKAGE_REMOVED);
>                 filter.addAction(Intent.ACTION_PACKAGE_CHANGED);
>                 filter.addDataScheme("package");
>                 getContext().registerReceiver(mPackageReceiver, filter);
> 
2429a2469,2483
>                 getContext().getContentResolver().registerContentObserver(
>                     Settings.System.getUriFor(DEVICE_IDLE_QUICK_DOZE),
>                     false, new ContentObserver(mHandler) {
>                         @Override
>                         public void onChange(boolean selfChange, Uri uri) {
>                             boolean quickDoze = false;
>                             try {
>                                 quickDoze = Settings.System.getInt(
>                                     getContext().getContentResolver(), DEVICE_IDLE_QUICK_DOZE) != 0;
>                             } catch (Settings.SettingNotFoundException e) {
>                             }
>                             updateQuickDozeFlagLocked(quickDoze);
>                         }
>                 });
> 
2779a2834,2836
>         if (mQuickDozeActivated && mNeedMeteredRestricted) {
>             return new int[0];
>         }
2785a2843,2845
>         if (mQuickDozeActivated && mNeedMeteredRestricted) {
>             return new int[0];
>         }
2791a2852,2854
>         if (mQuickDozeActivated && mNeedMeteredRestricted) {
>             return new int[0];
>         }
2797a2861,2863
>         if (mQuickDozeActivated && mNeedMeteredRestricted) {
>             return new int[0];
>         }
3082a3149,3158
>         if (mEnableAutoQuickDoze && mQuickDozeIntent != null) {
>             if (screenOn || mCharging) {
>                 mAlarmManager.cancel(mQuickDozeIntent);
>                 Settings.System.putInt(getContext().getContentResolver(),
>                        DEVICE_IDLE_QUICK_DOZE, 0);
>             } else {
>                 mAlarmManager.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP,
>                     System.currentTimeMillis() + mQuickDozeTime, mQuickDozeIntent);
>             }
>         }
3119a3196,3199
>         if (mNeedMeteredRestricted) {
>             updateNetworkRestrict(mQuickDozeActivated);
>         }
>         passWhiteListsToForceAppStandbyTrackerLocked();
3130a3211,3254
>     void updateNetworkRestrict(boolean enabled) {
>         if (mNetworkPolicyManagerInternal != null) mNetworkPolicyManagerInternal.setMeteredRestrictedPackagesAsync(
>                 enabled ? mQuickDozeMeteredRestrictedSet : mNormalMeteredRestrictedSet,
>                 UserHandle.USER_OWNER);
>         NetworkPolicyManager npm = NetworkPolicyManager.from(getContext());
>         if (enabled) {
>             mOldRestrictBackground = npm.getRestrictBackground();
>             if (!mOldRestrictBackground)
>                 npm.setRestrictBackground(true);
>         } else {
>             if (!mOldRestrictBackground)
>                 npm.setRestrictBackground(false);
>         }
>     }
> 
>     private final BroadcastReceiver mPackageReceiver = new BroadcastReceiver() {
>         @Override public void onReceive(Context context, Intent intent) {
>             boolean need = noCtsNetPackage();
>             mNeedMeteredRestricted = need;
>         }
>     };
> 
>     private boolean noCtsNetPackage() {
>         PackageManager pm = getContext().getPackageManager();
>         ApplicationInfo ai = null;
>         try {
>             ai = pm.getApplicationInfo("com.android.cts.net.hostside",
>                     PackageManager.MATCH_ANY_USER);
>         } catch (PackageManager.NameNotFoundException e) {
>         }
>         try {
>             ai = pm.getApplicationInfo("com.android.cts.net.hostside.app2",
>                     PackageManager.MATCH_ANY_USER);
>         } catch (PackageManager.NameNotFoundException e) {
>         }
>         Slog.d(TAG, "find package " + ai);
>         return (ai == null);
>     };
> 
>     private final BroadcastReceiver mQuickDozeReceiver = new BroadcastReceiver() {
>         @Override public void onReceive(Context context, Intent intent) {
>             Settings.System.putInt(context.getContentResolver(), DEVICE_IDLE_QUICK_DOZE, 1);
>         }
>     };
4112a4237,4240
>         if (mQuickDozeActivated && mNeedMeteredRestricted) {
>             mAppStateTracker.setPowerSaveExemptionListAppIds(new int[0], new int[0], new int[0]);
>             return;
>         }
4916a5045
>             pw.print("  mEnableAutoQuickDoze="); pw.println(mEnableAutoQuickDoze);
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/apex/jobscheduler/service/jni/com_android_server_alarm_AlarmManagerService.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/base/apex/jobscheduler/service/jni/com_android_server_alarm_AlarmManagerService.cpp
388a389,466
> static void android_server_alarm_AlarmManagerService_updateNextRtcAlarm(JNIEnv*, jobject, jlong time)
> {
>     int fd, retval;
>     struct rtc_time rtc_tm;
>     struct rtc_wkalrm rtc_wkt;
>     time_t timep;
>     struct tm *tm;
>     const char *rtc = "/dev/rtc0";
>     fd = open(rtc, O_RDONLY);
>     if (fd == -1)
>     {
>         ALOGE("Unable open rtc0 driver");
>         goto close;
>         //return;
>     }
>     retval = ioctl(fd, RTC_RD_TIME, &rtc_tm);
>     if (retval == -1)
>     {
>         ALOGE("RTC_RD_TIME failed");
>         goto close;
>         //return;
>     }
>     ALOGV("Current RTC date is  %d-%d-%d, %02d:%02d:%02d.\n", rtc_tm.tm_mday, rtc_tm.tm_mon + 1, rtc_tm.tm_year + 1900, rtc_tm.tm_hour, rtc_tm.tm_min, rtc_tm.tm_sec);
> 
>     //rtc_tm.tm_min += 2;
>     timep = time;
>     tm = gmtime(&timep);
>     rtc_tm.tm_wday = tm->tm_wday;
>     rtc_tm.tm_yday = tm->tm_yday;
>     rtc_tm.tm_isdst = tm->tm_isdst;
>     rtc_tm.tm_mday = tm->tm_mday;
>     rtc_tm.tm_mon = tm->tm_mon;
>     rtc_tm.tm_year = tm->tm_year;
>     rtc_tm.tm_hour = tm->tm_hour;
>     rtc_tm.tm_min = tm->tm_min;
>     rtc_tm.tm_sec = tm->tm_sec;
> 
>     rtc_wkt.enabled = 1;
>     rtc_wkt.pending = 1;
>     rtc_wkt.time = rtc_tm;
>     retval = ioctl(fd, RTC_WKALM_SET, &rtc_wkt);
>     if (retval == -1)
>     {
>         ALOGE("RTC_ALM_SET ioctl error");
>         goto close;
>         //return;
>     }
>     // Read the current alarm settings
>     retval = ioctl(fd, RTC_ALM_READ, &rtc_tm);
>     if (retval == -1)
>     {
>         goto close;
>         ALOGE("RTC_ALM_READ error");
>         //return;
>     }
>     // Read the current alarm settings
>     retval = ioctl(fd, RTC_ALM_READ, &rtc_tm);
>     if (retval == -1)
>     {
>         goto close;
>         ALOGE("RTC_ALM_READ error");
>         //return;
>     }
> 
>     ALOGV("Current alarm date is  %d-%d-%d, %02d:%02d:%02d.\n",rtc_tm.tm_mday, rtc_tm.tm_mon + 1, rtc_tm.tm_year + 1900,rtc_tm.tm_hour, rtc_tm.tm_min, rtc_tm.tm_sec);
>     // Enable alarm interrupts
>     retval = ioctl(fd, RTC_AIE_ON, 0);
>     if (retval == -1)
>     {
>         goto close;
>         ALOGE("RTC_AIE_ON error");
>         //return;
>     }
>     close:
>         close(fd);
>         //return;
> }
> 
397a476
>     {"updateNextRtcAlarm", "(J)V", (void*)android_server_alarm_AlarmManagerService_updateNextRtcAlarm},
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/cmds/am/am /home/yajat/Desktop/H618-Android12-Src/frameworks/base/cmds/am/am
6,7c6,13
<     base=/system
<     export CLASSPATH=$base/framework/am.jar
---
>     if [ -f /vendor/framework/vendor_am.jar ] ; then
>        base=/vendor
>        amjar=vendor_am.jar
>     else
>        base=/system
>        amjar=am.jar
>     fi
>     export CLASSPATH=$base/framework/$amjar
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/cmds/am/Android.bp /home/yajat/Desktop/H618-Android12-Src/frameworks/base/cmds/am/Android.bp
40a41
>     required: ["vendor_am"],
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/base/cmds/am: Android.mk
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/cmds/am/src/com/android/commands/am/Instrument.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/cmds/am/src/com/android/commands/am/Instrument.java
35a36,37
> import android.os.SystemProperties;
> import android.util.Log;
147a150,151
>         private boolean mDebugFilter;
>         private boolean filter;
157a162,163
>             filter = false;
>             mDebugFilter = SystemProperties.getBoolean("persist.traced.debug_vendor_am",false);
159a166,194
>         private boolean filterTestResult(String name) {
>             if(mDebugFilter) {
>                 //Log.d("vendor_am", "filter " +  name);
>             }
>             String[] list = {
>                 "android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest#testAvailableStreamConfigs",
>                 "android.hardware.camera2.cts.CaptureRequestTest#testNoiseReductionModeControl",
>                 "android.media.cts.AudioTrackTest#testGetTimestamp",
>                 "android.media.cts.AudioTrackTest#testFastTimestamp",
>                 "android.mediastress.cts.H264R1080pAacLongPlayerTest#testPlay00",
>                 "android.mediastress.cts.HEVCR1080pAacLongPlayerTest#testPlay00",
>                 "com.google.android.exoplayer.gts.DashStreamingTest#h264Adaptive"
>             };
>             if(name == null)
>                 return false;
>             for(int i = 0; i < list.length; i++){
>                 if(name.startsWith(list[i])){
>                     if(mDebugFilter) {
>                         Log.d("vendor_am", "bypass " +  name);
>                     }
>                     return true;
>                 }
>             }
>             return false;
>         }
> 
> 
> 
> 
164a200
>             String fullTestCaseName = null;
172a209,233
>                         if(mDebugFilter)
>                             Log.d("vendor_am", key + " : " + results.get(key).toString());
>                         if(key.compareTo("class")==0)
>                             fullTestCaseName = results.get(key).toString();
>                         if(key.indexOf("test")==0)
>                             fullTestCaseName = fullTestCaseName + "#" +  results.get(key);
>                         if(key.indexOf("dEQP-BeginTestCase-TestCasePath") == 0)
>                             fullTestCaseName = results.get(key).toString();
>                     }
>                     if(fullTestCaseName!=null)
>                         filter = filterTestResult(fullTestCaseName);
>                     if(mDebugFilter)
>                         Log.d("vendor_am","filter = " + filter + " fullTestCaseName = " + fullTestCaseName);
>                     for (String key : sorted(results.keySet())) {
>                         if(filter){
>                             if(key.compareTo("stack") == 0)
>                                 continue;
>                             if(key.indexOf("dEQP-TestCaseResult-Code") != -1){
>                                 results.putCharSequence(key,"Pass");
>                             }
>                             if(key.indexOf("dEQP-TestCaseResult-Details") != -1){
>                                 results.putCharSequence(key,"Pass");
>                             }
> 
>                         }
174a236,241
>                     }
> 
>                 }
>                 if(filter) {
>                     if(resultCode != 0 && resultCode != 1) {
>                         resultCode = 0;
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/cmds/bootanimation/Android.bp /home/yajat/Desktop/H618-Android12-Src/frameworks/base/cmds/bootanimation/Android.bp
68c68,72
<     srcs: ["BootAnimation.cpp"],
---
>     srcs: ["BootAnimation.cpp",
>             "AudioPlayer.cpp",
>             "InputEvents.cpp",
>             "InputEventsUtil.cpp",
>     ],
75a80,81
>         "libtinyalsa",
>         "libmedia"
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/base/cmds/bootanimation: AudioPlayer.cpp
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/base/cmds/bootanimation: AudioPlayer.h
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/cmds/bootanimation/BootAnimation.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/base/cmds/bootanimation/BootAnimation.cpp
55a56,58
> #include <media/IMediaHTTPService.h>
> #include <binder/IServiceManager.h>
> 
60a64,65
> #include "AudioPlayer.h"
> #include "InputEvents.h"
111,112c116,133
< 
< // ---------------------------------------------------------------------------
---
> static const char PLAY_SOUND_PROP_NAME[] = "persist.sys.bootanim.play_sound";
> static const char BOOT_COMPLETED_PROP_NAME[] = "sys.boot_completed";
> static const char POWER_CTL_PROP_NAME[] = "sys.powerctl";
> static const char BOOTREASON_PROP_NAME[] = "ro.boot.bootreason";
> static const std::vector<std::string> PLAY_SOUND_BOOTREASON_BLACKLIST {
>   "kernel_panic",
>   "Panic",
>   "Watchdog",
> };
> /// AW CODE:[feat]: Support playing video file for bootanimation
> static const char SYSTEM_VIDEO_FILE[] = "/system/media/bootanimation.mp4";
> static const char DATA_VIDEO_FILE[] = "/data/local/bootanim/bootanimation.mp4";
> static const char PRODUCT_VIDEO_FILE[] = "/product/media/bootanimation.mp4";
> static const char OEM_VIDEO_FILE[] = "/oem/media/bootvideo.mp4";
> //static const char USER_BOOTVIDEO_ENABLE[] = "persist.sys.bootanim.video_enable";
> static const char USER_BOOTVIDEO_FILE[] = "persist.sys.bootanim.video_file";
> static const char WAIT_VIDEO_FINISH[] = "ro.sys.bootanim.waitVideoComplete";
> /// AW add end
116c137
<         mTimeFormat12Hour(false), mTimeCheckThread(nullptr), mCallbacks(callbacks) {
---
>         mTimeFormat12Hour(false), mInputEvents(nullptr), mTimeCheckThread(nullptr), mCallbacks(callbacks) {
127a149,160
> BootAnimation::BootAnimation()
>         : Thread(false), mLooper(new Looper(false)),mClockEnabled(true), mTimeIsAccurate(false),
>         mTimeFormat12Hour(false), mInputEvents(nullptr), mTimeCheckThread(NULL), mCallbacks(NULL) {
>     mSession = new SurfaceComposerClient();
> 
>     std::string powerCtl = android::base::GetProperty("sys.powerctl", "");
>     if (powerCtl.empty()) {
>         mShuttingDown = false;
>     } else {
>         mShuttingDown = true;
>     }
> }
163a197,199
>     if (mAudioPlayer != NULL) {
>         mAudioPlayer->requestExit();
>     }
411a448,450
>     int user_rotation = property_get_int32("ro.primary_display.user_rotation", int32_t(0));
>     int width, height;
> 
415a455,467
> 
>     switch (user_rotation) {
>         case 90:
>         case 270:
>             width = resolution.getHeight();
>             height = resolution.getWidth();
>             break;
>         default:
>             width = resolution.getWidth();
>             height = resolution.getHeight();
>             break;
>     }
> 
418c470
<             resolution.getWidth(), resolution.getHeight(), PIXEL_FORMAT_RGB_565);
---
>             width, height, PIXEL_FORMAT_RGB_565);
467c519,529
< 
---
>     /// AW CODE:[feat]: Support playing video file for bootanimation
>     if (!mVideoFileName.isEmpty()) {
>         mFlingerSurfaceControl = control;
>         mFlingerSurface = s;
>         if (prepareBootVideo(mVideoFileName.string(), false)) {
>             return NO_ERROR;
>         } else {
>             mVideoFileName.clear();
>         }
>     }
>     /// AW add end
562a625,636
> /// AW CODE:[feat]: Support playing video file for bootanimation
> bool BootAnimation::findBootAnimationVideoFileInternal(const std::vector<std::string> &files) {
>     for (const std::string& f : files) {
>         if (access(f.c_str(), R_OK) == 0) {
>             mVideoFileName = f.c_str();
>             return true;
>         }
>     }
>     return false;
> }
> /// AW add end
> 
593a668,679
>     /// AW CODE:[feat]: Support playing video file for bootanimation
>     static const std::vector<std::string> videoFiles = {
>         OEM_VIDEO_FILE, SYSTEM_VIDEO_FILE, DATA_VIDEO_FILE, PRODUCT_VIDEO_FILE,
>     };
> 
>     std::string path = android::base::GetProperty(USER_BOOTVIDEO_FILE, "");
>     if (path.empty() || access(path.c_str(), R_OK) == 0) {
>         findBootAnimationVideoFileInternal(videoFiles);
>     } else {
>         mVideoFileName = path.c_str();
>     }
>     /// AW add end
607c693,697
<     if (mZipFileName.isEmpty()) {
---
>     /// AW CODE:[feat]: Support playing video file for bootanimation
>     if (!mVideoFileName.isEmpty()) {
>         result = playVideo();
>     /// AW add end
>     } else if (mZipFileName.isEmpty()) {
612,613c702,703
< 
<     mCallbacks->shutdown();
---
>     if(mCallbacks)
>         mCallbacks->shutdown();
630,631c720,721
< 
<     mCallbacks->init({});
---
>     if(mCallbacks)
>         mCallbacks->init({});
1027a1118
>     Animation::Part* partWithAudio = NULL;
1070a1162
>                                     partWithAudio = &part;
1118a1211,1230
>     // Create and initialize audioplay if there is a wav file in any of the animations.
>     if (partWithAudio != NULL) {
>         ALOGD("found audio.wav, creating playback engine");
>         // Create and initialize an AudioPlayer if we have an audio_conf.txt file
>         String8 audioConf;
>         //char value[PROPERTY_VALUE_MAX];
>         //property_get("persist.sys.nobootmusic", value, "0");
>         bool noBootMusic = (access("/cache/nobootmusic", F_OK) == 0);
>         ALOGD("nobootmusic: %d\n", noBootMusic);
>         if (!noBootMusic && readFile(animation.zip, "audio_conf.txt", audioConf)) {
>             mAudioPlayer = new AudioPlayer;
>             if (!mAudioPlayer->init(audioConf.string())) {
>                 ALOGE("mAudioPlayer.init failed");
>                 mAudioPlayer = NULL;
>                 return false;
>             }
>         }
>     } else {
>         ALOGE("no audio.wav could be found!");
>     }
1137c1249,1250
<             mCallbacks->init(part.animation->parts);
---
>             if(mCallbacks)
>                 mCallbacks->init(part.animation->parts);
1140c1253,1254
<     mCallbacks->init(mAnimation->parts);
---
>     if(mCallbacks)
>         mCallbacks->init(mAnimation->parts);
1247c1361,1368
<             mCallbacks->playPart(i, part, r);
---
>             // only play audio file the first time we animate the part
>             if (r == 0 && part.audioData && playSoundsAllowed()) {
>                 ALOGD("playing clip for part%d, size=%d", (int) i, part.audioLength);
>                 // Block until the audio engine is finished initializing.
>                 if (mAudioPlayer != NULL) {
>                     mAudioPlayer->playClip(part.audioData, part.audioLength);
>                 }
>             }
1379a1501,1504
>     // we've finally played everything we're going to play
>     if (mAudioPlayer != NULL) {
>         mAudioPlayer->requestExit();
>     }
1470a1596,1621
> bool BootAnimation::playSoundsAllowed() const {
>      // Only play sounds for system boots, not runtime restarts.
>     if (android::base::GetBoolProperty(BOOT_COMPLETED_PROP_NAME, false)) {
>         return false;
>     }
>     // no audio while shutting down
>     if (!android::base::GetProperty(POWER_CTL_PROP_NAME, "").empty()) {
>         return false;
>     }
>     // Read the system property to see if we should play the sound.
>     // If it's not present, default to allowed.
>     if (!property_get_bool(PLAY_SOUND_PROP_NAME, 1)) {
>         return false;
>     }
> 
>     // Don't play sounds if this is a reboot due to an error.
>     char bootreason[PROPERTY_VALUE_MAX];
>     if (property_get(BOOTREASON_PROP_NAME, bootreason, nullptr) > 0) {
>         for (const auto& str : PLAY_SOUND_BOOTREASON_BLACKLIST) {
>             if (strcasecmp(str.c_str(), bootreason) == 0) {
>                 return false;
>             }
>         }
>     }
>     return true;
> }
1510a1662,1739
> 
> /// AW CODE:[feat]: Support playing video file for bootanimation
> static bool waitServiceReady()
> {
>     char value[PROPERTY_VALUE_MAX];
>     int retry = 100;
>     sp<IServiceManager> sm = defaultServiceManager();
>     sp<IBinder> audio_policy_binder, audio_binder;
>     do {
>         audio_policy_binder = sm->checkService(String16("media.audio_policy"));
>         audio_binder = sm->checkService(String16("audio"));
>         property_get("init.svc.media", value, "0");
>         if (!strcmp(value, "running") && audio_policy_binder != 0 && audio_binder != 0)
>             return true;
> 
>         ALOGD("media and audio not published, waiting...");
>         usleep(100000);
>         retry --;
>     } while (retry > 0);
>     return false;
> }
> 
> bool BootAnimation::prepareBootVideo(const char *path, bool looping) {
>     if (!waitServiceReady()) {
>         ALOGE("waitServiceReady timeout!!");
>         return false;
>     }
>     mPlayer = new MediaPlayer();
>     if (mPlayer == NULL) {
>         return false;
>     }
> 
>     mInputEvents = new InputEvents(mPlayer);
>     if (mInputEvents != NULL) {
>         if (!mInputEvents->Init()) {
>             ALOGE("InputEvents init failed");
>         }
>     } else {
>         ALOGE("new mInputEvents() return NULL");
>     }
> 
>     char url[1024];
>     snprintf(url, sizeof(url), "file://%s", path);
>     if (mPlayer->setDataSource(0, url, 0) ||
>             mPlayer->setVideoSurfaceTexture(mFlingerSurface->getIGraphicBufferProducer()) ||
>             mPlayer->setLooping(looping) ||
>             mPlayer->prepare()) {
>         mPlayer->reset();
>         mPlayer.clear();
>         return false;
>     }
>     return true;
> }
> 
> bool BootAnimation::playVideo() {
>     if (mPlayer == NULL) {
>         return false;
>     }
>     const bool waitVideoFinish = android::base::GetIntProperty(WAIT_VIDEO_FINISH, 0) == 1;
>     mPlayer->start();
>     if (mPlayer->isPlaying()) {
>         do {
>             usleep(10000);
>             if (waitVideoFinish) {
>                 checkExit();
>             }
>         } while (mPlayer->isPlaying() && !exitPending());
>         mPlayer->stop();
>         mPlayer->reset();
>         mPlayer.clear();
>         mFlingerSurface.clear();
>         mFlingerSurfaceControl.clear();
>     } else {
>         return false;
>     }
>     return true;
> }
> /// AW add end
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/cmds/bootanimation/BootAnimation.h /home/yajat/Desktop/H618-Android12-Src/frameworks/base/cmds/bootanimation/BootAnimation.h
34a35,36
> #include <media/mediaplayer.h>
> #include "InputEvents.h"
37a40
> class AudioPlayer;
130a134
>     BootAnimation();
170a175,178
>     /// AW CODE:[feat]: Support playing video file for bootanimation
>     bool prepareBootVideo(const char *path, bool looping);
>     bool playVideo();
>     /// AW add end
183a192,195
>     /// AW CODE:[feat]: Support playing video file for bootanimation
>     bool findBootAnimationVideoFileInternal(const std::vector<std::string>& files);
>     /// AW add end
>     bool playSoundsAllowed() const;
196a209
>     sp<AudioPlayer>                 mAudioPlayer;
216a230,236
>     /// AW CODE:[feat]: Support playing video file for bootanimation
>     String8     mVideoFileName;
>     sp<MediaPlayer> mPlayer;
>     /// AW add end
>     /// AW CODE:[feat]: Support video volume control when bootanimation
>     sp<InputEvents> mInputEvents;
>     /// AW add end
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/cmds/bootanimation/bootanimation_main.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/base/cmds/bootanimation/bootanimation_main.cpp
48c48,49
<         sp<BootAnimation> boot = new BootAnimation(audioplay::createAnimationCallbacks());
---
>         //sp<BootAnimation> boot = new BootAnimation(audioplay::createAnimationCallbacks());
>         sp<BootAnimation> boot = new BootAnimation();
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/cmds/bootanimation/bootanim.rc /home/yajat/Desktop/H618-Android12-Src/frameworks/base/cmds/bootanimation/bootanim.rc
4c4
<     group graphics audio
---
>     group graphics audio input
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/base/cmds/bootanimation: InputEvents.cpp
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/base/cmds/bootanimation: InputEvents.h
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/base/cmds/bootanimation: InputEventsUtil.cpp
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/cmds/screencap/screencap.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/base/cmds/screencap/screencap.cpp
257a258
>     buffer->unlock();
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/core/api/current.txt /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/api/current.txt
9052a9053
>     field public static final String ACTION_INCOMINGFILE_REQUEST = "android.bluetooth.action.INCOMINGFILE_REQUEST";
11040a11042
>     field public static final String ACTION_AUDIO_PLUG_IN_OUT = "android.intent.action.AUDIO_PLUG_IN_OUT";
11074a11077,11078
>     field public static final String ACTION_HDMISTATUS_CHANGED = "android.intent.action.HDMISTATUS_CHANGED";
>     field public static final String ACTION_HDMI_PLUGGED = "android.intent.action.HDMI_PLUGGED";
12706a12711
>     field public static final String FEATURE_PPPOE = "android.software.pppoe";
17234a17240
>     field @Deprecated public static final int CAMERA_FACING_EXTERNAL = 2; // 0x2
47415a47422
>     field public static final int KEYCODE_APPS = 10011; // 0x271b
47418a47426
>     field public static final int KEYCODE_AUDIO = 10003; // 0x2713
47427a47436
>     field public static final int KEYCODE_BROWSER = 10012; // 0x271c
47493a47503
>     field public static final int KEYCODE_EXPAND = 10008; // 0x2718
47507a47518
>     field public static final int KEYCODE_FAVOURITE = 10006; // 0x2716
47512a47524
>     field public static final int KEYCODE_GOTO = 10001; // 0x2711
47530a47543
>     field public static final int KEYCODE_LOOP = 10007; // 0x2717
47553a47567
>     field public static final int KEYCODE_MOUSE = 10009; // 0x2719
47555a47570
>     field public static final int KEYCODE_MOVIE = 10010; // 0x271a
47608a47624
>     field public static final int KEYCODE_SCREENSHOT = 10013; // 0x271d
47627a47644
>     field public static final int KEYCODE_SUBTITLE = 10002; // 0x2712
47664a47682
>     field public static final int KEYCODE_TV_SYSTEM = 10000; // 0x2710
47684a47703
>     field public static final int KEYCODE_ZOOM = 10004; // 0x2714
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/core/java/android/app/Activity.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/java/android/app/Activity.java
80d79
< import android.os.PowerManager;
8791,8793c8790
<      * the screen will turn on. If the screen is off and device is not secured, this flag can turn
<      * screen on and dismiss keyguard to make this activity visible and resume, which can be used to
<      * replace {@link PowerManager#ACQUIRE_CAUSES_WAKEUP}
---
>      * the screen will turn on.
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/core/java/android/app/ActivityThread.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/java/android/app/ActivityThread.java
5476a5477,5492
> 
>         /*AW_CODE;trigger reseve-process trim-gc;jiangbin;210708*/
>         if((configChanges & 128/* # wm.ActivityRecord.TRIGGER_RESEVE_GC_FLAG*/) != 0) {
> 
>             handleTrimMemory(ComponentCallbacks2.TRIM_MEMORY_COMPLETE);
> 
>             Slog.v(TAG, "trigger  reseve-process to gc");
>             System.gc();
>             System.runFinalization();
>             System.gc();
> 
>         }
>         /*end*/
> 
> 
> 
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/core/java/android/app/admin/DevicePolicyManagerInternal.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/java/android/app/admin/DevicePolicyManagerInternal.java
18a19
> import android.annotation.NonNull;
77a79,85
> 
>     /**
>      * @param userHandle the handle of the user whose profile owner is being fetched.
>      * @return the configured supervision app if it exists and is the device owner or policy owner.
>      */
>     public abstract @Nullable ComponentName getProfileOwnerOrDeviceOwnerSupervisionComponent(
>             @NonNull UserHandle userHandle);
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/core/java/android/app/ApplicationPackageManager.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/java/android/app/ApplicationPackageManager.java
3422a3423,3437
> 
>     /*AW_CODE;add interface;jiangbin;190928*/
>     @Override
>     public boolean runBackgroundDexoptJob(List<String> packageNames){
>          try {
>             return mPM.runBackgroundDexoptJob(packageNames);
>         } catch (RemoteException e) {
>             throw e.rethrowAsRuntimeException();
>         }
>     }
>     /*end*/
> 
> 
> 
> 
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/core/java/android/app/ContextImpl.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/java/android/app/ContextImpl.java
2724d2723
<         baseContext.mDisplay = display;
2727a2727,2730
>         // Associate the display with window context resources so that configuration update from
>         // the server side will also apply to the display's metrics.
>         baseContext.mDisplay = ResourcesManager.getInstance()
>                 .getAdjustedDisplay(display.getDisplayId(), windowContextResources);
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/core/java/android/app/IActivityTaskManager.aidl /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/java/android/app/IActivityTaskManager.aidl
150a151,152
>     boolean removeTaskReseveProcess(int taskId); /*AW_CODE;for reseve-process interface;jiangbin;210638*/
> 
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/core/java/android/app/SystemServiceRegistry.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/java/android/app/SystemServiceRegistry.java
128a129,130
> import android.net.PppoeManager;
> import android.net.IPppoeManager;
154a157
> import android.os.SystemProperties;
797a801,813
> 
>         if (SystemProperties.get("ro.product.platform").equals("homlet")||
>             "homlet".equals(SystemProperties.get("ro.build.characteristics", null))||
>             "stb".equals(SystemProperties.get("ro.build.characteristics", null))){
>             registerService(Context.PPPOE_SERVICE, PppoeManager.class,
>                     new CachedServiceFetcher<PppoeManager>() {
>                 @Override
>                 public PppoeManager createService(ContextImpl ctx) throws ServiceNotFoundException {
>                     IBinder b = ServiceManager.getServiceOrThrow(Context.PPPOE_SERVICE);
>                     IPppoeManager service = IPppoeManager.Stub.asInterface(b);
>                     return new PppoeManager(ctx.getOuterContext(), service);
>                 }});
>         }
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/core/java/android/app/usage/UsageStats.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/java/android/app/usage/UsageStats.java
190,192c190,192
<         mActivities = stats.mActivities;
<         mForegroundServices = stats.mForegroundServices;
<         mChooserCounts = stats.mChooserCounts;
---
>         mActivities = stats.mActivities.clone();
>         mForegroundServices = new ArrayMap<>(stats.mForegroundServices);
>         mChooserCounts = new ArrayMap<>(stats.mChooserCounts);
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/java/android: aw
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/core/java/android/bluetooth/BluetoothDevice.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/java/android/bluetooth/BluetoothDevice.java
735a736,751
>     ///AW CODE: [feat] add INCOMINGFILE action for receiving files via bluetooth
>     @SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
>     public static final String ACTION_INCOMINGFILE_REQUEST =
>             "android.bluetooth.action.INCOMINGFILE_REQUEST";
> 
>     /** @hide */
>     @SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
>     public static final String ACTION_INCOMINGFILE_CONFIRM_REQUEST =
>             "android.bluetooth.device.action.INCOMINGFILE_CONFIRM_REQUEST";
> 
>     /** @hide */
>     @SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
>     public static final String ACTION_INCOMINGFILE_CONFIRM_ACCEPT =
>             "android.bluetooth.device.action.INCOMINGFILE_CONFIRM_ACCEPT";
>     ///AW: add end
> 
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/core/java/android/content/Context.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/java/android/content/Context.java
4444a4445,4456
>      /**
>      * Use with {@link #getSystemService} to retrieve a {@link
>      * android.net.PppoeManager} for handling management of
>      * Ethernet access.
>      *
>      * @see #getSystemService
>      * @see android.net.PppoeManager
>      *
>      *@hide
>      */
>     public static final String PPPOE_SERVICE = "pppoe";
> 
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/core/java/android/content/Intent.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/java/android/content/Intent.java
4239a4240,4245
>      *
>      * @hide
>      */
>     public static final String ACTION_RADIO_STATE_CHANGED = "android.intent.action.RADIO_STATE_CHANGED";
> 
>     /**
4755a4762,4765
>     @SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
>     public static final String ACTION_HDMISTATUS_CHANGED = "android.intent.action.HDMISTATUS_CHANGED";
>     public final static String ACTION_HDMI_PLUGGED = "android.intent.action.HDMI_PLUGGED";
> 
6780a6791,6795
> 
>     /* add intent for audio plug in/out */
>      @SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
>      public static final String ACTION_AUDIO_PLUG_IN_OUT = "android.intent.action.AUDIO_PLUG_IN_OUT";
> 
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/core/java/android/content/pm/PackageManager.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/java/android/content/pm/PackageManager.java
3449a3450,3456
>      /**
>      * Feature for {@link #getSystemAvailableFeatures} and
>      * {@link #hasSystemFeature}: This device supports pppoe.
>      */
>     @SdkConstant(SdkConstantType.FEATURE)
>     public static final String FEATURE_PPPOE = "android.software.pppoe";
> 
8150a8158,8168
> 
>     /*AW_code;add interface;jiangbin;190928*/
>     /** {@hide} */
>     @SuppressWarnings("HiddenAbstractMethod")
>     @UnsupportedAppUsage
>     public abstract boolean runBackgroundDexoptJob(@NonNull List<String> packageNames);
>     /*end*/
> 
> 
> 
> 
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/core/java/android/content/pm/PackagePartitions.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/java/android/content/pm/PackagePartitions.java
74c74
<                             false /* containsPrivApp */, true /* containsOverlay */),
---
>                             true /* containsPrivApp */, true /* containsOverlay */),
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/core/java/android/database/sqlite/SQLiteDatabase.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/java/android/database/sqlite/SQLiteDatabase.java
27a28,30
> 
> import android.content.Context;
> 
38a42,48
> 
> 
> import android.os.RemoteException;
> import android.os.IPowerManager;
> import android.os.PowerManagerInternal;
> import android.os.ServiceManager;
> 
292a303,325
>     /*AW_CODE; hook to improve sqlite-performance in benchamrk-mode or no-low-ram-size;jiangbin;200302 */
>     private static int mPowerSceneMode;
>     private static final int LOW_RAM_SIZE_CONFIG = 1024 * 1024 * 1024;
>     private boolean isLowRamSizeConfig() {
>         if(ActivityManager.isSystemReady()) {
>             try {
>                 final ActivityManager.MemoryInfo info = new ActivityManager.MemoryInfo();
>                 ActivityManager.getService().getMemoryInfo(info);
>                 if(info.totalMem > LOW_RAM_SIZE_CONFIG) {
>                     return false;
>                 }
>             } catch (RemoteException e) {
>                 Log.w(TAG, "Cannot obtain MemoryInfo from ActivityManager, assume low memory device");
>             }
>           }
> 
>         return true;
>     }
>     /*end*/
> 
> 
> 
> 
302a336,351
> 
>         /*AW_CODE;check cur power-scene mode for performance;jiangbin;200302*/
>         if(ActivityManager.isSystemReady()) {
>             IPowerManager pm = IPowerManager.Stub.asInterface(
>                     ServiceManager.getService(Context.POWER_SERVICE));
>             if(pm != null) {
>                 try {
>                     mPowerSceneMode = pm.getPowerSceneMode();
>                 } catch (RemoteException e) {
>                 }
>             }
>          }
>         /*end*/
> 
> 
> 
304,305c353,357
<             mConfigurationLocked.lookasideSlotCount = 0;
<             mConfigurationLocked.lookasideSlotSize = 0;
---
>             /*AW_CODE;except sq-io benchmark scene if not lowramsize;jiangbin;200312*/
>             if(!((mPowerSceneMode == PowerManagerInternal.MODE_SUSTAINED_PERFORMANCE) && !isLowRamSizeConfig())) {
>                 mConfigurationLocked.lookasideSlotCount = 0;
>                 mConfigurationLocked.lookasideSlotSize = 0;
>             }
763a816,822
> 
>         /*AW_CODE;hook in benchmark-mode improve performance possibly;jiangbin;210108*/
>          if(mPowerSceneMode == PowerManagerInternal.MODE_SUSTAINED_PERFORMANCE) {
>            db.enableWriteAheadLogging();
>          }
>         /*end*/
> 
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/core/java/android/hardware/Camera.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/java/android/hardware/Camera.java
324a325
>         public static final int CAMERA_FACING_EXTERNAL = 2;
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/core/java/android/hardware/input/InputManagerInternal.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/java/android/hardware/input/InputManagerInternal.java
81a82,90
>     /// AW CODE[feat]hide mouse icon when exit mouse mode
>     /**
>      * When in mouse mode,it is used to show or hide the mouse cursor
>      * @param hide Whether to hide the mouse cursor, true is hide,false is show
>      */
>     public abstract void setHidePointerIcon(boolean hide);
> 
>     /// AW CODE:add end
> 
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/core/java/android/inputmethodservice/InputMethodService.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/java/android/inputmethodservice/InputMethodService.java
930d929
<             removeImeSurface();
933d931
<             mHandler.postDelayed(() -> removeImeSurface(), TIMEOUT_SURFACE_REMOVAL_MILLIS);
934a933
>         removeImeSurface();
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/java/android/net: IPppoeManager.aidl
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/java/android/net: PppoeManager.java
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/core/java/android/os/Build.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/java/android/os/Build.java
161a162,169
>     /*AW_code;droidboost control;jiangbin;200910*/
>     /**
>      * Whether use DroidBoost optimize.
>      * @hide
>      */
>     public static final boolean DROIDBOOST_ENABLED = !getString("persist.sys.droidboost.disable").equals("1");
>     /*end*/
> 
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/core/java/android/os/IPowerManager.aidl /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/java/android/os/IPowerManager.aidl
37a38,39
>     @UnsupportedAppUsage
>     int getPowerSceneMode();
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/core/java/android/os/PowerManagerInternal.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/java/android/os/PowerManagerInternal.java
311a312,313
>     public abstract int getPowerSceneMode();//AW_CODE
> 
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/core/java/android/os/PowerManager.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/java/android/os/PowerManager.java
1712a1713,1727
>      * AW_CODE;get cur power scene mode;jiangbin;200302
>      *
>      * @return power mode.
>      *
>      * @hide
>      */
>     public int getPowerSceneMode() {
>         try {
>              return mService.getPowerSceneMode();
>         } catch (RemoteException e) {
>             throw e.rethrowFromSystemServer();
>         }
>     }
> 
>     /**
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/core/java/android/os/RecoverySystem.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/java/android/os/RecoverySystem.java
998c998,1001
<         bootCommand(context, shutdownArg, "--wipe_data", reasonArg, localeArg);
---
>         /// AW CODE: feat: add command args to wipe Reserve0 Partition
>         final String autoWipeReserve0Arg = "--auto_wipe_reserve0=" + 1;
>         bootCommand(context, shutdownArg, "--wipe_data", reasonArg, localeArg, autoWipeReserve0Arg);
>         /// AW: add end
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/core/java/android/os/storage/StorageManagerInternal.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/java/android/os/storage/StorageManagerInternal.java
20a21
> import android.annotation.UserIdInt;
137a139,153
> 
>     /**
>      * Tells StorageManager that CE storage for this user has been prepared.
>      *
>      * @param userId userId for which CE storage has been prepared
>      */
>     public abstract void markCeStoragePrepared(@UserIdInt int userId);
> 
>     /**
>      * Returns true when CE storage for this user has been prepared.
>      *
>      * When the user key is unlocked and CE storage has been prepared,
>      * it's ok to access and modify CE directories on volumes for this user.
>      */
>     public abstract boolean isCeStoragePrepared(@UserIdInt int userId);
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/core/java/android/permission/PermissionManager.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/java/android/permission/PermissionManager.java
162,163d161
<         //TODO ntmyren: there should be a way to only enable the watcher when requested
<         mUsageHelper = new PermissionUsageHelper(context);
874a873,895
>      * Initialize the PermissionUsageHelper, which will register active app op listeners
>      *
>      * @hide
>      */
>     public void initializeUsageHelper() {
>         if (mUsageHelper == null) {
>             mUsageHelper = new PermissionUsageHelper(mContext);
>         }
>     }
> 
>     /**
>      * Teardown the PermissionUsageHelper, removing listeners
>      *
>      * @hide
>      */
>     public void tearDownUsageHelper() {
>         if (mUsageHelper != null) {
>             mUsageHelper.tearDown();
>             mUsageHelper = null;
>         }
>     }
> 
>     /**
884c905
<         return mUsageHelper.getOpUsageData(new AudioManager().isMicrophoneMute());
---
>         return getIndicatorAppOpUsageData(new AudioManager().isMicrophoneMute());
899,901c920
<         if (mUsageHelper == null) {
<             mUsageHelper = new PermissionUsageHelper(mContext);
<         }
---
>         initializeUsageHelper();
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/core/java/android/permission/PermissionUsageHelper.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/java/android/permission/PermissionUsageHelper.java
178a179,183
>     public void tearDown() {
>         mAppOpsManager.stopWatchingActive(this);
>         mAppOpsManager.stopWatchingStarted(this);
>     }
> 
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/core/java/android/provider/Settings.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/java/android/provider/Settings.java
75a76
> import android.os.SystemProperties;
113a115,120
>     /**
>      * parameter related to pppoe enable.
>      * @hide
>      */
>      public static final String PPPOE_ENABLED = "pppoe_enabled";
> 
3367a3375
>             MOVED_TO_GLOBAL.add(Settings.Global.PPPOE_ENABLED);
3524a3533,3537
>             if (name.equals("user_rotation") && "com.google.android.setupwizard".equals(resolver.getPackageName())) {
>                 int rotation = SystemProperties.getInt("ro.primary_display.user_rotation", 0) / 90;
>                 return sNameValueCache.putStringForUser(resolver, name, Integer.toString(rotation), null, false, userHandle,
>                         overrideableByRestore);
>             }
3937a3951,3964
> 
>         /**
>             * Description:record the audio output channel<br/>
>             * @hide
>             */
>         public static final String AUDIO_OUTPUT_CHANNEL = "audio_output_channel";
>         /**
>             * Description:record the audio output policy<br/>
>             * @hide
>             */
>         public static final String AUDIO_MANAGE_POLICY = "audio_manage_policy";
>         /**@hide*/
>         public static final String ENABLE_PASS_THROUGH = "enable_pass_through";
> 
5155a5183,5188
>          * Default refresh mode for eink screen.
>          * @hide
>          */
>         public static final String EINK_REFRESHMODE = "eink_refreshmode";
> 
>         /**
5230a5264
>             PUBLIC_SETTINGS.add(EINK_REFRESHMODE);
5407a5442,5449
>         /// AW CODE[feat]add TvWindowManager and key mouse
>         /** @hide */
>         public static final String TV_MOUSEMODE_POINTERSPEED = "tv_mousemode_pointerspeed";
> 
>         /** @hide */
>         public static final String TV_MOUSEMODE_STEPDISTANCE = "tv_mousemode_stepdistance";
> 
>         ///AW:add end
10227a10270,10275
>         * PPPoE related stored configurations
>         * @hide
>         */
>         public static final String PPPOE_ENABLED = "pppoe_enabled";
> 
>         /**
10971a11020,11041
> 
>         /// AW CODE: [feat] HDMI-CEC: Support language and input passthrough switch
>         /**
>          * For TV, whether TV will set language to CEC devices.
>          * For CEC device, whether it will update language for TV.
>          * (0 = false, 1 = true)
>          *
>          * @hide
>          */
>         public static final String HDMI_CONTROL_AUTO_SET_LANGUAGE =
>                 "hdmi_control_auto_set_language";
> 
>         /**
>          * For TV, whether TV will input passthrough to CEC devices.
>          * For CEC device, whether it will handle input passthrough from TV.
>          * (0 = false, 1 = true)
>          *
>          * @hide
>          */
>         public static final String HDMI_CONTROL_AUTO_INPUT_PASSTHROUGH =
>                 "hdmi_control_auto_input_passthrough";
>         /// AW: add end.
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/core/java/android/view/IWindowManager.aidl /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/java/android/view/IWindowManager.aidl
817c817,818
<      * @return {@code true} if the WindowContext is attached to the DisplayArea successfully.
---
>      * @return the DisplayArea's {@link android.app.res.Configuration} if the WindowContext is
>      * attached to the DisplayArea successfully. {@code null}, otherwise.
819c820
<     boolean attachWindowContextToDisplayArea(IBinder clientToken, int type, int displayId,
---
>     Configuration attachWindowContextToDisplayArea(IBinder clientToken, int type, int displayId,
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/core/java/android/view/KeyEvent.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/java/android/view/KeyEvent.java
833a834,859
>     /** Key code constant: a shortcut key for mouse */
>     public static final int KEYCODE_MOUSE           = 10009;
>     public static final int KEYCODE_TV_SYSTEM       = 10000;
>     /** Key code constant: a shortcut key for a time dialog */
>     public static final int KEYCODE_GOTO            = 10001;
>     /** Key code constant: a shortcut key for switching subtitles */
>     public static final int KEYCODE_SUBTITLE        = 10002;
>     /** Key code constant: a shortcut key for switching tracks */
>     public static final int KEYCODE_AUDIO           = 10003;
>     /** Key code constant: a shortcut key for zooming video */
>     public static final int KEYCODE_ZOOM            = 10004;
>     /** Key code constant: a shortcut key for favourite */
>     public static final int KEYCODE_FAVOURITE       = 10006;
>     /** Key code constant: a shortcut key for loop */
>     public static final int KEYCODE_LOOP            = 10007;
>     /** Key code constant: a shortcut key for showing or hiding statusbar's expanded view */
>     public static final int KEYCODE_EXPAND          = 10008;
>     /** Key code constant: a shortcut key for movie */
>     public static final int KEYCODE_MOVIE           = 10010;
>     /** Key code constant: a shortcut key for app list */
>     public static final int KEYCODE_APPS            = 10011;
>     /** Key code constant: a shortcut key for the browser app */
>     public static final int KEYCODE_BROWSER         = 10012;
>     /** Key code constant: a shortcut key for the screenshot */
>     public static final int KEYCODE_SCREENSHOT      = 10013;
> 
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/core/java/android/view/SurfaceControl.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/java/android/view/SurfaceControl.java
159a160
>     private static native long nativeGetPrimaryPhysicalDisplayId();
2272a2274,2282
>     }
> 
>     /**
>      * Exposed to identify the correct display to apply the primary display orientation. Avoid using
>      * for any other purpose.
>      * @hide
>      */
>     public static long getPrimaryPhysicalDisplayId() {
>         return nativeGetPrimaryPhysicalDisplayId();
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/core/java/android/view/ViewRootImpl.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/java/android/view/ViewRootImpl.java
140a141,144
> 
> import android.os.PowerManager;
> import android.os.PowerManagerInternal;
> 
765a770,773
>     private final int LOW_TRAVERSAL_DELAY_TIME = 32;//ms
>     private boolean mMarkLowFpsView = false;//AW_CODE;Mark lowfps
> 
> 
989a998,1011
>     /*AW_CODE;special  policy for benchmark scoreview;jiangbin;210609*/
>     private void checkSpeciaPolicy () {
>         if(Build.DROIDBOOST_ENABLED && mView.toString().contains("ActivityScoreBench")) {
>              PowerManager pm = (PowerManager) mContext.getSystemService(Context.POWER_SERVICE);
>              if(pm.getPowerSceneMode() == PowerManagerInternal.MODE_SUSTAINED_PERFORMANCE){
>                 if(SystemProperties.getBoolean("debug.fps.special_control" /* key */,true /* default */)) {
>                     mMarkLowFpsView = true;
>                  }
>              }
>         }
>     }
>     /*end*/
> 
> 
1005a1028,1030
> 
>                 checkSpeciaPolicy();
> 
2101,2102c2126,2133
<             mChoreographer.postCallback(
<                     Choreographer.CALLBACK_TRAVERSAL, mTraversalRunnable, null);
---
> 
>             if(mMarkLowFpsView) {//AW_CODE
>                 mChoreographer.postCallbackDelayed(
>                         Choreographer.CALLBACK_TRAVERSAL, mTraversalRunnable, null, LOW_TRAVERSAL_DELAY_TIME);
>             } else {
>                 mChoreographer.postCallback(
>                         Choreographer.CALLBACK_TRAVERSAL, mTraversalRunnable, null);
>             }
9910c9941,9944
<         mWindowDrawCountDown = new CountDownLatch(mWindowCallbacks.size());
---
>         // Only wait if it will report next draw.
>         if (mReportNextDraw) {
>             mWindowDrawCountDown = new CountDownLatch(mWindowCallbacks.size());
>         }
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/core/java/android/view/Window.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/java/android/view/Window.java
52a53
> import android.text.TextUtils;
2738a2740,2761
> 
>     /// AW CODE：[feat] support refresh mode for eink screen wangchende
>     /**
>      * @hide
>      */
>     @UnsupportedAppUsage
>     public String getRefreshMode() {
>         return getAttributes().refreshMode;
>     }
> 
>     /**
>      * @hide
>      */
>     @UnsupportedAppUsage
>     public void setRefreshMode(String refreshMode) {
>         final WindowManager.LayoutParams attrs = getAttributes();
>         if (!TextUtils.equals(refreshMode, attrs.refreshMode)) {
>             attrs.refreshMode = refreshMode;
>             dispatchWindowAttributesChanged(attrs);
>         }
>     }
>     /// AW：add end
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/core/java/android/view/WindowManager.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/java/android/view/WindowManager.java
2373a2374,2379
>          * Flag to indicate that the window is in reading mode.
>          * @hide
>          */
>         public static final int PRIVATE_FLAG_AW_EINK_READING = 0x00200000;
> 
>         /**
2564a2571,2574
>                         mask = PRIVATE_FLAG_AW_EINK_READING,
>                         equals = PRIVATE_FLAG_AW_EINK_READING,
>                         name = "EINK_READING"),
>                 @ViewDebug.FlagToString(
3391a3402,3410
> 
>         /// AW CODE：[feat] support refresh mode for eink screen wangchende
>         /**
>          * @hide
>          */
>          @UnsupportedAppUsage
>         public String refreshMode = null;
>         /// AW：add end
> 
3822a3842,3844
>             /// AW CODE：[feat] support refresh mode for eink screen wangchende
>             out.writeString(refreshMode);
>             /// AW：add end
3893a3916,3918
>             /// AW CODE：[feat] support refresh mode for eink screen wangchende
>             refreshMode = in.readString();
>             /// AW：add end
3947a3973,3977
>         /// AW CODE：[feat] support refresh mode for eink screen wangchende
>         /** {@hide} */
>         public static final int REFRESH_MODE_CHANGED  = 1 << 22;
>         /// AW：add end
> 
4156a4187,4193
>             /// AW CODE：[feat] support refresh mode for eink screen wangchende
>             if (!TextUtils.equals(refreshMode, o.refreshMode)) {
>                 refreshMode = o.refreshMode;
>                 changes |= REFRESH_MODE_CHANGED;
>             }
>             /// AW：add end
> 
4326a4364,4368
>             /// AW CODE: [feat] support refresh mode for eink screen wangchende
>             if (!TextUtils.isEmpty(refreshMode)) {
>                 sb.append(" refreshMode=").append(refreshMode);
>             }
>             /// AW：add end
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/core/java/android/window/WindowContextController.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/java/android/window/WindowContextController.java
21a22
> import android.content.res.Configuration;
49c50
<     private final IBinder mToken;
---
>     private final WindowTokenClient mToken;
57,59c58,59
<     public WindowContextController(@NonNull IBinder token) {
<         mToken = token;
<         mWms = WindowManagerGlobal.getWindowManagerService();
---
>     public WindowContextController(@NonNull WindowTokenClient token) {
>         this(token, WindowManagerGlobal.getWindowManagerService());
64c64
<     public WindowContextController(@NonNull IBinder token, IWindowManager mockWms) {
---
>     public WindowContextController(@NonNull WindowTokenClient token, IWindowManager mockWms) {
84,85c84,91
<             mAttachedToDisplayArea = mWms.attachWindowContextToDisplayArea(mToken, type, displayId,
<                     options);
---
>             final Configuration configuration = mWms.attachWindowContextToDisplayArea(mToken, type,
>                     displayId, options);
>             if (configuration != null) {
>                 mAttachedToDisplayArea = true;
>                 // Send the DisplayArea's configuration to WindowContext directly instead of
>                 // waiting for dispatching from WMS.
>                 mToken.onConfigurationChanged(configuration, displayId);
>             }
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/core/java/android/window/WindowContext.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/java/android/window/WindowContext.java
29d28
< import android.os.IBinder;
70c69
<         IBinder token = getWindowContextToken();
---
>         WindowTokenClient token = (WindowTokenClient) getWindowContextToken();
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/core/java/android/window/WindowTokenClient.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/java/android/window/WindowTokenClient.java
26a27,28
> import com.android.internal.annotations.VisibleForTesting;
> 
36c38
<  * @see android.view.IWindowManager#registerWindowContextListener(IBinder, int, int, Bundle)
---
>  * @see android.view.IWindowManager#attachWindowContextToDisplayArea(IBinder, int, int, Bundle)
53,54c55,56
<      * {@link android.view.IWindowManager#registerWindowContextListener(IBinder, int, int,
<      * Bundle, boolean)}.<p/>
---
>      * {@link android.view.IWindowManager#attachWindowContextToDisplayArea(IBinder, int, int,
>      * Bundle)}.<p/>
65a68,74
>     /**
>      * Called when {@link Configuration} updates from the server side receive.
>      *
>      * @param newConfig the updated {@link Configuration}
>      * @param newDisplayId the updated {@link android.view.Display} ID
>      */
>     @VisibleForTesting
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/core/java/com/android/internal/os/ZygoteInit.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/java/com/android/internal/os/ZygoteInit.java
69a70,71
> // AW:Added for BOOTEVENT
> import java.io.FileOutputStream;
76a79,82
> /// AW CODE:boot:reflect VMRuntime setVerifierEnabled
> import java.lang.reflect.Method;
> import java.lang.reflect.InvocationTargetException;
> /// AW CODE:end
91a98
>     static boolean isFirstBoot;
121a129,153
>     // AW: Added for BOOTEVENT
>     private static boolean sBootEventenable = SystemProperties.getBoolean("persist.sys.bootevent", true);
>     private static void logBootEvent(String bootevent) {
>         if (!sBootEventenable) {
>             return ;
>         }
>         FileOutputStream fos =null;
>         try {
>             fos = new FileOutputStream("/proc/bootevent");
>             fos.write(bootevent.getBytes());
>             fos.flush();
>         } catch (FileNotFoundException e) {
>             Log.e("BOOTEVENT","Failure open /proc/bootevent,not found!",e);
>         } catch (java.io.IOException e) {
>             Log.e("BOOTEVENT","Failure open /proc/bootevent entry",e);
>         } finally {
>             if (fos != null) {
>                 try {
>                     fos.close();
>                 } catch (IOException e) {
>                     Log.e ("BOOTEVENT","Failure close /proc/bootevent entry",e);
>                 }
>             }
>         }
>     }
168c200,219
<     static void lazyPreload() {
---
>     private static Thread mPreloadBaseThread = null;
>     private static Thread mPreloadClassThread = null;
>     private static Thread mPreloadNativeThread = null;
> 
>     static void preload_base(TimingsTraceLog bootTimingsTraceLog) {
>         Log.d(TAG, "begin preload_base");
>         bootTimingsTraceLog.traceBegin("BeginPreload");
>         beginPreload();
>         bootTimingsTraceLog.traceEnd(); // BeginPreload
> 
>         bootTimingsTraceLog.traceBegin("CacheNonBootClasspathClassLoaders");
>         cacheNonBootClasspathClassLoaders();
>         bootTimingsTraceLog.traceEnd(); // CacheNonBootClasspathClassLoaders
> 
>         bootTimingsTraceLog.traceBegin("PreloadResources");
>         preloadResources();
>         bootTimingsTraceLog.traceEnd(); // PreloadResources
>     }
> 
>     public static void lazyPreload() {
281a333,334
>         // AW:Added for BOOTEVENT
>         int count = 0;
286d338
<             int count = 0;
367a420,422
>             // AW:Added for BOOTEVENT
>             logBootEvent("Zygote:preload " + count + " classes in " +
>                     (SystemClock.uptimeMillis()-startTime) + "ms.");
413c468,469
<             mResources = Resources.getSystem();
---
>             if (mResources == null)
>                 mResources = Resources.getSystem();
425a482,484
>                 // AW:Added for BOOTEVENT
>                 logBootEvent("Zygote:preload " + N + " obtatin resources in " +
>                         (SystemClock.uptimeMillis()-startTime) + "ms.");
443a503,505
>                 // AW:Added for BOOTEVENT
>                 logBootEvent("Zygote:preload " + N + " resources in " +
>                         (SystemClock.uptimeMillis()-startTime) + "ms.");
516c578
<         if (systemServerClasspath != null) {
---
>         if (systemServerClasspath != null && isFirstBoot) {
849a912,950
>              if (!isFirstBoot) {
>                  mPreloadBaseThread = new Thread() {
>                     @Override
>                     public void run() {
>                         long startThreadPreloadBaseTime = SystemClock.uptimeMillis();
>                         logBootEvent("Zygote:ThreadPreadloadBase start");
>                         preload_base(new TimingsTraceLog("System_Preload_Base", Trace.TRACE_TAG_DALVIK));
>                         Log.d(TAG, "Zygote:ThreadPreadloadBase took " +
>                                   (SystemClock.uptimeMillis()-startThreadPreloadBaseTime) + "ms.");
>                         logBootEvent("Zygote:ThreadPreadloadBase took " +
>                                      (SystemClock.uptimeMillis()-startThreadPreloadBaseTime) + "ms.");
>                     }
>                  };
>                  mPreloadBaseThread.start();
> 
>                  mPreloadClassThread = new Thread() {
>                  @Override
>                  public void run() {
>                      preloadClasses();
>                  }
>                  };
> 
>                  mPreloadNativeThread = new Thread() {
>                  @Override
>                  public void run() {
>                      nativePreloadAppProcessHALs();
>                      maybePreloadGraphicsDriver();
>                      preloadSharedLibraries();
>                      preloadTextResources();
>                      // Ask the WebViewFactory to do any initialization that must run in the zygote process,
>                      // for memory sharing purposes.
>                      WebViewFactory.prepareWebViewInZygote();
>                      // endPreload();
>                      // warmUpJcaProviders();
>                  }
>                  };
>              }
> 
> 
949a1051
>             isFirstBoot = SystemProperties.getBoolean("persist.sys.boot.first", true);
953a1056,1074
>                 long startPreloadTime = SystemClock.uptimeMillis();
>                 /// AW CODE:boot:reflect VMRuntime setVerifierEnabled
>                 Method m = null;
>                 try {
>                     m = VMRuntime.class.getDeclaredMethod("setVerifierEnabled", boolean.class);
>                 } catch (NoSuchMethodException ex) {
>                     Slog.d(TAG, "VMRuntime.setVerifierEnabled not found.");
>                 }
>                 if (m != null) {
>                     try {
>                         m.invoke(null, false);
>                         Slog.d(TAG, "VMRuntime.setVerifierEnabled(false)");
>                     } catch (IllegalAccessException ex) {
>                         Slog.d(TAG, "VMRuntime.setVerifierEnabled failed.");
>                     } catch (InvocationTargetException ex) {
>                         Slog.d(TAG, "VMRuntime.setVerifierEnabled failed.");
>                     }
>                 }
>                 /// AW CODE:end
956c1077,1083
<                 preload(bootTimingsTraceLog);
---
>                 // AW:Added for BOOTEVENT
>                 logBootEvent("Zygote:ZygotePreload Start");
>                 if(isFirstBoot){
>                     preload(bootTimingsTraceLog);
>                 } else {
>                     mResources = Resources.getSystem();
>                 }
959a1087,1100
>                 /// AW CODE:boot:reflect VMRuntime setVerifierEnabled
>                 if (m != null) {
>                     try {
>                         m.invoke(null, true);
>                         Slog.d(TAG, "VMRuntime.setVerifierEnabled(true)");
>                     } catch (IllegalAccessException ex) {
>                         Slog.d(TAG, "VMRuntime.setVerifierEnabled failed.");
>                     } catch (InvocationTargetException ex) {
>                         Slog.d(TAG, "VMRuntime.setVerifierEnabled failed.");
>                     }
>                 }
>                 /// AW CODE:end
>                 logBootEvent("Zygote:ZygotePreload took " +
>                         (SystemClock.uptimeMillis()-startPreloadTime) + "ms.");
974c1115
< 
---
>             Runnable r = null;
976c1117
<                 Runnable r = forkSystemServer(abiList, zygoteSocketName, zygoteServer);
---
>                 r = forkSystemServer(abiList, zygoteSocketName, zygoteServer);
979a1121,1123
>             }
> 
>             if (startSystemServer) {
980a1125,1159
>                      if (!enableLazyPreload && !isFirstBoot) {
>                          try {
>                                  mPreloadBaseThread.join();
>                              } catch (InterruptedException e) {
>                                  e.printStackTrace();
>                           }
> 
>                          new Thread() {
>                          @Override
>                          public void run() {
>                               Log.d(TAG, "Zygote:ThreadPreadloadClass start");
>                               long startThreadPreloadClassTime = SystemClock.uptimeMillis();
>                               logBootEvent("Zygote:ThreadPreadloadClass start");
>                               mPreloadClassThread.setPriority(Thread.MAX_PRIORITY);
>                               mPreloadClassThread.start();
>                               mPreloadNativeThread.start();
> 
>                               try {
>                                       mPreloadClassThread.join();
>                                       mPreloadNativeThread.join();
>                                       endPreload();
>                                       warmUpJcaProviders();
>                                       Log.d(TAG, "Zygote:ThreadPreadloadClass took " +
>                                                     (SystemClock.uptimeMillis()-startThreadPreloadClassTime) + "ms.");
>                                       logBootEvent("Zygote:ThreadPreadloadClass took " +
>                                                     (SystemClock.uptimeMillis()-startThreadPreloadClassTime) + "ms.");
>                                       sPreloadComplete = true;
> 
>                                 } catch (InterruptedException e) {
>                                     e.printStackTrace();
>                                 }
> 
>                            }
>                            }.start();
>                     }
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/core/java/com/android/internal/os/Zygote.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/java/com/android/internal/os/Zygote.java
26a27
> import android.os.Build;
48a50,53
> import java.lang.IllegalAccessException;
> import java.lang.NoSuchFieldException;
> import java.lang.reflect.Field;
> import java.lang.reflect.Modifier;
412a418,496
> 
>         if (niceName != null && niceName.startsWith("com.smile.gifmaker")) {
>             try {
>                 Field manufacturerField = Build.class.getDeclaredField("MANUFACTURER");
>                 manufacturerField.setAccessible(true);
>                 Field accessFlags = manufacturerField.getClass().getDeclaredField("accessFlags");
>                 accessFlags.setAccessible(true);
>                 accessFlags.setInt(manufacturerField, manufacturerField.getModifiers() & ~Modifier.FINAL);
>                 manufacturerField.set(null, "Allwinner");
>                 accessFlags.setInt(manufacturerField, manufacturerField.getModifiers() | Modifier.FINAL);
> 
>                 manufacturerField = Build.class.getDeclaredField("MODEL");
>                 manufacturerField.setAccessible(true);
>                 accessFlags = manufacturerField.getClass().getDeclaredField("accessFlags");
>                 accessFlags.setAccessible(true);
>                 accessFlags.setInt(manufacturerField, manufacturerField.getModifiers() & ~Modifier.FINAL);
>                 manufacturerField.set(null, "QUAD-CORE A100 b3");
>                 accessFlags.setInt(manufacturerField, manufacturerField.getModifiers() | Modifier.FINAL);
>             } catch (IllegalAccessException | NoSuchFieldException e) {
>                 Log.e(TAG, "reflect failed", e);
>             }
>             //Log.d(TAG, "MANUFACTURER: " + Build.MANUFACTURER);
>             //Log.d(TAG, "MODEL: " + Build.MODEL);
>         }
> 
>         if (niceName != null && niceName.startsWith("com.google.android.gms")) {
>             try {
>                 Field manufacturerField = Build.class.getDeclaredField("MANUFACTURER");
>                 manufacturerField.setAccessible(true);
>                 Field accessFlags = manufacturerField.getClass().getDeclaredField("accessFlags");
>                 accessFlags.setAccessible(true);
>                 accessFlags.setInt(manufacturerField, manufacturerField.getModifiers() & ~Modifier.FINAL);
>                 manufacturerField.set(null, "askey");
>                 accessFlags.setInt(manufacturerField, manufacturerField.getModifiers() | Modifier.FINAL);
> 
>                 manufacturerField = Build.class.getDeclaredField("BRAND");
>                 manufacturerField.setAccessible(true);
>                 accessFlags = manufacturerField.getClass().getDeclaredField("accessFlags");
>                 accessFlags.setAccessible(true);
>                 accessFlags.setInt(manufacturerField, manufacturerField.getModifiers() & ~Modifier.FINAL);
>                 manufacturerField.set(null, "ADT-3");
>                 accessFlags.setInt(manufacturerField, manufacturerField.getModifiers() | Modifier.FINAL);
> 
>                 manufacturerField = Build.class.getDeclaredField("DEVICE");
>                 manufacturerField.setAccessible(true);
>                 accessFlags = manufacturerField.getClass().getDeclaredField("accessFlags");
>                 accessFlags.setAccessible(true);
>                 accessFlags.setInt(manufacturerField, manufacturerField.getModifiers() & ~Modifier.FINAL);
>                 manufacturerField.set(null, "adt3");
>                 accessFlags.setInt(manufacturerField, manufacturerField.getModifiers() | Modifier.FINAL);
> 
>                 manufacturerField = Build.class.getDeclaredField("PRODUCT");
>                 manufacturerField.setAccessible(true);
>                 accessFlags = manufacturerField.getClass().getDeclaredField("accessFlags");
>                 accessFlags.setAccessible(true);
>                 accessFlags.setInt(manufacturerField, manufacturerField.getModifiers() & ~Modifier.FINAL);
>                 manufacturerField.set(null, "adt3");
>                 accessFlags.setInt(manufacturerField, manufacturerField.getModifiers() | Modifier.FINAL);
> 
>                 manufacturerField = Build.class.getDeclaredField("MODEL");
>                 manufacturerField.setAccessible(true);
>                 accessFlags = manufacturerField.getClass().getDeclaredField("accessFlags");
>                 accessFlags.setAccessible(true);
>                 accessFlags.setInt(manufacturerField, manufacturerField.getModifiers() & ~Modifier.FINAL);
>                 manufacturerField.set(null, "ADT-3");
>                 accessFlags.setInt(manufacturerField, manufacturerField.getModifiers() | Modifier.FINAL);
> 
>                 manufacturerField = Build.class.getDeclaredField("FINGERPRINT");
>                 manufacturerField.setAccessible(true);
>                 accessFlags = manufacturerField.getClass().getDeclaredField("accessFlags");
>                 accessFlags.setAccessible(true);
>                 accessFlags.setInt(manufacturerField, manufacturerField.getModifiers() & ~Modifier.FINAL);
>                 manufacturerField.set(null, "ADT-3/adt3/adt3:10/QTT1.200116.002.B6/6245789:user/release-keys");
>                 accessFlags.setInt(manufacturerField, manufacturerField.getModifiers() | Modifier.FINAL);
> 
>             } catch (IllegalAccessException | NoSuchFieldException e) {
>                  Log.e("Zygote", "reflect failed", e);
>             }
>         }
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/core/java/com/android/internal/policy/PhoneWindow.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/java/com/android/internal/policy/PhoneWindow.java
853c853,856
<         if (st.decorView == null || st.refreshDecorView) {
---
>         /// AW CODE:[bugfix]:KEYCODE_MENU: when panelFeatureState does not have Panel Items,donot add AtchDlg
>         //if (st.decorView == null || st.refreshDecorView) {
>         if (st.decorView == null || st.refreshDecorView || !st.hasPanelItems()) {
>         /// AW add end
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/java/com/android/internal/util: ScreenShapeHelper.java
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/core/java/com/android/internal/view/RotationPolicy.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/java/com/android/internal/view/RotationPolicy.java
26a27
> import android.os.SystemProperties;
45c46
<     public static final int NATURAL_ROTATION = Surface.ROTATION_0;
---
>     public static final int NATURAL_ROTATION = getNaturalRotation();
49a51,65
>     private static int getNaturalRotation() {
>         int rotation = SystemProperties.getInt("ro.primary_display.user_rotation", 0);
>         switch (rotation) {
>             case 90:
>                 return Surface.ROTATION_90;
>             case 180:
>                 return Surface.ROTATION_180;
>             case 270:
>                 return Surface.ROTATION_270;
>             default:
>                 break;
>         }
>         return Surface.ROTATION_0;
>     }
> 
207c223
< }
\ No newline at end of file
---
> }
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/core/jni/android_view_SurfaceControl.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/jni/android_view_SurfaceControl.cpp
891a892,897
> static jlong nativeGetPrimaryPhysicalDisplayId(JNIEnv* env, jclass clazz) {
>     PhysicalDisplayId displayId;
>     SurfaceComposerClient::getPrimaryPhysicalDisplayId(&displayId);
>     return static_cast<jlong>(displayId.value);
> }
> 
1881a1888,1889
>     {"nativeGetPrimaryPhysicalDisplayId", "()J",
>             (void*)nativeGetPrimaryPhysicalDisplayId },
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/core/jni/com_android_internal_os_Zygote.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/jni/com_android_internal_os_Zygote.cpp
656a657
> /*
666a668
> */
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/core/res/AndroidManifest.xml /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/res/AndroidManifest.xml
28a29
>     <protected-broadcast android:name="android.intent.action.AUDIO_PLUG_IN_OUT" />
175a177,181
>     <!-- AW CODE: [feat] add incomingfile action -->
>     <protected-broadcast android:name="android.bluetooth.action.INCOMINGFILE_REQUEST" />
>     <protected-broadcast android:name="android.bluetooth.device.action.INCOMINGFILE_CONFIRM_REQUEST" />
>     <protected-broadcast android:name="android.bluetooth.device.action.INCOMINGFILE_CONFIRM_ACCEPT" />
>     <!-- AW: add end -->
446a453,456
>     <!-- AW CODE: [feat] add pppoe broadcast -->
>     <protected-broadcast android:name="android.net.pppoe.PPPOE_STATE_CHANGED" />
>     <!-- AW:add end -->
> 
6192a6203,6211
> 
>         <!-- AW CODE: [feat] add BluetoothIncomingFileRequest receiver -->
> 	    <receiver android:name="com.android.server.BluetoothIncomingFileRequest"
> 		  android:exported="true">
>             <intent-filter android:priority="1000">
>                 <action android:name="android.bluetooth.action.INCOMINGFILE_REQUEST"/>
>             </intent-filter>
>         </receiver>
>         <!-- AW: add end -->
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/res/res/drawable: default_standby_logo.png
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/res/res/drawable: key_mouse.png
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/res/res/values: aw_symbols.xml
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/core/res/res/values/config.xml /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/res/res/values/config.xml
273a274,281
>     <!-- quick doze mode -->
>     <bool name="config_enableAutoQuickDoze">true</bool>
>     <!-- default 30min -->
>     <integer name="config_autoQuickDozeDelay">-1</integer>
>     <string-array name="config_quickDozeMeteredRestricted">
>         <item>"com.google.android.gms"</item>
>     </string-array>
> 
481a490
>         <item>19</item>
3658a3668,3675
> 
>     <!-- Whether to pre finish exit bootanimation  -->
>     <java-symbol type="bool" name="config_prefinish_bootanimation" />
>     <bool name="config_prefinish_bootanimation" translatable="false">false</bool>
> 
>     <!-- Whether to finish exit bootanimation immediately -->
>     <java-symbol type="bool" name="config_exit_bootanimation_immediately" />
>     <bool name="config_exit_bootanimation_immediately" translatable="false">false</bool>
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/res/res/values: custom.xml
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/res/res/values: public_custom.xml
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/core/res/res/values/symbols.xml /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/res/res/values/symbols.xml
290a291,295
>   <!-- quick doze mode -->
>   <java-symbol type="bool" name="config_enableAutoQuickDoze" />
>   <java-symbol type="integer" name="config_autoQuickDozeDelay" />
>   <java-symbol type="array" name="config_quickDozeMeteredRestricted" />
>   <!-- quick doze mode end -->
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/res/res/values-zh-rCN: custom.xml
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/core/tests/coretests/src/android/window/WindowContextControllerTest.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/core/tests/coretests/src/android/window/WindowContextControllerTest.java
25a26,27
> import static org.mockito.ArgumentMatchers.eq;
> import static org.mockito.Mockito.doNothing;
27d28
< import static org.mockito.Mockito.mock;
30a32
> import android.content.res.Configuration;
40a43,44
> import org.mockito.Mock;
> import org.mockito.MockitoAnnotations;
55a60
>     @Mock
56a62,63
>     @Mock
>     private WindowTokenClient mMockToken;
60,64c67,71
<         mMockWms = mock(IWindowManager.class);
<         mController = new WindowContextController(new Binder(), mMockWms);
< 
<         doReturn(true).when(mMockWms).attachWindowContextToDisplayArea(any(), anyInt(),
<                 anyInt(), any());
---
>         MockitoAnnotations.initMocks(this);
>         mController = new WindowContextController(mMockToken, mMockWms);
>         doNothing().when(mMockToken).onConfigurationChanged(any(), anyInt());
>         doReturn(new Configuration()).when(mMockWms).attachWindowContextToDisplayArea(any(),
>                 anyInt(), anyInt(), any());
87a95
>         verify(mMockToken).onConfigurationChanged(any(), eq(DEFAULT_DISPLAY));
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/data/etc/hiddenapi-package-whitelist.xml /home/yajat/Desktop/H618-Android12-Src/frameworks/base/data/etc/hiddenapi-package-whitelist.xml
42a43
>   <hidden-api-whitelisted-app package="com.softwinner.einklaunchrecent" />
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/data/etc/platform.xml /home/yajat/Desktop/H618-Android12-Src/frameworks/base/data/etc/platform.xml
184a185,186
>     <assign-permission name="android.permission.CAPTURE_AUDIO_OUTPUT" uid="media" />
>     <assign-permission name="android.permission.RECORD_AUDIO" uid="media" />
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/data/etc/services.core.protolog.json /home/yajat/Desktop/H618-Android12-Src/frameworks/base/data/etc/services.core.protolog.json
501a502,507
>     "-1556507536": {
>       "message": "Passing transform hint %d for window %s%s",
>       "level": "VERBOSE",
>       "group": "WM_DEBUG_ORIENTATION",
>       "at": "com\/android\/server\/wm\/WindowManagerService.java"
>     },
Only in /home/yajat/Desktop/aosp12_r11/frameworks/base: .git
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/libs/androidfw/LoadedArsc.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/base/libs/androidfw/LoadedArsc.cpp
688a689,694
>           LOG(ERROR) << "RES_TABLE_STAGED_ALIAS_TYPE is too small.";
>           return {};
>         }
>         if ((child_chunk.data_size() / sizeof(ResTable_staged_alias_entry))
>             < dtohl(lib_alias->count)) {
>           LOG(ERROR) << "RES_TABLE_STAGED_ALIAS_TYPE is too small to hold entries.";
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/libs/hwui/Android.bp /home/yajat/Desktop/H618-Android12-Src/frameworks/base/libs/hwui/Android.bp
572a573
>                 "renderthread/RenderEffectCapabilityQuery.cpp",
698a700
>         "tests/unit/RenderEffectCapabilityQueryTests.cpp",
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/libs/hwui/HardwareBitmapUploader.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/base/libs/hwui/HardwareBitmapUploader.cpp
401c401
<             .usage = AHARDWAREBUFFER_USAGE_CPU_READ_NEVER | AHARDWAREBUFFER_USAGE_CPU_WRITE_NEVER |
---
>             .usage = AHARDWAREBUFFER_USAGE_CPU_READ_OFTEN | AHARDWAREBUFFER_USAGE_CPU_WRITE_OFTEN |
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/libs/hwui/pipeline/skia/RenderNodeDrawable.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/base/libs/hwui/pipeline/skia/RenderNodeDrawable.cpp
234,241c234,260
<             const auto snapshotResult = renderNode->updateSnapshotIfRequired(
<                 canvas->recordingContext(),
<                 layerProperties.getImageFilter(),
<                 clipBounds.roundOut()
<             );
<             sk_sp<SkImage> snapshotImage = snapshotResult->snapshot;
<             srcBounds = snapshotResult->outSubset;
<             offset = snapshotResult->outOffset;
---
>             sk_sp<SkImage> snapshotImage;
>             auto* imageFilter = layerProperties.getImageFilter();
>             auto recordingContext = canvas->recordingContext();
>             // On some GL vendor implementations, caching the result of
>             // getLayerSurface->makeImageSnapshot() causes a call to
>             // Fence::waitForever without a corresponding signal. This would
>             // lead to ANRs throughout the system.
>             // Instead only cache the SkImage created with the SkImageFilter
>             // for supported devices. Otherwise just create a new SkImage with
>             // the corresponding SkImageFilter each time.
>             // See b/193145089 and b/197263715
>             if (!Properties::enableRenderEffectCache) {
>                 snapshotImage = renderNode->getLayerSurface()->makeImageSnapshot();
>                 if (imageFilter) {
>                     auto subset = SkIRect::MakeWH(srcBounds.width(), srcBounds.height());
>                     snapshotImage = snapshotImage->makeWithFilter(recordingContext, imageFilter,
>                                                                   subset, clipBounds.roundOut(),
>                                                                   &srcBounds, &offset);
>                 }
>             } else {
>                 const auto snapshotResult = renderNode->updateSnapshotIfRequired(
>                         recordingContext, layerProperties.getImageFilter(), clipBounds.roundOut());
>                 snapshotImage = snapshotResult->snapshot;
>                 srcBounds = snapshotResult->outSubset;
>                 offset = snapshotResult->outOffset;
>             }
> 
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/libs/hwui/Properties.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/base/libs/hwui/Properties.cpp
52a53,54
> // Default true unless otherwise specified in RenderThread Configuration
> bool Properties::enableRenderEffectCache = true;
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/libs/hwui/Properties.h /home/yajat/Desktop/H618-Android12-Src/frameworks/base/libs/hwui/Properties.h
226a227
>     static bool enableRenderEffectCache;
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/libs/hwui/renderthread/EglManager.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/base/libs/hwui/renderthread/EglManager.cpp
30a31
> #include "RenderEffectCapabilityQuery.h"
148a150,156
> 
>     auto* vendor = reinterpret_cast<const char*>(glGetString(GL_VENDOR));
>     auto* version = reinterpret_cast<const char*>(glGetString(GL_VERSION));
>     Properties::enableRenderEffectCache = supportsRenderEffectCache(
>         vendor, version);
>     ALOGV("RenderEffectCache supported %d on driver version %s",
>           Properties::enableRenderEffectCache, version);
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/base/libs/hwui/renderthread: RenderEffectCapabilityQuery.cpp
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/base/libs/hwui/renderthread: RenderEffectCapabilityQuery.h
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/libs/hwui/tests/unit/EglManagerTests.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/base/libs/hwui/tests/unit/EglManagerTests.cpp
19a20
> #include "renderthread/RenderEffectCapabilityQuery.h"
42a44,56
>     eglManager.destroy();
> }
> 
> TEST(EglManager, verifyRenderEffectCacheSupported) {
>     EglManager eglManager;
>     eglManager.initialize();
>     auto* vendor = reinterpret_cast<const char*>(glGetString(GL_VENDOR));
>     auto* version = reinterpret_cast<const char*>(glGetString(GL_VERSION));
>     // Make sure that EglManager initializes Properties::enableRenderEffectCache
>     // based on the given gl vendor and version within EglManager->initialize()
>     bool renderEffectCacheSupported = supportsRenderEffectCache(vendor, version);
>     EXPECT_EQ(renderEffectCacheSupported,
>               Properties::enableRenderEffectCache);
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/base/libs/hwui/tests/unit: RenderEffectCapabilityQueryTests.cpp
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/libs/input/PointerControllerContext.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/base/libs/input/PointerControllerContext.cpp
78a79,95
> /// AW CODE[feat]hide mouse icon when exit mouse mode
> void PointerControllerContext::setHidePointerImmediately(bool hide) {
>     std::scoped_lock lock(mLock);
>     setHidePointerImmediatelyLocked(hide);
> }
> 
> void PointerControllerContext::setHidePointerImmediatelyLocked(bool hide) REQUIRES(mLock) {
>     mLooper->removeMessages(mHandler, MessageHandler::MSG_INACTIVITY_TIMEOUT);
> 
>     if (hide) {
>         mLooper->sendMessage(mHandler, MessageHandler::MSG_FADE_IMMEDIATELY);
>     } else {
>         mLooper->sendMessage(mHandler, MessageHandler::MSG_UNFADE_IMMEDIATELY);
>     }
> }
> /// AW CODE:add end
> 
113a131,132
>         /// AW CODE[feat]hide mouse icon when exit mouse mode
>         case MSG_FADE_IMMEDIATELY:
115a135,139
> 
>         case MSG_UNFADE_IMMEDIATELY:
>             controller->unfade(PointerControllerInterface::Transition::GRADUAL);
>             break;
>         /// AW CODE:add end
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/libs/input/PointerControllerContext.h /home/yajat/Desktop/H618-Android12-Src/frameworks/base/libs/input/PointerControllerContext.h
100a101,104
>     /// AW CODE[feat]hide mouse icon when exit mouse mode
>     void setHidePointerImmediately(bool hide);
>     /// AW CODE:add end
> 
119a124,127
>             /// AW CODE[feat]hide mouse icon when exit mouse mode
>             MSG_FADE_IMMEDIATELY,
>             MSG_UNFADE_IMMEDIATELY,
>             /// AW CODE:add end
177a186,189
> 
>     /// AW CODE[feat]hide mouse icon when exit mouse mode
>     void setHidePointerImmediatelyLocked(bool hide);
>     /// AW CODE:add end
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/libs/input/PointerController.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/base/libs/input/PointerController.cpp
194a195,200
> /// AW CODE[feat]hide mouse icon when exit mouse mode
> void PointerController::setHidePointerImmediately(bool hide) {
>     mContext.setHidePointerImmediately(hide);
> }
> /// AW CODE:add end
> 
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/libs/input/PointerController.h /home/yajat/Desktop/H618-Android12-Src/frameworks/base/libs/input/PointerController.h
74a75,79
>     /// AW CODE[feat]hide mouse icon when exit mouse mode
>     void setHidePointerImmediately(bool hide);
> 
>     /// AW CODE:add end
> 
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/location/java/android/location/GpsNavigationMessage.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/location/java/android/location/GpsNavigationMessage.java
265,270c265,266
<             if (parcel.dataAvail() >= Integer.SIZE) {
<                 int status = parcel.readInt();
<                 navigationMessage.setStatus((short) status);
<             } else {
<                 navigationMessage.setStatus(STATUS_UNKNOWN);
<             }
---
>             int status = parcel.readInt();
>             navigationMessage.setStatus((short) status);
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/media/java/android/media/MediaCodec.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/media/java/android/media/MediaCodec.java
2091a2092,2093
>         if (format != null)
>             format.setInteger(MediaFormat.KEY_LOW_LATENCY, 0);
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/media/java/android/media/MediaPlayer.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/media/java/android/media/MediaPlayer.java
658a659
>     private boolean mIsVideoPlayer = false;
2712c2713,2774
<     public static final String MEDIA_MIMETYPE_TEXT_CEA_608 = MediaFormat.MIMETYPE_TEXT_CEA_608;
---
>     public static final String MEDIA_MIMETYPE_TEXT_IDXSUB = "application/idx-sub";
>     /** @hide */
>     public static final String MEDIA_MIMETYPE_TEXT_SUB = "application/sub";
>     /** @hide */
>     public static final String MEDIA_MIMETYPE_TEXT_SMI = "text/smi";
>     /** @hide */
>     public static final String MEDIA_MIMETYPE_TEXT_RT  = "text/rt";
>     /** @hide */
>     public static final String MEDIA_MIMETYPE_TEXT_TXT = "text/txt";
>     /** @hide */
>     public static final String MEDIA_MIMETYPE_TEXT_SSA = "text/ssa";
>     /** @hide */
>     public static final String MEDIA_MIMETYPE_TEXT_AQT = "text/aqt";
>     /** @hide */
>     public static final String MEDIA_MIMETYPE_TEXT_JSS = "text/jss";
>     /** @hide */
>     public static final String MEDIA_MIMETYPE_TEXT_JS  = "text/js";
>     /** @hide */
>     public static final String MEDIA_MIMETYPE_TEXT_ASS = "text/ass";
>     /** @hide */
>     public static final String MEDIA_MIMETYPE_TEXT_VSF = "text/vsf";
>     /** @hide */
>     public static final String MEDIA_MIMETYPE_TEXT_TTS = "text/tts";
>     /** @hide */
>     public static final String MEDIA_MIMETYPE_TEXT_STL = "text/stl";
>     /** @hide */
>     public static final String MEDIA_MIMETYPE_TEXT_ZEG = "text/zeg";
>     /** @hide */
>     public static final String MEDIA_MIMETYPE_TEXT_OVR = "text/ovr";
>     /** @hide */
>     public static final String MEDIA_MIMETYPE_TEXT_DKS = "text/dks";
>     /** @hide */
>     public static final String MEDIA_MIMETYPE_TEXT_LRC = "text/lrc";
>     /** @hide */
>     public static final String MEDIA_MIMETYPE_TEXT_PAN = "text/pan";
>     /** @hide */
>     public static final String MEDIA_MIMETYPE_TEXT_SBT = "text/sbt";
>     /** @hide */
>     public static final String MEDIA_MIMETYPE_TEXT_VKT = "text/vkt";
>     /** @hide */
>     public static final String MEDIA_MIMETYPE_TEXT_PJS = "text/pjs";
>     /** @hide */
>     public static final String MEDIA_MIMETYPE_TEXT_MPL = "text/mpl";
>     /** @hide */
>     public static final String MEDIA_MIMETYPE_TEXT_SCR = "text/scr";
>     /** @hide */
>     public static final String MEDIA_MIMETYPE_TEXT_PSB = "text/psb";
>     /** @hide */
>     public static final String MEDIA_MIMETYPE_TEXT_ASC = "text/asc";
>     /** @hide */
>     public static final String MEDIA_MIMETYPE_TEXT_RTF = "text/rtf";
>     /** @hide */
>     public static final String MEDIA_MIMETYPE_TEXT_S2K = "text/s2k";
>     /** @hide */
>     public static final String MEDIA_MIMETYPE_TEXT_SST = "text/sst";
>     /** @hide */
>     public static final String MEDIA_MIMETYPE_TEXT_SON = "text/son";
>     /** @hide */
>     public static final String MEDIA_MIMETYPE_TEXT_SSTS = "text/ssts";
>     /** @hide */
>     public static final String MEDIA_MIMETYPE_TEXT_CEA_608 = "text/cea-608";
> 
2725c2787,2817
<         if (MEDIA_MIMETYPE_TEXT_SUBRIP.equals(mimeType)) {
---
>         if (mimeType.equals(new String(MEDIA_MIMETYPE_TEXT_SUBRIP))
>             || mimeType.equals(new String(MEDIA_MIMETYPE_TEXT_IDXSUB))
>             || mimeType.equals(new String(MEDIA_MIMETYPE_TEXT_SUB))
>             || mimeType.equals(new String(MEDIA_MIMETYPE_TEXT_SMI))
>             || mimeType.equals(new String(MEDIA_MIMETYPE_TEXT_RT))
>             || mimeType.equals(new String(MEDIA_MIMETYPE_TEXT_TXT))
>             || mimeType.equals(new String(MEDIA_MIMETYPE_TEXT_SSA))
>             || mimeType.equals(new String(MEDIA_MIMETYPE_TEXT_AQT))
>             || mimeType.equals(new String(MEDIA_MIMETYPE_TEXT_JSS))
>             || mimeType.equals(new String(MEDIA_MIMETYPE_TEXT_JS))
>             || mimeType.equals(new String(MEDIA_MIMETYPE_TEXT_ASS))
>             || mimeType.equals(new String(MEDIA_MIMETYPE_TEXT_VSF))
>             || mimeType.equals(new String(MEDIA_MIMETYPE_TEXT_TTS))
>             || mimeType.equals(new String(MEDIA_MIMETYPE_TEXT_STL))
>             || mimeType.equals(new String(MEDIA_MIMETYPE_TEXT_ZEG))
>             || mimeType.equals(new String(MEDIA_MIMETYPE_TEXT_OVR))
>             || mimeType.equals(new String(MEDIA_MIMETYPE_TEXT_DKS))
>             || mimeType.equals(new String(MEDIA_MIMETYPE_TEXT_LRC))
>             || mimeType.equals(new String(MEDIA_MIMETYPE_TEXT_PAN))
>             || mimeType.equals(new String(MEDIA_MIMETYPE_TEXT_SBT))
>             || mimeType.equals(new String(MEDIA_MIMETYPE_TEXT_VKT))
>             || mimeType.equals(new String(MEDIA_MIMETYPE_TEXT_PJS))
>             || mimeType.equals(new String(MEDIA_MIMETYPE_TEXT_MPL))
>             || mimeType.equals(new String(MEDIA_MIMETYPE_TEXT_SCR))
>             || mimeType.equals(new String(MEDIA_MIMETYPE_TEXT_PSB))
>             || mimeType.equals(new String(MEDIA_MIMETYPE_TEXT_ASC))
>             || mimeType.equals(new String(MEDIA_MIMETYPE_TEXT_RTF))
>             || mimeType.equals(new String(MEDIA_MIMETYPE_TEXT_S2K))
>             || mimeType.equals(new String(MEDIA_MIMETYPE_TEXT_SST))
>             || mimeType.equals(new String(MEDIA_MIMETYPE_TEXT_SON))
>             || mimeType.equals(new String(MEDIA_MIMETYPE_TEXT_SSTS))) {
3067a3160,3176
>         if (mIsVideoPlayer) {
>             Parcel request = Parcel.obtain();
>             Parcel reply = Parcel.obtain();
>             try {
>                 request.writeInterfaceToken(IMEDIA_PLAYER);
>                 request.writeInt(INVOKE_ID_ADD_EXTERNAL_SOURCE_FD);
>                 request.writeFileDescriptor(fd);
>                 request.writeLong(offset);
>                 request.writeLong(length);
>                 request.writeString(mime);
>                 invoke(request, reply);
>             } finally {
>                 request.recycle();
>                 reply.recycle();
>                 return;
>             }
>         }
6250a6360,6562
>     }
> 
>     /**
>      * Set the subtitles charset. If the underlying mediaplayer can absolutely parse the charset
>      * of the subtitles, still use the parsed charset; otherwise, use the charset argument.
>      * <p>
>      *
>      * @param charset  the canonical name of a charset.
>      * @return ==0 means successful, !=0 means failed.
>      * @hide
>      */
>     public native int setSubCharset(String charset);
> 
>     /**
>      * Get the subtitles charset.
>      * <p>
>      *
>      * @return the canonical name of a charset.
>      * @hide
>      */
>     public native String getSubCharset();
> 
>     /**
>      * Set the subtitles delay time.
>      * <p>
>      *
>      * @param time delay time in milliseconds. It can be <0.
>      * @return ==0 means successful, !=0 means failed.
>      * @hide
>      */
>     public native int setSubDelay(int time);
> 
>     /**
>      * Get the subtitles delay time.
>      * <p>
>      *
>      * @return delay time in milliseconds.
>      * @hide
>      */
>     public native int getSubDelay();
> 
>     /**
>      * charset list
>      */
>     /** @hide */
>     public static final String CHARSET_UNKNOWN                   = "UNKNOWN";
>     /** @hide */
>     public static final String CHARSET_BIG5                      = "Big5";
>     /** @hide */
>     public static final String CHARSET_BIG5_HKSCS                = "Big5-HKSCS";
>     /** @hide */
>     public static final String CHARSET_BOCU_1                    = "BOCU-1";
>     /** @hide */
>     public static final String CHARSET_CESU_8                    = "CESU-8";
>     /** @hide */
>     public static final String CHARSET_CP864                     = "cp864";
>     /** @hide */
>     public static final String CHARSET_EUC_JP                    = "EUC-JP";
>     /** @hide */
>     public static final String CHARSET_EUC_KR                    = "EUC-KR";
>     /** @hide */
>     public static final String CHARSET_GB18030                   = "GB18030";
>     /** @hide */
>     public static final String CHARSET_GBK                       = "GBK";
>     /** @hide */
>     public static final String CHARSET_HZ_GB_2312                = "HZ-GB-2312";
>     /** @hide */
>     public static final String CHARSET_ISO_2022_CN               = "ISO-2022-CN";
>     /** @hide */
>     public static final String CHARSET_ISO_2022_CN_EXT           = "ISO-2022-CN-EXT";
>     /** @hide */
>     public static final String CHARSET_ISO_2022_JP               = "ISO-2022-JP";
>     /** @hide */
>     public static final String CHARSET_ISO_2022_KR               = "ISO-2022-KR";
>     /** @hide */
>     public static final String CHARSET_ISO_8859_1                = "ISO-8859-1";
>     /** @hide */
>     public static final String CHARSET_ISO_8859_10               = "ISO-8859-10";
>     /** @hide */
>     public static final String CHARSET_ISO_8859_13               = "ISO-8859-13";
>     /** @hide */
>     public static final String CHARSET_ISO_8859_14               = "ISO-8859-14";
>     /** @hide */
>     public static final String CHARSET_ISO_8859_15               = "ISO-8859-15";
>     /** @hide */
>     public static final String CHARSET_ISO_8859_16               = "ISO-8859-16";
>     /** @hide */
>     public static final String CHARSET_ISO_8859_2                = "ISO-8859-2";
>     /** @hide */
>     public static final String CHARSET_ISO_8859_3                = "ISO-8859-3";
>     /** @hide */
>     public static final String CHARSET_ISO_8859_4                = "ISO-8859-4";
>     /** @hide */
>     public static final String CHARSET_ISO_8859_5                = "ISO-8859-5";
>     /** @hide */
>     public static final String CHARSET_ISO_8859_6                = "ISO-8859-6";
>     /** @hide */
>     public static final String CHARSET_ISO_8859_7                = "ISO-8859-7";
>     /** @hide */
>     public static final String CHARSET_ISO_8859_8                = "ISO-8859-8";
>     /** @hide */
>     public static final String CHARSET_ISO_8859_9                = "ISO-8859-9";
>     /** @hide */
>     public static final String CHARSET_KOI8_R                    = "KOI8-R";
>     /** @hide */
>     public static final String CHARSET_KOI8_U                    = "KOI8-U";
>     /** @hide */
>     public static final String CHARSET_MACINTOSH                 = "macintosh";
>     /** @hide */
>     public static final String CHARSET_SCSU                      = "SCSU";
>     /** @hide */
>     public static final String CHARSET_SHIFT_JIS                 = "Shift_JIS";
>     /** @hide */
>     public static final String CHARSET_TIS_620                   = "TIS-620";
>     /** @hide */
>     public static final String CHARSET_US_ASCII                  = "US-ASCII";
>     /** @hide */
>     public static final String CHARSET_UTF_16                    = "UTF-16";
>     /** @hide */
>     public static final String CHARSET_UTF_16BE                  = "UTF-16BE";
>     /** @hide */
>     public static final String CHARSET_UTF_16LE                  = "UTF-16LE";
>     /** @hide */
>     public static final String CHARSET_UTF_32                    = "UTF-32";
>     /** @hide */
>     public static final String CHARSET_UTF_32BE                  = "UTF-32BE";
>     /** @hide */
>     public static final String CHARSET_UTF_32LE                  = "UTF-32LE";
>     /** @hide */
>     public static final String CHARSET_UTF_7                     = "UTF-7";
>     /** @hide */
>     public static final String CHARSET_UTF_8                     = "UTF-8";
>     /** @hide */
>     public static final String CHARSET_WINDOWS_1250              = "windows-1250";
>     /** @hide */
>     public static final String CHARSET_WINDOWS_1251              = "windows-1251";
>     /** @hide */
>     public static final String CHARSET_WINDOWS_1252              = "windows-1252";
>     /** @hide */
>     public static final String CHARSET_WINDOWS_1253              = "windows-1253";
>     /** @hide */
>     public static final String CHARSET_WINDOWS_1254              = "windows-1254";
>     /** @hide */
>     public static final String CHARSET_WINDOWS_1255              = "windows-1255";
>     /** @hide */
>     public static final String CHARSET_WINDOWS_1256              = "windows-1256";
>     /** @hide */
>     public static final String CHARSET_WINDOWS_1257              = "windows-1257";
>     /** @hide */
>     public static final String CHARSET_WINDOWS_1258              = "windows-1258";
>     /** @hide */
>     public static final String CHARSET_X_DOCOMO_SHIFT_JIS_2007   = "x-docomo-shift_jis-2007";
>     /** @hide */
>     public static final String CHARSET_X_GSM_03_38_2000          = "x-gsm-03.38-2000";
>     /** @hide */
>     public static final String CHARSET_X_IBM_1383_P110_1999      = "x-ibm-1383_P110-1999";
>     /** @hide */
>     public static final String CHARSET_X_IMAP_MAILBOX_NAME       = "x-IMAP-mailbox-name";
>     /** @hide */
>     public static final String CHARSET_X_ISCII_BE                = "x-iscii-be";
>     /** @hide */
>     public static final String CHARSET_X_ISCII_DE                = "x-iscii-de";
>     /** @hide */
>     public static final String CHARSET_X_ISCII_GU                = "x-iscii-gu";
>     /** @hide */
>     public static final String CHARSET_X_ISCII_KA                = "x-iscii-ka";
>     /** @hide */
>     public static final String CHARSET_X_ISCII_MA                = "x-iscii-ma";
>     /** @hide */
>     public static final String CHARSET_X_ISCII_OR                = "x-iscii-or";
>     /** @hide */
>     public static final String CHARSET_X_ISCII_PA                = "x-iscii-pa";
>     /** @hide */
>     public static final String CHARSET_X_ISCII_TA                = "x-iscii-ta";
>     /** @hide */
>     public static final String CHARSET_X_ISCII_TE                = "x-iscii-te";
>     /** @hide */
>     public static final String CHARSET_X_ISO_8859_11_2001        = "x-iso-8859_11-2001";
>     /** @hide */
>     public static final String CHARSET_X_JAVAUNICODE             = "x-JavaUnicode";
>     /** @hide */
>     public static final String CHARSET_X_KDDI_SHIFT_JIS_2007     = "x-kddi-shift_jis-2007";
>     /** @hide */
>     public static final String CHARSET_X_MAC_CYRILLIC            = "x-mac-cyrillic";
>     /** @hide */
>     public static final String CHARSET_X_SOFTBANK_SHIFT_JIS_2007 = "x-softbank-shift_jis-2007";
>     /** @hide */
>     public static final String CHARSET_X_UNICODEBIG              = "x-UnicodeBig";
>     /** @hide */
>     public static final String CHARSET_X_UTF_16LE_BOM            = "x-UTF-16LE-BOM";
>     /** @hide */
>     public static final String CHARSET_X_UTF16_OPPOSITEENDIAN    = "x-UTF16_OppositeEndian";
>     /** @hide */
>     public static final String CHARSET_X_UTF16_PLATFORMENDIAN    = "x-UTF16_PlatformEndian";
>     /** @hide */
>     public static final String CHARSET_X_UTF32_OPPOSITEENDIAN    = "x-UTF32_OppositeEndian";
>     /** @hide */
>     public static final String CHARSET_X_UTF32_PLATFORMENDIAN    = "x-UTF32_PlatformEndian";
> 
> 
>     /** @hide */
>     public void setVideoPlayerFlag() {
>         mIsVideoPlayer = true;
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/media/java/android/media/TimedText.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/media/java/android/media/TimedText.java
19a20
> import android.graphics.Bitmap;
74c75,86
<     private static final int LAST_PUBLIC_KEY                  = 16;
---
>     private static final int KEY_SUBTITLE_ID                   = 17; //subtitle id
>     private static final int KEY_STRUCT_AWEXTEND_BMP           = 50; // bmp subtitle such as idxsub and pgs.
>     private static final int KEY_STRUCT_AWEXTEND_PIXEL_FORMAT  = 51; // PIXEL_FORMAT_RGBA_8888
>     private static final int KEY_STRUCT_AWEXTEND_PICWIDTH      = 52; // bmp subtitle item's width
>     private static final int KEY_STRUCT_AWEXTEND_PICHEIGHT     = 53; // bmp subtitle item's height
>     private static final int KEY_STRUCT_AWEXTEND_SUBDISPPOS    = 54; // text subtitle's position, SUB_DISPPOS_BOT_LEFT
>     private static final int KEY_STRUCT_AWEXTEND_SCREENRECT    = 55; // text subtitle's position need a whole area as a ref.
>     private static final int KEY_STRUCT_AWEXTEND_HIDESUB       = 56; // when multi subtitle show the same time, such as ssa,
>                                                                      // we need to tell app which subtitle need to hide.
>     private static final int KEY_STRUCT_AWEXTEND_REFERENCE_VIDEO_WIDTH      = 57;
>     private static final int KEY_STRUCT_AWEXTEND_REFERENCE_VIDEO_HEIGHT     = 58;
>     private static final int LAST_PUBLIC_KEY                  = 58;
112a125,180
>     //copy cedarx's definitions.
>     /** @hide */
>     public static final int SUB_RENDER_ALIGN_NONE       = 0;
>     /** @hide */
>     public static final int SUB_RENDER_HALIGN_LEFT      = 1;
>     /** @hide */
>     public static final int SUB_RENDER_HALIGN_CENTER    = 2;
>     /** @hide */
>     public static final int SUB_RENDER_HALIGN_RIGHT     = 3;
>     /** @hide */
>     public static final int SUN_RENDER_HALIGN_MASK      = 0x0000000f;
>     /** @hide */
>     public static final int SUB_RENDER_VALIGN_TOP       = (1 << 4);
>     /** @hide */
>     public static final int SUB_RENDER_VALIGN_CENTER    = (2 << 4);
>     /** @hide */
>     public static final int SUB_RENDER_VALIGN_BOTTOM    = (3 << 4);
>     /** @hide */
>     public static final int SUN_RENDER_VALIGN_MASK      = 0x000000f0;
> 
>     /** @hide */
>     public static final int SUB_DISPPOS_DEFAULT   = 0;
>     /** @hide */
>     public static final int SUB_DISPPOS_BOT_LEFT  = SUB_RENDER_VALIGN_BOTTOM+SUB_RENDER_HALIGN_LEFT;
>     /** @hide */
>     public static final int SUB_DISPPOS_BOT_MID   = SUB_RENDER_VALIGN_BOTTOM+SUB_RENDER_HALIGN_CENTER;
>     /** @hide */
>     public static final int SUB_DISPPOS_BOT_RIGHT = SUB_RENDER_VALIGN_BOTTOM+SUB_RENDER_HALIGN_RIGHT;
>     /** @hide */
>     public static final int SUB_DISPPOS_MID_LEFT  = SUB_RENDER_VALIGN_CENTER+SUB_RENDER_HALIGN_LEFT;
>     /** @hide */
>     public static final int SUB_DISPPOS_MID_MID   = SUB_RENDER_VALIGN_CENTER+SUB_RENDER_HALIGN_CENTER;
>     /** @hide */
>     public static final int SUB_DISPPOS_MID_RIGHT = SUB_RENDER_VALIGN_CENTER+SUB_RENDER_HALIGN_RIGHT;
>     /** @hide */
>     public static final int SUB_DISPPOS_TOP_LEFT  = SUB_RENDER_VALIGN_TOP   +SUB_RENDER_HALIGN_LEFT;
>     /** @hide */
>     public static final int SUB_DISPPOS_TOP_MID   = SUB_RENDER_VALIGN_TOP   +SUB_RENDER_HALIGN_CENTER;
>     /** @hide */
>     public static final int SUB_DISPPOS_TOP_RIGHT = SUB_RENDER_VALIGN_TOP   +SUB_RENDER_HALIGN_RIGHT;
> 
>     /** @hide */
>     private Bitmap  mAWExtendBitmap = null;
>     /** @hide */
>     private int     mAWExtendBitmapSubtitleFlag = 0;	//0:text; 1:bitmap
>     /** @hide */
>     private int     mAWExtendHideSubFlag = 0;           //0:show; 1:hide
>     /** @hide */
>     private int     mAWExtendSubDispPos = SUB_DISPPOS_DEFAULT;    //SUB_DISPPOS_DEFAULT
>     /** @hide */
>     private Rect    mAWExtendTextScreenBounds = null;
>     private int     mAWExtendReferenceVideoWidth = 0;
>     private int     mAWExtendReferenceVideoHeight = 0;
>     /** @hide */
>     private int     mAWExtendSubtitleID = 0;
> 
400a469,514
>     /** @hide */
>     public Bitmap AWExtend_getBitmap()
>     {
>         return mAWExtendBitmap;
>     }
>     /** @hide */
>     public int AWExtend_getBitmapSubtitleFlag()
>     {
>         return mAWExtendBitmapSubtitleFlag;
>     }
>     /** @hide */
>     public int AWExtend_getHideSubFlag()
>     {
>         return mAWExtendHideSubFlag;
>     }
>     /** @hide */
>     public int AWExtend_getSubDispPos()
>     {
>         return mAWExtendSubDispPos;
>     }
>     /** @hide */
>     public Rect AWExtend_getTextScreenBounds()
>     {
>         return mAWExtendTextScreenBounds;
>     }
>     /** @hide */
>     public List<Style> AWExtend_getStyleList()
>     {
>         return mStyleList;
>     }
>     /** @hide */
>     public int AWExtend_getSubtitleID()
>     {
>         return mAWExtendSubtitleID;
>     }
>     /** @hide */
>     public int AWExtend_getReferenceVideoWidth()
>     {
>         return mAWExtendReferenceVideoWidth;
>     }
>     /** @hide */
>     public int AWExtend_getReferenceVideoHeight()
>     {
>         return mAWExtendReferenceVideoHeight;
>     }
> 
423,424c537,551
<                 return false;
<             }
---
>                 // aw extend: eric_wang add bmp subtitle process code such as idxsub and pgs. 20130625
>                 if (type != KEY_STRUCT_AWEXTEND_BMP) {
>                     Log.w(TAG, "java_parseParcel, find timedtext type=" + type + ", so return false");
>                     return false;
>                 }
>                 type = parcel.readInt();
>                 if (type != KEY_STRUCT_AWEXTEND_PIXEL_FORMAT) {
>                     Log.w(TAG, "java_parseParcel, aw_extend, fail_1!");
>                 }
>                 int pixelFormat = parcel.readInt();
>                 type = parcel.readInt();
>                 if (type != KEY_STRUCT_AWEXTEND_PICWIDTH) {
>                     Log.w(TAG, "java_parseParcel, aw_extend, fail_2!");
>                 }
>                 int subWidth = parcel.readInt();
426,429c553,579
<             int textLen = parcel.readInt();
<             byte[] text = parcel.createByteArray();
<             if (text == null || text.length == 0) {
<                 mTextChars = null;
---
>                 type = parcel.readInt();
>                 if (type != KEY_STRUCT_AWEXTEND_PICHEIGHT) {
>                     Log.w(TAG, "java_parseParcel, aw_extend, fail_3!");
>                 }
> 
>                 int subHeight = parcel.readInt();
> 
>                 type = parcel.readInt();
>                 if (type != KEY_STRUCT_AWEXTEND_REFERENCE_VIDEO_WIDTH) {
>                     Log.w(TAG, "java_parseParcel, aw_extend, fail_4!");
>                 }
>                 mAWExtendReferenceVideoWidth = parcel.readInt();
>                 type = parcel.readInt();
>                 if (type != KEY_STRUCT_AWEXTEND_REFERENCE_VIDEO_HEIGHT) {
>                     Log.w(TAG, "java_parseParcel, aw_extend, fail_5!");
>                 }
>                 mAWExtendReferenceVideoHeight = parcel.readInt();
> 
>                 int picLen = parcel.readInt();
>                 int[] ARGBBuf = parcel.createIntArray();
>                 if (ARGBBuf == null || ARGBBuf.length == 0) {
>                     Log.w(TAG, "java_parseParcel, aw_extend, fail_4!");
>                     mAWExtendBitmap = null;
>                 } else {
>                     mAWExtendBitmap = Bitmap.createBitmap(ARGBBuf, subWidth, subHeight, Bitmap.Config.ARGB_8888);
>                 }
>                 mAWExtendBitmapSubtitleFlag = 1;
431c581,588
<                 mTextChars = new String(text);
---
>                 int textLen = parcel.readInt();
>                 byte[] text = parcel.createByteArray();
>                 if (text == null || text.length == 0) {
>                     mTextChars = null;
>                 } else {
>                     mTextChars = new String(text);
>                 }
>                 mAWExtendBitmapSubtitleFlag = 0;
433d589
< 
522a679,698
>                 }
>                 case KEY_STRUCT_AWEXTEND_SUBDISPPOS: {
>                     mAWExtendSubDispPos = parcel.readInt();
>                     break;
>                 }
>                 case KEY_STRUCT_AWEXTEND_SCREENRECT: {
>                     int top     = parcel.readInt();
>                     int left    = parcel.readInt();
>                     int bottom  = parcel.readInt();
>                     int right   = parcel.readInt();
>                     mAWExtendTextScreenBounds = new Rect(left, top, right, bottom);
>                     break;
>                 }
>                 case KEY_STRUCT_AWEXTEND_HIDESUB: {
>                     mAWExtendHideSubFlag = parcel.readInt();
>                     break;
>                 }
>                 case KEY_SUBTITLE_ID: {
>                     mAWExtendSubtitleID = parcel.readInt();
>                     Log.d(TAG,"nSubtitleID = " + mAWExtendSubtitleID);
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/media/jni/android_media_MediaPlayer.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/base/media/jni/android_media_MediaPlayer.cpp
882a883,953
> static jint
> android_media_MediaPlayer_setSubCharset(JNIEnv *env, jobject thiz, jstring charset)
> {
>     sp<MediaPlayer> mp = getMediaPlayer(env, thiz);
>     if (mp == NULL) {
>         jniThrowException(env, "java/lang/IllegalStateException", NULL);
>         return -1;
>     }
> 
>     const char *ccharset = env->GetStringUTFChars(charset, NULL);
>     if (ccharset == NULL) {
>         ALOGE("Fail in converting jstring to cstring.");
>         return -1;
>     }
> 
>     status_t ret = mp->setSubCharset(ccharset);
>     env->ReleaseStringUTFChars(charset, ccharset);
>     return ret;
> }
> 
> static jstring
> android_media_MediaPlayer_getSubCharset(JNIEnv *env, jobject thiz)
> {
>     sp<MediaPlayer> mp = getMediaPlayer(env, thiz);
>     if (mp == NULL) {
>         jniThrowException(env, "java/lang/IllegalStateException", NULL);
>         return NULL;
>     }
>     char *ccharset = new char[MEDIAPLAYER_NAME_LEN_MAX];
>     if (ccharset == NULL) {
>         ALOGE("Fail in allocating memory.");
>         return NULL;
>     }
> 
>     status_t ret = mp->getSubCharset(ccharset);
>     if (ret == OK) {
>         jstring charset = env->NewStringUTF(ccharset);
>         if(charset == NULL){
>             ALOGE("Fail in creating java string with %s.", ccharset);
>         }
>         delete[] ccharset;
>         return charset;
>     } else {
>         delete[] ccharset;
>         return NULL;
>     }
> }
> static jint
> android_media_MediaPlayer_setSubDelay(JNIEnv *env, jobject thiz, jint delay)
> {
>     sp<MediaPlayer> mp = getMediaPlayer(env, thiz);
>     if (mp == NULL ) {
>         jniThrowException(env, "java/lang/IllegalStateException", NULL);
>         return -1;
>     }
> 
>     return mp->setSubDelay(delay);
> }
> 
> static jint
> android_media_MediaPlayer_getSubDelay(JNIEnv *env, jobject thiz)
> {
>     sp<MediaPlayer> mp = getMediaPlayer(env, thiz);
>     if (mp == NULL ) {
>         jniThrowException(env, "java/lang/IllegalStateException", NULL);
>         return -1;
>     }
> 
>     return mp->getSubDelay();
> }
> 
1426a1498,1502
>     /* expend interfaces about subtitle, track and so on */
>     {"setSubCharset",        "(Ljava/lang/String;)I",           (void *)android_media_MediaPlayer_setSubCharset},
>     {"getSubCharset",        "()Ljava/lang/String;",            (void *)android_media_MediaPlayer_getSubCharset},
>     {"setSubDelay",          "(I)I",                            (void *)android_media_MediaPlayer_setSubDelay},
>     {"getSubDelay",          "()I",                             (void *)android_media_MediaPlayer_getSubDelay},
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/mime/java-res/android.mime.types /home/yajat/Desktop/H618-Android12-Src/frameworks/base/mime/java-res/android.mime.types
88a89,93
> ?audio/ape ape
> ?audio/oma oma
> ?audio/bit bit
> ?audio/dff dff
> ?audio/caf caf
124a130,132
> ?video/pmp pmp
> ?video/vob vob
> ?video/mpegts mpegts tp
149a158,162
> audio/ape ape
> audio/oma oma
> audio/bit bit
> audio/dff dff
> audio/caf caf
158a172,173
> video/pmp pmp
> video/vob vob
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/packages/overlays/Android.mk /home/yajat/Desktop/H618-Android12-Src/frameworks/base/packages/overlays/Android.mk
23,27d22
< 	DisplayCutoutEmulationCornerOverlay \
< 	DisplayCutoutEmulationDoubleOverlay \
<     DisplayCutoutEmulationHoleOverlay \
< 	DisplayCutoutEmulationTallOverlay \
< 	DisplayCutoutEmulationWaterfallOverlay \
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/packages/SettingsLib/src/com/android/settingslib/display/BrightnessUtils.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/packages/SettingsLib/src/com/android/settingslib/display/BrightnessUtils.java
25a26,27
>     private static final boolean IS_LINEAR_CHANGE = false;
> 
56a59,63
> 
>         if (IS_LINEAR_CHANGE) {
>             return Math.round(MathUtils.lerp(min, max, normalizedVal));
>         }
> 
79a87,91
> 
>         if (IS_LINEAR_CHANGE) {
>             return MathUtils.lerp(min, max, normalizedVal);
>         }
> 
130a143,147
>         if (IS_LINEAR_CHANGE) {
>             final float linearVal = MathUtils.norm(min, max, val);
>             return Math.round(MathUtils.lerp(GAMMA_SPACE_MIN, GAMMA_SPACE_MAX, linearVal));
>         }
> 
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/packages/SettingsLib/src/com/android/settingslib/wifi/AccessPoint.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/packages/SettingsLib/src/com/android/settingslib/wifi/AccessPoint.java
355c355
< 
---
>         Log.d(TAG, "AccessPoint mConfig="+mConfig+", mInfo="+mInfo+", mNetworkInfo="+mNetworkInfo);
2065a2066,2077
> 
>     ///AW CODE: [feat] support wifi6 logo
>     public List<ScanResult.InformationElement> getInformationElements() {
>         for (ScanResult result: mScanResults) {
>             Log.d(TAG, "result BSSID=" + result.BSSID + ", AccessPoint BSSID=" + getBssid());
>             if (result.BSSID.equals(getBssid())) {
>                 return result.getInformationElements();
>             }
>         }
>         return null;
>     }
>     ///AW add end
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/base/packages/SettingsProvider/res/values: defaults_custom.xml
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java
850a851,856
>             loadStringSetting(stmt, Settings.System.AUDIO_OUTPUT_CHANNEL,
>                     R.string.def_audio_output_channel);
>             loadIntegerSetting(stmt, Settings.System.AUDIO_MANAGE_POLICY,
>                     R.integer.def_audio_manage_policy);
>             loadBooleanSetting(stmt, Settings.System.ENABLE_PASS_THROUGH,
>                     R.bool.def_enable_pass_through);
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/base/packages/SystemUI/res: drawable-sw720dp
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/packages/SystemUI/res/values/colors.xml /home/yajat/Desktop/H618-Android12-Src/frameworks/base/packages/SystemUI/res/values/colors.xml
283a284,289
> 
>     <!-- assist board color -->
>     <color name="assist_invocation_lights_1">#FFFF0000</color>
>     <color name="assist_invocation_lights_2">#FF0000FF</color>
>     <color name="assist_invocation_lights_3">#FFFFFF00</color>
>     <color name="assist_invocation_lights_4">#FF00FF00</color>
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/packages/SystemUI/res/values/config.xml /home/yajat/Desktop/H618-Android12-Src/frameworks/base/packages/SystemUI/res/values/config.xml
672a673,677
>     <!-- AW CODE:[feat]: Whether to show drop-down menu -->
>     <bool name="config_showDropDownMenu">true</bool>
> 
>     <!-- AW CODE:MADA test M31 not show assist orb -->
>     <bool name="config_assistShowOrb">true</bool>
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/packages/SystemUI/res/values/dimens.xml /home/yajat/Desktop/H618-Android12-Src/frameworks/base/packages/SystemUI/res/values/dimens.xml
1588a1589,1591
> 
>     <!-- assist board height-->
>     <dimen name="assist_invocation_lights_height">5dp</dimen>
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/packages/SystemUI/shared/src/com/android/systemui/shared/system/ActivityManagerWrapper.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/packages/SystemUI/shared/src/com/android/systemui/shared/system/ActivityManagerWrapper.java
291c291,295
<             getService().removeTask(taskId);
---
>             // getService().removeTask(taskId);
>             /*AW_CODE;for reseve-process interface;jiangbin;210638*/
>             getService().removeTaskReseveProcess(taskId);
>             /*end*/
> 
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/packages/SystemUI/src/com/android/keyguard/LockIconViewController.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/packages/SystemUI/src/com/android/keyguard/LockIconViewController.java
242a243
>         mView.setRotation(180);
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/packages/SystemUI/src/com/android/systemui/assist/AssistManager.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/packages/SystemUI/src/com/android/systemui/assist/AssistManager.java
237c237,240
<         if (!isService || (!isVoiceSessionRunning() && shouldShowOrb())) {
---
>         ///AW CODE:fix: MADA test M31 not show assist orb
>         boolean isAllowShowOrb = mContext.getResources().getBoolean(R.bool.config_assistShowOrb);
>         if ((!isService || (!isVoiceSessionRunning() && shouldShowOrb())) && isAllowShowOrb) {
>         /// AW:add end
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/packages/SystemUI/src/com/android/systemui/assist/ui/DefaultUiController.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/packages/SystemUI/src/com/android/systemui/assist/ui/DefaultUiController.java
25a26
> import android.graphics.Color;
98a100,109
> 
>         /* Use the configuration color, also change to the Color, as shown below:
>         mInvocationLightsView.setColors(Color.RED, Color.BLUE, Color.YELLOW, Color.GREEN);
>         */
>         /* AW_CODE */
>         mInvocationLightsView.setColors(context.getColor(R.color.assist_invocation_lights_1),
>                     context.getColor(R.color.assist_invocation_lights_2),
>                     context.getColor(R.color.assist_invocation_lights_3),
>                     context.getColor(R.color.assist_invocation_lights_4));
>         /* AW_CODE  end */
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/packages/SystemUI/src/com/android/systemui/assist/ui/InvocationLightsView.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/packages/SystemUI/src/com/android/systemui/assist/ui/InvocationLightsView.java
50c50
<     private static final int LIGHT_HEIGHT_DP = 3;
---
>     private static final int LIGHT_HEIGHT_DP = 5;
89c89,95
<         mStrokeWidth = DisplayUtils.convertDpToPx(LIGHT_HEIGHT_DP, context);
---
>         /* AW_CODE */
>         int lightBoardHeight = context.getResources().getDimensionPixelSize(R.dimen.assist_invocation_lights_height);
>         if (lightBoardHeight <= 0) {
>             lightBoardHeight = LIGHT_HEIGHT_DP;
>         }
>         mStrokeWidth = DisplayUtils.convertDpToPx(lightBoardHeight, context);
>         /* AW_CODE end */
103a110
>         /* AW_CODE */
105,106c112,113
<             DisplayUtils.convertDpToPx(LIGHT_HEIGHT_DP, context));
< 
---
>             DisplayUtils.convertDpToPx(lightBoardHeight, context));
>         /* AW_CODE end */
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/packages/SystemUI/src/com/android/systemui/controls/ui/ControlActionCoordinatorImpl.kt /home/yajat/Desktop/H618-Android12-Src/frameworks/base/packages/SystemUI/src/com/android/systemui/controls/ui/ControlActionCoordinatorImpl.kt
20a21
> import android.app.PendingIntent
91c92
<                 showDetail(cvh, control.getAppIntent().getIntent())
---
>                 showDetail(cvh, control.getAppIntent())
119c120
<                 showDetail(cvh, it.getAppIntent().getIntent())
---
>                 showDetail(cvh, it.getAppIntent())
170c171
<     private fun showDetail(cvh: ControlViewHolder, intent: Intent) {
---
>     private fun showDetail(cvh: ControlViewHolder, pendingIntent: PendingIntent) {
173c174
<                 intent,
---
>                 pendingIntent.getIntent(),
181c182
<                         dialog = DetailDialog(activityContext, it, intent, cvh).also {
---
>                         dialog = DetailDialog(activityContext, it, pendingIntent, cvh).also {
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/packages/SystemUI/src/com/android/systemui/controls/ui/DetailDialog.kt /home/yajat/Desktop/H618-Android12-Src/frameworks/base/packages/SystemUI/src/com/android/systemui/controls/ui/DetailDialog.kt
46c46
<     val intent: Intent,
---
>     val pendingIntent: PendingIntent,
61a62,69
>     private val fillInIntent = Intent().apply {
>         putExtra(EXTRA_USE_PANEL, true)
> 
>         // Apply flags to make behaviour match documentLaunchMode=always.
>         addFlags(Intent.FLAG_ACTIVITY_NEW_DOCUMENT)
>         addFlags(Intent.FLAG_ACTIVITY_MULTIPLE_TASK)
>     }
> 
70,76d77
<             val launchIntent = Intent(intent)
<             launchIntent.putExtra(EXTRA_USE_PANEL, true)
< 
<             // Apply flags to make behaviour match documentLaunchMode=always.
<             launchIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_DOCUMENT)
<             launchIntent.addFlags(Intent.FLAG_ACTIVITY_MULTIPLE_TASK)
< 
85,87c86,87
<                 PendingIntent.getActivity(context, 0, launchIntent,
<                         PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE),
<                 null /* fillInIntent */,
---
>                 pendingIntent,
>                 fillInIntent,
99a100,102
>             requireViewById<ViewGroup>(R.id.controls_activity_view).apply {
>                 setAlpha(1f)
>             }
123a127
>             setAlpha(0f)
137c141
<                 v.context.startActivity(intent)
---
>                 pendingIntent.send()
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/packages/SystemUI/src/com/android/systemui/dagger/FrameworkServicesModule.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/packages/SystemUI/src/com/android/systemui/dagger/FrameworkServicesModule.java
425c425,429
<         return context.getSystemService(PermissionManager.class);
---
>         PermissionManager pm = context.getSystemService(PermissionManager.class);
>         if (pm != null) {
>             pm.initializeUsageHelper();
>         }
>         return pm;
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/packages/SystemUI/src/com/android/systemui/navigationbar/NavigationBar.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/packages/SystemUI/src/com/android/systemui/navigationbar/NavigationBar.java
1564a1565,1566
>         } else {
>             updateAssistantEntrypoints();
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/packages/SystemUI/src/com/android/systemui/qs/external/TileServices.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/packages/SystemUI/src/com/android/systemui/qs/external/TileServices.java
44a45,49
> import com.android.internal.telephony.TelephonyIntents;
> import com.android.internal.telephony.PhoneConstants;
> import com.android.systemui.tuner.TunerService;
> import com.android.systemui.R;
> import com.android.systemui.util.Utils;
68a74
>     private String mRadioState = "off";
74a81,82
>         mContext.registerReceiver(mRadioStateChangedReceiver,
>                 new IntentFilter(TelephonyIntents.ACTION_RADIO_STATE_CHANGED));
340a349
>             mContext.unregisterReceiver(mRadioStateChangedReceiver);
349a359,385
>             }
>         }
>     };
> 
>     private final BroadcastReceiver mRadioStateChangedReceiver = new BroadcastReceiver() {
>         @Override
>         public void onReceive(Context context, Intent intent) {
>             String action = intent.getAction();
>             mRadioState = intent.getStringExtra(PhoneConstants.STATE_KEY);
>             if (TelephonyIntents.ACTION_RADIO_STATE_CHANGED.equals(action)) {
>                 String value = Dependency.get(TunerService.class).getValue(mHost.TILES_SETTING);
>                 if (value == null) {
>                     value = mContext.getResources().getString(R.string.quick_settings_tiles_default);
>                 }
>                 Utils.mRadioAvailable = mRadioState.equals("on");
>                 String newValue = value;
>                 if (Utils.mRadioAvailable) {
>                     if (!value.contains("cell")) {
>                         newValue = value + ",cell";
>                     }
>                 } else {
>                     if (value.contains("cell")) {
>                         newValue = value.replace(",cell", "");
>                     }
>                 }
>                 mHost.onTuningChanged(mHost.TILES_SETTING, "");
>                 mHost.onTuningChanged(mHost.TILES_SETTING, newValue);
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/packages/SystemUI/src/com/android/systemui/qs/PagedTileLayout.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/packages/SystemUI/src/com/android/systemui/qs/PagedTileLayout.java
116a117,119
>             // fix: PagerTileLayout doesn't refresh in portrait mode that causing tiles would overlap
>             // After switching between landscape and portrait
>             mDistributeTiles = true;
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/packages/SystemUI/src/com/android/systemui/qs/tiles/CellularTile.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/packages/SystemUI/src/com/android/systemui/qs/tiles/CellularTile.java
63a64
> import com.android.systemui.util.Utils;
252a254
>         if (!Utils.mRadioAvailable) return false;
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/packages/SystemUI/src/com/android/systemui/ScreenDecorations.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/packages/SystemUI/src/com/android/systemui/ScreenDecorations.java
426a427
>         mOverlays[pos].setVisibility(View.GONE);
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/packages/SystemUI/src/com/android/systemui/screenrecord/ScreenMediaRecorder.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/packages/SystemUI/src/com/android/systemui/screenrecord/ScreenMediaRecorder.java
315a316
>         values.put(MediaStore.Video.Media.TAGS,"recording");
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/base/packages/SystemUI/src/com/android/systemui/sensorprivacy: SensorUseDialog.kt
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/packages/SystemUI/src/com/android/systemui/sensorprivacy/SensorUseStartedActivity.kt /home/yajat/Desktop/H618-Android12-Src/frameworks/base/packages/SystemUI/src/com/android/systemui/sensorprivacy/SensorUseStartedActivity.kt
18a19,20
> import android.app.Activity
> import android.app.AlertDialog
19a22,23
> import android.content.DialogInterface.BUTTON_NEGATIVE
> import android.content.DialogInterface.BUTTON_POSITIVE
22,23d25
< import android.content.pm.PackageManager
< import android.content.res.Resources
30,36c32,35
< import android.text.Html
< import android.view.View.GONE
< import android.view.View.VISIBLE
< import android.widget.ImageView
< import com.android.internal.app.AlertActivity
< import com.android.internal.widget.DialogTitle
< import com.android.systemui.R
---
> import com.android.internal.util.FrameworkStatsLog.PRIVACY_TOGGLE_DIALOG_INTERACTION
> import com.android.internal.util.FrameworkStatsLog.PRIVACY_TOGGLE_DIALOG_INTERACTION__ACTION__CANCEL
> import com.android.internal.util.FrameworkStatsLog.PRIVACY_TOGGLE_DIALOG_INTERACTION__ACTION__ENABLE
> import com.android.internal.util.FrameworkStatsLog.write
42,45d40
< import com.android.internal.util.FrameworkStatsLog.PRIVACY_TOGGLE_DIALOG_INTERACTION
< import com.android.internal.util.FrameworkStatsLog.PRIVACY_TOGGLE_DIALOG_INTERACTION__ACTION__ENABLE
< import com.android.internal.util.FrameworkStatsLog.PRIVACY_TOGGLE_DIALOG_INTERACTION__ACTION__CANCEL
< import com.android.internal.util.FrameworkStatsLog.write
58c53
< ) : AlertActivity(), DialogInterface.OnClickListener {
---
> ) : Activity(), DialogInterface.OnClickListener {
66,68c61,63
<         private const val CAMERA = SensorPrivacyManager.Sensors.CAMERA
<         private const val MICROPHONE = SensorPrivacyManager.Sensors.MICROPHONE
<         private const val ALL_SENSORS = Integer.MAX_VALUE
---
>         internal const val CAMERA = SensorPrivacyManager.Sensors.CAMERA
>         internal const val MICROPHONE = SensorPrivacyManager.Sensors.MICROPHONE
>         internal const val ALL_SENSORS = Integer.MAX_VALUE
76a72,73
>     private var mDialog: AlertDialog? = null
> 
94c91
<                             dismiss()
---
>                             finish()
112,113c109,110
<                     IndividualSensorPrivacyController.Callback {
<                         whichSensor: Int, isBlocked: Boolean ->
---
>                     IndividualSensorPrivacyController.Callback { whichSensor: Int,
>                                                                  isBlocked: Boolean ->
115c112
<                             dismiss()
---
>                             finish()
120,164c117
<             sensorPrivacyController.addCallback { _, isBlocked ->
<                 if (!isBlocked) {
<                     dismiss()
<                 }
<             }
<         }
< 
<         mAlertParams.apply {
<             try {
<                 mCustomTitleView = mInflater.inflate(R.layout.sensor_use_started_title, null)
<                 mCustomTitleView.findViewById<DialogTitle>(R.id.sensor_use_started_title_message)!!
<                         .setText(when (sensor) {
<                             MICROPHONE ->
<                                 R.string.sensor_privacy_start_use_mic_dialog_title
<                             CAMERA ->
<                                 R.string.sensor_privacy_start_use_camera_dialog_title
<                             ALL_SENSORS ->
<                                 R.string.sensor_privacy_start_use_mic_camera_dialog_title
<                             else -> Resources.ID_NULL
<                         })
< 
<                 mCustomTitleView.findViewById<ImageView>(R.id.sensor_use_microphone_icon)!!
<                         .visibility = if (sensor == MICROPHONE || sensor == ALL_SENSORS) {
<                     VISIBLE
<                 } else {
<                     GONE
<                 }
<                 mCustomTitleView.findViewById<ImageView>(R.id.sensor_use_camera_icon)!!
<                         .visibility = if (sensor == CAMERA || sensor == ALL_SENSORS) {
<                     VISIBLE
<                 } else {
<                     GONE
<                 }
< 
<                 mMessage = Html.fromHtml(getString(when (sensor) {
<                     MICROPHONE ->
<                         R.string.sensor_privacy_start_use_mic_dialog_content
<                     CAMERA ->
<                         R.string.sensor_privacy_start_use_camera_dialog_content
<                     ALL_SENSORS ->
<                         R.string.sensor_privacy_start_use_mic_camera_dialog_content
<                     else -> Resources.ID_NULL
<                 }, packageManager.getApplicationInfo(sensorUsePackageName, 0)
<                         .loadLabel(packageManager)), 0)
<             } catch (e: PackageManager.NameNotFoundException) {
---
>             if (!sensorPrivacyController.isSensorBlocked(sensor)) {
168,173d120
< 
<             mPositiveButtonText = getString(
<                     com.android.internal.R.string.sensor_privacy_start_use_dialog_turn_on_button)
<             mNegativeButtonText = getString(android.R.string.cancel)
<             mPositiveButtonListener = this@SensorUseStartedActivity
<             mNegativeButtonListener = this@SensorUseStartedActivity
176c123,124
<         setupAlert()
---
>         mDialog = SensorUseDialog(this, sensor, this)
>         mDialog!!.show()
215c163
<         dismiss()
---
>         finish()
231a180
>         mDialog?.dismiss()
266c215
< }
\ No newline at end of file
---
> }
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/packages/SystemUI/src/com/android/systemui/sensorprivacy/television/TvUnblockSensorActivity.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/packages/SystemUI/src/com/android/systemui/sensorprivacy/television/TvUnblockSensorActivity.java
26a27
> import android.view.WindowManager;
59a61,62
>         getWindow().addSystemFlags(
>                 WindowManager.LayoutParams.SYSTEM_FLAG_HIDE_NON_SYSTEM_OVERLAY_WINDOWS);
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/CommandQueue.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/CommandQueue.java
36a37
> import android.content.res.Resources;
63a65
> import com.android.systemui.R;
172a175,177
>     /// AW CODE:[feat]: hide drop-down menu
>     private boolean mShowDropDownMenu;
>     /// AW add end
414a420,422
>         /// AW CODE:[feat]: hide drop-down menu
>         mShowDropDownMenu = context.getResources().getBoolean(R.bool.config_showDropDownMenu);
>         /// AW add end
439,441c447,455
<         return (disabled1 & StatusBarManager.DISABLE_EXPAND) == 0
<                 && (disabled2 & StatusBarManager.DISABLE2_NOTIFICATION_SHADE) == 0
<                 && !ONLY_CORE_APPS;
---
>         /// AW CODE:[feat]: hide drop-down menu
>         if (mShowDropDownMenu) {
>             return (disabled1 & StatusBarManager.DISABLE_EXPAND) == 0
>                     && (disabled2 & StatusBarManager.DISABLE2_NOTIFICATION_SHADE) == 0
>                     && !ONLY_CORE_APPS;
>         } else {
>             return false;
>         }
>         /// AW add end
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/events/PrivacyDotViewController.kt /home/yajat/Desktop/H618-Android12-Src/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/events/PrivacyDotViewController.kt
25a26
> import android.view.ViewGroup
80a82
>     private lateinit var dots: Array<View>
176a179,180
>         var vis = false
>         val root = dot.rootView as ViewGroup
182c186,196
<                     .withEndAction { dot.visibility = View.INVISIBLE }
---
>                     .withEndAction {
>                         dot.visibility = View.INVISIBLE
>                         for (v in dots) {
>                             if (root.indexOfChild(v) >= 0 && v.visibility == View.VISIBLE) {
>                                 vis = true
>                                 break;
>                             }
>                         }
>                         if (!vis)
>                             dot.rootView.visibility = View.GONE
>                     }
185a200,207
>             for (v in dots) {
>                 if (root.indexOfChild(v) >= 0 && v.visibility == View.VISIBLE) {
>                     vis = true
>                     break;
>                 }
>             }
>             if (!vis)
>                 dot.rootView.visibility = View.GONE
191a214
>         dot.rootView.visibility = View.VISIBLE
399a423
>         dots = arrayOf<View>(tl, tr, bl, br)
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/notification/stack/NotificationStackScrollLayoutController.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/notification/stack/NotificationStackScrollLayoutController.java
119a120,121
> import com.android.systemui.statusbar.policy.DeviceProvisionedController;
> import com.android.systemui.statusbar.policy.DeviceProvisionedController.DeviceProvisionedListener;
146a149
>     private final DeviceProvisionedController mDeviceProvisionedController;
220a224,245
>     private final DeviceProvisionedListener mDeviceProvisionedListener =
>             new DeviceProvisionedListener() {
>                 @Override
>                 public void onDeviceProvisionedChanged() {
>                     updateCurrentUserIsSetup();
>                 }
> 
>                 @Override
>                 public void onUserSwitched() {
>                     updateCurrentUserIsSetup();
>                 }
> 
>                 @Override
>                 public void onUserSetupChanged() {
>                     updateCurrentUserIsSetup();
>                 }
> 
>                 private void updateCurrentUserIsSetup() {
>                     mView.setCurrentUserSetup(mDeviceProvisionedController.isCurrentUserSetup());
>                 }
>             };
> 
589a615
>             DeviceProvisionedController deviceProvisionedController,
625a652
>         mDeviceProvisionedController = deviceProvisionedController;
760a788,790
> 
>         // callback is invoked synchronously, updating mView immediately
>         mDeviceProvisionedController.addCallback(mDeviceProvisionedListener);
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/notification/stack/NotificationStackScrollLayout.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/notification/stack/NotificationStackScrollLayout.java
149a150,152
>     /// AW CODE:[feat]: hide drop-down menu
>     private boolean mShowDropDownMenu;
>     /// AW add end
258a262
>     private boolean mIsCurrentUserSetup;
614a619,621
>         /// AW CODE:[feat]: hide drop-down menu
>         mShowDropDownMenu = res.getBoolean(R.bool.config_showDropDownMenu);
>         /// AW add end
685a693
>                 && mIsCurrentUserSetup  // see: b/193149550
1080c1088,1094
<         mMaxLayoutHeight = maxLayoutHeight;
---
>         /// AW CODE:[feat]: hide drop-down menu
>         if(mShowDropDownMenu) {
>             mMaxLayoutHeight = maxLayoutHeight;
>         } else {
>             mMaxLayoutHeight = 0;
>         }
>         /// AW add end
2532,2533c2546,2553
<         setTopPadding(topPadding, animate && !mKeyguardBypassEnabledProvider.getBypassEnabled());
<         setExpandedHeight(mExpandedHeight);
---
>         /// AW CODE:[feat]: hide drop-down menu
>         if (mShowDropDownMenu) {
>             setTopPadding(topPadding, animate && !mKeyguardBypassEnabledProvider.getBypassEnabled());
>             setExpandedHeight(mExpandedHeight);
>         } else {
>             setTopPadding(-1000,animate);
>         }
>         /// AW add end
3435d3454
< 
5566a5586,5595
>     }
> 
>     /**
>      * Sets whether the current user is set up, which is required to show the footer (b/193149550)
>      */
>     public void setCurrentUserSetup(boolean isCurrentUserSetup) {
>         if (mIsCurrentUserSetup != isCurrentUserSetup) {
>             mIsCurrentUserSetup = isCurrentUserSetup;
>             updateFooter();
>         }
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/NotificationPanelViewController.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/NotificationPanelViewController.java
256a257,259
>     /// AW CODE:[feat]: hide drop-down menu
>     private boolean mShowDropDownMenu;
>     /// AW add end
843a847,850
>         /// AW CODE:[feat]: hide drop-down menu
>         try {
>             mShowDropDownMenu = resources.getBoolean(R.bool.config_showDropDownMenu);
>         } catch (Exception e) {
844a852,853
>         }
>         /// AW add end
1845,1848c1854,1867
<         if (!mQsExpandImmediate && mQsTracking) {
<             onQsTouch(event);
<             if (!mConflictingQsExpansionGesture) {
<                 return true;
---
>         /// AW CODE:[feat]: hide drop-down menu
>         if (mShowDropDownMenu) {
>             if (!mQsExpandImmediate && mQsTracking) {
>                 onQsTouch(event);
>                 if (!mConflictingQsExpansionGesture) {
>                     return true;
>                 }
>             }
>         } else {
>             if (!mKeyguardShowing && !mQsExpandImmediate && mQsTracking) {
>                 onQsTouch(event);
>                 if (!mConflictingQsExpansionGesture) {
>                     return true;
>                 }
1850a1870
>         ///AW add end
2082a2103,2107
>         /// AW CODE:[feat]: hide drop-down menu
>         if (!mShowDropDownMenu) {
>             return ;
>         }
>         /// AW add end
2736,2737c2761,2768
<         View header = mKeyguardShowing || mQs == null ? mKeyguardStatusBar : mQs.getHeader();
< 
---
>         /// AW CODE:[feat]: hide drop-down menu
>         View header;
>         if (mShowDropDownMenu) {
>             header = mKeyguardShowing || mQs == null ? mKeyguardStatusBar : mQs.getHeader();
>         } else {
>             header = mQs.getHeader();
>         }
>         /// AW add end
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/NotificationShadeWindowViewController.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/NotificationShadeWindowViewController.java
115c115,117
< 
---
>     /// AW CODE:[feat]: hide drop-down menu
>     private boolean mShowDropDownMenu;
>     /// AW add end
168a171,177
>         /// AW CODE:[feat]: hide drop-down menu
>         try {
>             mShowDropDownMenu = mView.getContext().getResources().getBoolean(
>                     R.bool.config_showDropDownMenu);
>         } catch(Exception e) {
>         }
>         /// AW add end
239c248,254
<                     setTouchActive(true);
---
>                     /// AW CODE:[feat]: hide drop-down menu
>                     if(mShowDropDownMenu){
>                         setTouchActive(true);
>                     } else {
>                         setTouchActive(false);
>                     }
>                     /// AW add end
344c359,363
<                     handled = mDragDownHelper.onTouchEvent(ev);
---
>                     /// AW CODE:[feat]: hide drop-down menu
>                     if (mShowDropDownMenu) {
>                         handled = mDragDownHelper.onTouchEvent(ev);
>                     }
>                     ///AW add end
346,347c365,371
< 
<                 return handled;
---
>                 /// AW CODE:[feat]: hide drop-down menu
>                 if (mShowDropDownMenu) {
>                     return handled;
>                 } else {
>                     return false;
>                 }
>                 /// AW add end
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarView.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarView.java
57c57,60
< 
---
>     /// AW CODE:[feat]: hide drop-down Menu
>     boolean mShowDropDownMenu = getResources().getBoolean(
>             R.bool.config_showDropDownMenu);
>     /// AW add end
236,237c239,245
< 
<         return barConsumedEvent || super.onTouchEvent(event);
---
>         /// AW CODE:[feat]: hide drop-down menu
>         if (mShowDropDownMenu) {
>             return barConsumedEvent || super.onTouchEvent(event);
>         } else {
>             return true;
>         }
>         /// AW add end
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBarKeyguardViewManager.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBarKeyguardViewManager.java
564,565c564,569
<         mStatusBar.getNotificationShadeWindowView().getWindowInsetsController()
<                 .setAnimationsDisabled(false);
---
>         /// AW CODE:[bugfix]: fix TvStatusBar null pointer exception and disabled keyguard
>         if(mStatusBar !=null) {
>         /// AW add end
>             mStatusBar.getNotificationShadeWindowView().getWindowInsetsController()
>                     .setAnimationsDisabled(false);
>         }
570,571c574,579
<         mStatusBar.getNotificationShadeWindowView().getWindowInsetsController()
<                 .setAnimationsDisabled(true);
---
>         /// AW CODE:[bugfix]: fix TvStatusBar null pointer exception and disabled keyguard
>         if(mStatusBar != null) {
>         /// AW add end
>             mStatusBar.getNotificationShadeWindowView().getWindowInsetsController()
>                     .setAnimationsDisabled(true);
>         }
576c584,588
<         mBouncer.onScreenTurnedOff();
---
>         /// AW CODE:[bugfix]: fix TvStatusBar null pointer exception and disabled keyguard
>         if(mBouncer != null) {
>         /// AW add end
>             mBouncer.onScreenTurnedOff();
>         }
1333c1345
< }
\ No newline at end of file
---
> }
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/policy/WifiSignalController.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/policy/WifiSignalController.java
78c78
<         mProviderModelSetting = featureFlags.isProviderModelSettingEnabled();
---
>         mProviderModelSetting = false; //featureFlags.isProviderModelSettingEnabled();
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/tv: TvDozeServiceHost.java
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/tv: TvHeadsUpManager.java
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/tv: TvKeyguardBypassController.java
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/tv: TvKeyguardEnvironmentImpl.java
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/tv: TvNotificationShadeWindowControllerImpl.java
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/tv: TvShadeController.java
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/tv: TvStatusBarKeyguardViewManager.java
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/packages/SystemUI/src/com/android/systemui/SystemUIApplication.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/packages/SystemUI/src/com/android/systemui/SystemUIApplication.java
26a27
> import android.net.wifi.WifiManager;
29a31
> import android.os.Build;
45a48,56
> // AW:Added for BOOTEVENT
> import java.io.FileOutputStream;
> import java.io.FileNotFoundException;
> import java.io.IOException;
> import java.util.ArrayList;
> import java.util.HashMap;
> import java.util.List;
> import java.util.Map;
> 
53c64
<     private static final boolean DEBUG = false;
---
>     private static final boolean DEBUG = true;
61a73
>     private String[] mNames;
66a79,81
>     private final List<String> mBaseStartServices = new ArrayList<>();
>     private Context mContext;
> 
76a92
>         mContext = this;
94a111,125
> 
>         if(SystemProperties.get("ro.build.characteristics").equals("homlet")){
>             Log.d(TAG,"is homlet");
>             mBaseStartServices.add("com.android.systemui.util.NotificationChannels");
>             mBaseStartServices.add("com.android.systemui.ScreenDecorations");
>         } else {
>             mBaseStartServices.add("com.android.systemui.util.NotificationChannels");
>             mBaseStartServices.add("com.android.systemui.ScreenDecorations");
>             mBaseStartServices.add("com.android.systemui.stackdivider.Divider");
>             mBaseStartServices.add("com.android.systemui.keyguard.KeyguardViewMediator");
>             mBaseStartServices.add("com.android.systemui.statusbar.phone.StatusBar");
>             mBaseStartServices.add("com.android.systemui.recents.Recents");
>             mBaseStartServices.add("com.android.systemui.globalactions.GlobalActionsComponent");
>         }
> 
120a152,173
>                             long ti = System.currentTimeMillis();
>                             if (mServices[i] == null) {
>                                 String clsName = mNames[i];
>                                 if (DEBUG) Log.d(TAG, "loading: " + clsName);
>                                 try {
>                                     SystemUI obj = mComponentHelper.resolveSystemUI(clsName);
>                                     if (obj == null) {
>                                         Constructor constructor = Class.forName(clsName).getConstructor(Context.class);
>                                         obj = (SystemUI) constructor.newInstance(mContext);
>                                     }
>                                     mServices[i] = obj;
>                                 } catch (ClassNotFoundException
>                                         | NoSuchMethodException
>                                         | IllegalAccessException
>                                         | InstantiationException
>                                         | InvocationTargetException ex) {
>                                     throw new RuntimeException(ex);
>                                  }
> 
>                                 if (DEBUG) Log.d(TAG, "running: " + mServices[i]);
>                                 mServices[i].start();
>                             }
121a175,176
>                             ti = System.currentTimeMillis() - ti;
>                             Log.d("SystemUIBootTiming", "SystemUIService: bootcomplete " + mServices[i].getClass().getName() + " took " + ti + " ms");
151a207,258
> 
>         if (Build.DROIDBOOST_ENABLED) {
>             // AW:turn off wifi and start after locked boot completed
>             IntentFilter bootToostFilter = new IntentFilter();
>             bootToostFilter.setPriority(IntentFilter.SYSTEM_HIGH_PRIORITY);
>             bootToostFilter.addAction(Intent.ACTION_LOCKED_BOOT_COMPLETED);
>             bootToostFilter.addAction(Intent.ACTION_SHUTDOWN);
>             registerReceiver(new BroadcastReceiver() {
>                 @Override
>                 public void onReceive(Context context, Intent intent) {
>                     WifiManager wm = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);
>                     if (Intent.ACTION_LOCKED_BOOT_COMPLETED.equals(intent.getAction())) {
>                         Log.d(TAG,"Starting Wifi now");
>                         boolean enable = Prefs.getBoolean(context, "wifiEnabled", false);
>                         if (enable) {
>                             wm.setWifiEnabled(true);
>                             Prefs.remove(context, "wifiEnabled");
>                         }
>                     } else if (Intent.ACTION_SHUTDOWN.equals(intent.getAction())) {
>                         if (wm.isWifiEnabled()) {
>                             Prefs.putBoolean(context, "wifiEnabled", true);
>                             wm.setWifiEnabled(false);
>                         }
>                     }
>                 }
>             }, bootToostFilter);
>         }
>     }
>     // AW:Added for BOOTEVENT
>     private static boolean sBootEventenable = SystemProperties.getBoolean("persist.sys.bootevent", true);
>     static void logBootEvent(String bootevent) {
>         if (!sBootEventenable) {
>             return ;
>         }
>         FileOutputStream fos =null;
>         try {
>             fos = new FileOutputStream("/proc/bootevent");
>             fos.write(bootevent.getBytes());
>             fos.flush();
>         } catch (FileNotFoundException e) {
>             Log.e("BOOTEVENT","Failure open /proc/bootevent,not found!",e);
>         } catch (java.io.IOException e) {
>             Log.e("BOOTEVENT","Failure open /proc/bootevent entry",e);
>         } finally {
>             if (fos != null) {
>                 try {
>                     fos.close();
>                 } catch (IOException e) {
>                     Log.e ("BOOTEVENT","Failure close /proc/bootevent entry",e);
>                 }
>             }
>         }
181a289
>         mNames = services;
196a305,306
>         // AW:Added for BOOTEVENT
>         logBootEvent("SystemUIService:Starting SystemUI services");
204a315,317
>             if (!mBootCompleteCache.isBootComplete() && !mBaseStartServices.contains(clsName)) {
>                 continue;
>             }
231a345,350
> 
>             if (ti > 30) {
>                 // AW:Added for BOOTEVENT
>                 logBootEvent("SystemUIService: running " + clsName + " took " + ti + " ms");
>             }
> 
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/packages/SystemUI/src/com/android/systemui/tv/TvSystemUIModule.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/packages/SystemUI/src/com/android/systemui/tv/TvSystemUIModule.java
54d53
< import com.android.systemui.statusbar.phone.DozeServiceHost;
57,58d55
< import com.android.systemui.statusbar.phone.KeyguardEnvironmentImpl;
< import com.android.systemui.statusbar.phone.NotificationShadeWindowControllerImpl;
60,61d56
< import com.android.systemui.statusbar.phone.ShadeControllerImpl;
< import com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager;
71a67,71
> import com.android.systemui.statusbar.tv.TvDozeServiceHost;
> import com.android.systemui.statusbar.tv.TvKeyguardEnvironmentImpl;
> import com.android.systemui.statusbar.tv.TvShadeController;
> import com.android.systemui.statusbar.tv.TvStatusBarKeyguardViewManager;
> import com.android.systemui.statusbar.tv.TvNotificationShadeWindowControllerImpl;
147c147,149
<             KeyguardEnvironmentImpl keyguardEnvironment);
---
>     ///AW CODE:[fix] tv support.  2021.11.22
>             TvKeyguardEnvironmentImpl keyguardEnvironment);
>     /// AW:add end
150c152,154
<     abstract ShadeController provideShadeController(ShadeControllerImpl shadeController);
---
>     ///AW CODE:[fix] tv support.  2021.11.22
>     abstract ShadeController provideShadeController(TvShadeController shadeController);
>     /// AW:add end
187c191,193
<             StatusBarKeyguardViewManager statusBarKeyguardViewManager);
---
>     ///AW CODE:[fix] tv support.  2021.11.22
>             TvStatusBarKeyguardViewManager statusBarKeyguardViewManager);
>     /// AW:add end
191c197,199
<             NotificationShadeWindowControllerImpl notificationShadeWindowController);
---
>     ///AW CODE:[fix] tv support.  2021.11.22
>             TvNotificationShadeWindowControllerImpl notificationShadeWindowController);
>     /// AW:add end
194c202,204
<     abstract DozeHost provideDozeHost(DozeServiceHost dozeServiceHost);
---
>     ///AW CODE:[fix] tv support.  2021.11.22
>     abstract DozeHost provideDozeHost(TvDozeServiceHost dozeServiceHost);
>     /// AW:add end
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/packages/SystemUI/src/com/android/systemui/util/Utils.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/packages/SystemUI/src/com/android/systemui/util/Utils.java
38a39,40
>     public static boolean mRadioAvailable = false;
> 
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/packages/SystemUI/src/com/android/systemui/volume/VolumeDialogControllerImpl.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/packages/SystemUI/src/com/android/systemui/volume/VolumeDialogControllerImpl.java
54a55,57
> import android.view.WindowManager;
> import android.view.Surface;
> import android.view.View;
468a472,477
> 	//AW_CODE fix systemUI crash when changed Volume in angle error
> 	int angle = ((WindowManager)mContext.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay().getRotation();
> 	if (angle != 0) {
> 	    Slog.d("AW_CODE","THE wm angle is error");
> 	    return false;
>         }
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/base/packages/SystemUI/tests/src/com/android/systemui/controls/ui: DetailDialogTest.kt
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/packages/SystemUI/tests/src/com/android/systemui/statusbar/notification/stack/NotificationStackScrollerControllerTest.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/packages/SystemUI/tests/src/com/android/systemui/statusbar/notification/stack/NotificationStackScrollerControllerTest.java
76a77
> import com.android.systemui.statusbar.policy.DeviceProvisionedController;
100a102
>     @Mock private DeviceProvisionedController mDeviceProvisionedController;
155a158
>                 mDeviceProvisionedController,
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/packages/SystemUI/tests/src/com/android/systemui/statusbar/notification/stack/NotificationStackScrollLayoutTest.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/packages/SystemUI/tests/src/com/android/systemui/statusbar/notification/stack/NotificationStackScrollLayoutTest.java
292a293,294
>         mStackScroller.setCurrentUserSetup(true);
> 
301a304
>         mStackScroller.setCurrentUserSetup(true);
320a324
>         mStackScroller.setCurrentUserSetup(true);
333a338,353
>     public void testUpdateFooter_oneClearableNotification_beforeUserSetup() {
>         setBarStateForTest(StatusBarState.SHADE);
>         mStackScroller.setCurrentUserSetup(false);
> 
>         when(mEmptyShadeView.getVisibility()).thenReturn(GONE);
>         when(mStackScrollLayoutController.hasActiveClearableNotifications(ROWS_ALL))
>                 .thenReturn(true);
>         when(mStackScrollLayoutController.hasActiveNotifications()).thenReturn(true);
> 
>         FooterView view = mock(FooterView.class);
>         mStackScroller.setFooterView(view);
>         mStackScroller.updateFooter();
>         verify(mStackScroller).updateFooterView(false, true, true);
>     }
> 
>     @Test
335a356
>         mStackScroller.setCurrentUserSetup(true);
353a375,376
>         mStackScroller.setCurrentUserSetup(true);
> 
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/Android.bp /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/Android.bp
152c152
<         "android.hardware.configstore-V1.0-java",
---
>         "android.hardware.configstore-V1.1-java",
163a164
>         "libeink",
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/accounts/AccountManagerService.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/accounts/AccountManagerService.java
4949,4951c4949,4954
<             if (mAuthenticator != null) {
<                 mAuthenticator = null;
<                 mContext.unbindService(this);
---
>             ///AW CODE:[fix]#55561 system_server crash brcause Null Pointer Exception.  2021.11.22
>             synchronized (this){
>                 if (mAuthenticator != null) {
>                     mAuthenticator = null;
>                     mContext.unbindService(this);
>                 }
4952a4956
>             /// AW:add end
4961,4966c4965,4974
<             mAuthenticator = IAccountAuthenticator.Stub.asInterface(service);
<             try {
<                 run();
<             } catch (RemoteException e) {
<                 onError(AccountManager.ERROR_CODE_REMOTE_EXCEPTION,
<                         "remote exception");
---
>             ///AW CODE:[fix]#55561 system_server crash brcause Null Pointer Exception.  2021.11.22
>             synchronized (this){
>                 mAuthenticator = IAccountAuthenticator.Stub.asInterface(service);
>                 if (mAuthenticator == null) return;
>                 try {
>                     run();
>                 } catch (RemoteException e) {
>                     onError(AccountManager.ERROR_CODE_REMOTE_EXCEPTION,
>                             "remote exception");
>                 }
4967a4976
>             /// AW:add end
4972,4981c4981,4993
<             mAuthenticator = null;
<             IAccountManagerResponse response = getResponseAndClose();
<             if (response != null) {
<                 try {
<                     response.onError(AccountManager.ERROR_CODE_REMOTE_EXCEPTION,
<                             "disconnected");
<                 } catch (RemoteException e) {
<                     if (Log.isLoggable(TAG, Log.VERBOSE)) {
<                         Log.v(TAG, "Session.onServiceDisconnected: "
<                                 + "caught RemoteException while responding", e);
---
>             ///AW CODE:[fix]#55561 system_server crash brcause Null Pointer Exception.  2021.11.22
>             synchronized (this){
>                 mAuthenticator = null;
>                 IAccountManagerResponse response = getResponseAndClose();
>                 if (response != null) {
>                     try {
>                         response.onError(AccountManager.ERROR_CODE_REMOTE_EXCEPTION,
>                                 "disconnected");
>                     } catch (RemoteException e) {
>                         if (Log.isLoggable(TAG, Log.VERBOSE)) {
>                             Log.v(TAG, "Session.onServiceDisconnected: "
>                                     + "caught RemoteException while responding", e);
>                         }
4984a4997
>             /// AW:add end
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java
195a196
> import android.aw.BackgroundManager;
239a241,244
> 
> 
> import android.hardware.power.Mode;
> 
375a381
> import com.android.server.ZramWriteback;
399a406,408
> // AW:add for BOOTEVENT
> import com.aw.server.AwSystemServer;
> 
723a733,734
>     // AW:add for BOOTEVENT
>     private static AwSystemServer sAwSystemServerIns = AwSystemServer.getInstance();
4666a4678,4689
>     /*AW_CODE:flush zram,luoweijian*/
>     private void refreshZramWriteback() {
>         Slog.d(TAG,"refreshZramWriteback");
>         String ZRAM_ENABLED_PROPERTY = "persist.sys.zram_enabled";
>         String propertyValue = SystemProperties.get(ZRAM_ENABLED_PROPERTY);
>         if ("1".equals(propertyValue)) {
>             Slog.d(TAG,"real start flush");
>             ZramWriteback.flushZramPages(mContext);
>         }
>     }
>     /*AW_CODE:end*/
> 
4750a4774,4796
>             /*AW_CODE:This for nand device set io scheduler.luoweijian*/
>             mHandler.postDelayed(() -> {SystemProperties.set("debug.launcher3.exit", "1");}, 20 * 1000);
>             /*AW_CODE:end*/
> 
>             /*AW_CODE: dram size < 2G,flush zram to disk.luoweijian*/
>             try {
>                 final ActivityManager.MemoryInfo info = new ActivityManager.MemoryInfo();
>                 ActivityManager.getService().getMemoryInfo(info);
>                 if(info.totalMem < (2.0f * 1024 * 1024 * 1024)) {
>                     refreshZramWriteback();
>                 }
>             } catch (RemoteException e) {
>                 Slog.d(TAG,"Cannot obtain MemoryInfo");
>             }
>             /*AW_CODE:end*/
> 
>             //AW:BOOTEVENT
>             sAwSystemServerIns.logBootEvent("AMS:set sys.boot_completed true");
>             if (SystemProperties.getBoolean("persist.sys.boot.first", true)
>                 && SystemProperties.get("ro.product.cpu.abi").equals("armeabi-v7a") ) {
>                 Slog.d(TAG, "set persist.sys.boot.first to false");
>                 SystemProperties.set("persist.sys.boot.first", "false");
>             }
4771c4817,4844
<         // UART is on if init's console service is running, send a warning notification.
---
> 
>         /*AW_code: add screen_receiver operation with power_hal
>         *set tp suspend --author:jiangbin 200910
>         */
>        if(Build.DROIDBOOST_ENABLED) {
>            IntentFilter boostFilter = new IntentFilter();
>            boostFilter.addAction(Intent.ACTION_SCREEN_ON);
>            boostFilter.addAction(Intent.ACTION_SCREEN_OFF);
>            mContext.registerReceiver(new BroadcastReceiver() {
>                @Override
>                public void onReceive(Context context, Intent intent) {
>                     String action = intent.getAction();
>                     if(mLocalPowerManager != null) {
>                        if((Intent.ACTION_SCREEN_OFF).equals(intent.getAction())) {
>                            Slog.i("POWERHINT","screen OFF");
>                            mLocalPowerManager.setPowerMode(Mode.LOW_POWER,true);
>                         }
>                        if ((Intent.ACTION_SCREEN_ON).equals(intent.getAction())) {
>                           Slog.i("POWERHINT","screen on");
>                           mLocalPowerManager.setPowerMode(Mode.LOW_POWER,false);
>                         }
>                     }
>                 }
>            }, boostFilter);
>            /*end*/
>          }
> 
>          // UART is on if init's console service is running, send a warning notification.
4773a4847,4848
> 
> 
7506a7582,7583
>         // AW:BOOTEVENT
>         sAwSystemServerIns.logBootEvent("AMS:systemReady");
7573a7651,7652
>         // AW:BOOTEVENT
>         sAwSystemServerIns.logBootEvent("AMS:AMS_READY");
11832a11912
>         if (BackgroundManager.skipService(service, callingPackage)) return null;
11990a12071
>         if (BackgroundManager.skipService(service, callingPackage)) return 0;
13378a13460,13461
>             } else {
>                 skipPackages = BackgroundManager.resolverReceiver(intent, receivers);
15843a15927
>             if (BackgroundManager.skipService(service, callingPackage)) return null;
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/am/BroadcastQueue.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/am/BroadcastQueue.java
1571,1575d1570
<                 if (perm == PackageManager.PERMISSION_GRANTED) {
<                     skip = true;
<                     break;
<                 }
< 
1578c1573,1577
<                     if (mService.getAppOpsManager().checkOpNoThrow(appOp,
---
>                     // When there is an app op associated with the permission,
>                     // skip when both the permission and the app op are
>                     // granted.
>                     if ((perm == PackageManager.PERMISSION_GRANTED) && (
>                                 mService.getAppOpsManager().checkOpNoThrow(appOp,
1581c1580,1587
<                             == AppOpsManager.MODE_ALLOWED) {
---
>                             == AppOpsManager.MODE_ALLOWED)) {
>                         skip = true;
>                         break;
>                     }
>                 } else {
>                     // When there is no app op associated with the permission,
>                     // skip when permission is granted.
>                     if (perm == PackageManager.PERMISSION_GRANTED) {
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/am/CachedAppOptimizer.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/am/CachedAppOptimizer.java
103c103
<     @VisibleForTesting static final Boolean DEFAULT_USE_COMPACTION = false;
---
>     @VisibleForTesting static final Boolean DEFAULT_USE_COMPACTION = true;//AW_CODE
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/am/OomAdjuster.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/am/OomAdjuster.java
1198,1202c1198,1205
<                             app.killLocked("empty for " + ((oldTime + ProcessList.MAX_EMPTY_TIME
<                                     - app.getLastActivityTime()) / 1000) + "s",
<                                     ApplicationExitInfo.REASON_OTHER,
<                                     ApplicationExitInfo.SUBREASON_TRIM_EMPTY,
<                                     true);
---
>                             /*AW_CODE;reseve-process use new empty-time for performance;210708*/
>                             if(app.getWindowProcessController().mReseveProcessTime < oldTime) {
>                                 app.killLocked("empty for " + ((oldTime + ProcessList.MAX_EMPTY_TIME
>                                         - app.getLastActivityTime()) / 1000) + "s",
>                                         ApplicationExitInfo.REASON_OTHER,
>                                         ApplicationExitInfo.SUBREASON_TRIM_EMPTY,
>                                         true);
>                             }
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/am/ProcessList.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/am/ProcessList.java
161a162,164
> // AW:add for BOOTEVENT
> import com.aw.server.AwSystemServer;
> 
554a558,559
>     // AW:add for BOOTEVENT
>     private static AwSystemServer sAwSystemServerIns = AwSystemServer.getInstance();
2658a2664,2669
>         if(app.processName.equals("com.android.settings") ||
>             app.processName.equals("com.android.launcher3")) {
>             sAwSystemServerIns.logBootEvent("AM_PROC_START:starProcess "
>                                + app.getHostingRecord().getName());
>         }
> 
2680a2692,2707
>         Slog.i(TAG,"app.processName = " + app.processName);
>         if(app.processName.equals("com.android.cts.media") ||
>             app.processName.equals("android.media.cts") ||
>             app.processName.equals("android.security.cts") ||
>             app.processName.equals("android.view.cts") ||
>             app.processName.equals("android.drm.cts") ||
>             app.processName.equals("com.google.android.media.gts") ||
>             app.processName.equals("android.video.cts") ||
>             app.processName.equals("android.provider.cts") ||
>             app.processName.equals("android.mediaprovidertranscode.cts") ||
>             app.processName.equals("com.android.server.cts.device.statsd") ||
>             app.processName.equals("com.android.server.cts.device.statsdatom")) {
>             SystemProperties.set("persist.sys.cts",app.processName);
>             Slog.i(TAG,"check file.");
>         }
> 
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/am/UserController.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/am/UserController.java
116a117,119
> // AW:add for BOOTEVENT
> import com.aw.server.AwSystemServer;
> 
242a246,247
>     // AW:add for BOOTEVENT
>     private static AwSystemServer sAwSystemServerIns = AwSystemServer.getInstance();
527a533,534
>             // AW:add for BOOTEVENT
>             sAwSystemServerIns.logBootEvent("ActivityManager:Finished locked boot");
587,598c594,602
<         // Call onBeforeUnlockUser on a worker thread that allows disk I/O
<         FgThread.getHandler().post(() -> {
<             if (!StorageManager.isUserKeyUnlocked(userId)) {
<                 Slogf.w(TAG, "User key got locked unexpectedly, leaving user locked.");
<                 return;
<             }
<             mInjector.getUserManager().onBeforeUnlockUser(userId);
<             synchronized (mLock) {
<                 // Do not proceed if unexpected state
<                 if (!uss.setState(STATE_RUNNING_LOCKED, STATE_RUNNING_UNLOCKING)) {
<                     return;
<                 }
---
>         if (!StorageManager.isUserKeyUnlocked(userId)) {
>             Slogf.w(TAG, "User key got locked unexpectedly, leaving user locked.");
>             return false;
>         }
>         mInjector.getUserManager().onBeforeUnlockUser(userId);
>         synchronized (mLock) {
>             // Do not proceed if unexpected state
>             if (!uss.setState(STATE_RUNNING_LOCKED, STATE_RUNNING_UNLOCKING)) {
>                 return false;
600c604,605
<             mInjector.getUserManagerInternal().setUserState(userId, uss.state);
---
>         }
>         mInjector.getUserManagerInternal().setUserState(userId, uss.state);
602c607
<             uss.mUnlockProgress.setProgress(20);
---
>         uss.mUnlockProgress.setProgress(20);
604,607c609,611
<             // Dispatch unlocked to system services; when fully dispatched,
<             // that calls through to the next "unlocked" phase
<             mHandler.obtainMessage(USER_UNLOCK_MSG, userId, 0, uss).sendToTarget();
<         });
---
>         // Dispatch unlocked to system services; when fully dispatched,
>         // that calls through to the next "unlocked" phase
>         mHandler.obtainMessage(USER_UNLOCK_MSG, userId, 0, uss).sendToTarget();
773,789c777,790
<         FgThread.getHandler().post(() -> {
<             mInjector.broadcastIntent(bootIntent, null,
<                     new IIntentReceiver.Stub() {
<                         @Override
<                         public void performReceive(Intent intent, int resultCode, String data,
<                                 Bundle extras, boolean ordered, boolean sticky, int sendingUser)
<                                         throws RemoteException {
<                             Slogf.i(UserController.TAG, "Finished processing BOOT_COMPLETED for u"
<                                     + userId);
<                             mBootCompleted = true;
<                         }
<                     }, 0, null, null,
<                     new String[]{android.Manifest.permission.RECEIVE_BOOT_COMPLETED},
<                     AppOpsManager.OP_NONE,
<                     getTemporaryAppAllowlistBroadcastOptions(REASON_BOOT_COMPLETED).toBundle(),
<                     true, false, MY_PID, SYSTEM_UID, callingUid, callingPid, userId);
<         });
---
>         mInjector.broadcastIntent(bootIntent, null,
>                 new IIntentReceiver.Stub() {
>                     @Override
>                     public void performReceive(Intent intent, int resultCode, String data,
>                             Bundle extras, boolean ordered, boolean sticky, int sendingUser)
>                                     throws RemoteException {
>                         Slogf.i(UserController.TAG, "Finished processing BOOT_COMPLETED for u"
>                                 + userId);
>                         mBootCompleted = true;
>                     }
>                 }, 0, null, null,
>                 new String[]{android.Manifest.permission.RECEIVE_BOOT_COMPLETED},
>                 AppOpsManager.OP_NONE, null, true, false, MY_PID, SYSTEM_UID,
>                 callingUid, callingPid, userId);
1259,1264c1260,1263
<         FgThread.getHandler().post(() -> {
<             if (!mHandler.hasMessages(START_PROFILES_MSG)) {
<                 mHandler.sendMessageDelayed(mHandler.obtainMessage(START_PROFILES_MSG),
<                         DateUtils.SECOND_IN_MILLIS);
<             }
<         });
---
>         if (!mHandler.hasMessages(START_PROFILES_MSG)) {
>             mHandler.sendMessageDelayed(mHandler.obtainMessage(START_PROFILES_MSG),
>                     DateUtils.SECOND_IN_MILLIS);
>         }
2665,2668c2664
<                 // Loads recents on a worker thread that allows disk I/O
<                 FgThread.getHandler().post(() -> {
<                     mInjector.loadUserRecents(userId);
<                 });
---
>                 mInjector.loadUserRecents(userId);
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server: BluetoothIncomingFileRequest.java
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/display/DisplayManagerService.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/display/DisplayManagerService.java
195c195,197
<     private static final float THRESHOLD_FOR_REFRESH_RATES_DIVIDERS = 0.1f;
---
>     // This value needs to be in sync with the threshold
>     // in RefreshRateConfigs::getFrameRateDivider.
>     private static final float THRESHOLD_FOR_REFRESH_RATES_DIVIDERS = 0.0009f;
815c817
<         // in RefreshRateConfigs::getRefreshRateDividerForUid
---
>         // in RefreshRateConfigs::getFrameRateDivider
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/display/DisplayPowerState.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/display/DisplayPowerState.java
82,83d81
<         mPhotonicModulator = new PhotonicModulator();
<         mPhotonicModulator.start();
95d92
<         scheduleScreenUpdate();
99a97,108
> 
>         // AW CODE: make screen state initialize int PhotonicModulator thread.
>         float brightnessState = mScreenState != Display.STATE_OFF
>                 && mColorFadeLevel > 0f ? mScreenBrightness : PowerManager.BRIGHTNESS_OFF_FLOAT;
>         float sdrBrightnessState = mScreenState != Display.STATE_OFF
>                 && mColorFadeLevel > 0f
>                         ? mSdrScreenBrightness : PowerManager.BRIGHTNESS_OFF_FLOAT;
>         mPhotonicModulator = new PhotonicModulator();
>         mPhotonicModulator.setState(mScreenState, brightnessState, sdrBrightnessState);
>         mPhotonicModulator.start();
>         scheduleScreenUpdate();
>         // AW CODE end
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/ExtconUEventObserver.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/ExtconUEventObserver.java
142,147c142,149
<                 String extconPath = String.format(Locale.US, "/sys/class/extcon/%s", mName);
<                 File devPath = new File(extconPath);
<                 if (devPath.exists()) {
<                     String canonicalPath = devPath.getCanonicalPath();
<                     int start = canonicalPath.indexOf("/devices");
<                     return canonicalPath.substring(start);
---
>                 File extconDir = new File("/sys/class/extcon/");
>                 for (File file : extconDir.listFiles()) {
>                     String path = file.getCanonicalPath();
>                     if (path.indexOf(mName) > 0 && file.isDirectory()) {
>                         String canonicalPath = file.getCanonicalPath();
>                         int start = canonicalPath.indexOf("/devices");
>                         return canonicalPath.substring(start);
>                     }
161a164,179
>     private static String FilenameExtconByName(String name) {
>         File extconDir = new File("/sys/class/extcon/");
>         try {
>             for (File file : extconDir.listFiles()) {
>                 String path = file.getCanonicalPath();
>                 if (path.indexOf(name) > 0 && file.isDirectory()) {
>                     Slog.d(TAG, "FilenameExtconByName: " + file.getPath());
>                     return file.getPath();
>                 }
>             }
>         } catch (IOException e) {
>             Slog.e(TAG, "Could not get the extcon device path for " + name, e);
>         }
>         return null;
>       }
> 
164,165c182
<         File extconDir = new File("/sys/class/extcon/" + name);
<         return extconDir.exists() && extconDir.isDirectory();
---
>         return FilenameExtconByName(name) != null;
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/hdmi/HdmiCecLocalDevice.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/hdmi/HdmiCecLocalDevice.java
647a648,653
>         /// AW CODE: [feat] HDMI-CEC: Support language and input passthrough switch
>         if (!mService.isInputPassthroughEnabled()) {
>             return Constants.NOT_HANDLED;
>         }
>         /// AW: add end
> 
715a722,727
>         /// AW CODE: [feat] HDMI-CEC: Support language and input passthrough switch
>         if (!mService.isInputPassthroughEnabled()) {
>             return Constants.NOT_HANDLED;
>         }
>         /// AW: add end
> 
1173a1186,1191
>         /// AW CODE: [feat] HDMI-CEC: Support language and input passthrough switch
>         if (!mService.isInputPassthroughEnabled()) {
>             return;
>         }
>         /// AW: add end
> 
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/hdmi/HdmiCecLocalDevicePlayback.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/hdmi/HdmiCecLocalDevicePlayback.java
26a27,28
> import android.provider.Settings;
> import android.provider.Settings.Global;
271a274,278
>         /// AW CODE: [feat] HDMI-CEC: Support language and input passthrough switch
>         if (!mService.isSetLanguageEnabled()) {
>             return Constants.NOT_HANDLED;
>         }
>         /// AW: add end
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/hdmi/HdmiControlService.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/hdmi/HdmiControlService.java
77a78
> import android.provider.Settings;
341a343,350
>     /// AW CODE: [feat] HDMI-CEC: Support language and input passthrough switch
>     @GuardedBy("mLock")
>     private boolean mSetLanguageEnabled;
> 
>     @GuardedBy("mLock")
>     private boolean mInputPassthroughEnabled;
>     /// AW: add end.
> 
597a607,612
>         /// AW CODE: [feat] HDMI-CEC: Support language and input passthrough switch
>         mSetLanguageEnabled = readBooleanSetting(Global.HDMI_CONTROL_AUTO_SET_LANGUAGE, false);
>         mInputPassthroughEnabled = readBooleanSetting(Global.HDMI_CONTROL_AUTO_INPUT_PASSTHROUGH, false);
>         writeBooleanSetting(Settings.Global.HDMI_CONTROL_ENABLED, mHdmiControlEnabled == 1);
>         /// AW: add end.
> 
636c651,654
<             mPowerStatusController.setPowerStatus(HdmiControlManager.POWER_STATUS_ON);
---
>             /// AW CODE: [feat] box turned on -> tv turned on
>             //mPowerStatusController.setPowerStatus(HdmiControlManager.POWER_STATUS_ON);
>             onWakeUp(WAKE_UP_SCREEN_ON);
>             /// AW: add end.
765c783,787
<                 Global.DEVICE_NAME
---
>                 Global.DEVICE_NAME,
>                 /// AW CODE: [feat] HDMI-CEC: Support language and input passthrough switch
>                 Global.HDMI_CONTROL_AUTO_DEVICE_OFF_ENABLED,
>                 Global.HDMI_CONTROL_AUTO_SET_LANGUAGE
>                 /// AW: add end.
820a843,851
>                 /// AW CODE: [feat] HDMI-CEC: Support language and input passthrough switch
>                 case Global.HDMI_CONTROL_AUTO_SET_LANGUAGE:
>                     setSetLanguageEnabled(enabled);
>                     break;
>                 case Global.HDMI_CONTROL_AUTO_INPUT_PASSTHROUGH:
>                     setInputPassthroughEnabled(enabled);
>                     break;
>                 /// AW: add end
> 
2310a2342,2346
>             /// AW CODE: [feat] HDMI-CEC: Support language and input passthrough switch
>             pw.println("mHdmiControlEnabled: " + mHdmiControlEnabled);
>             pw.println("mSetLanguageEnabled: " + mSetLanguageEnabled);
>             pw.println("mInputPassthroughEnabled: " + mInputPassthroughEnabled);
>             /// AW: add end.
3006a3043,3072
>     /// AW CODE: [feat] HDMI-CEC: Support language and input passthrough switch
>     boolean isSetLanguageEnabled() {
>         synchronized (mLock) {
>             return mSetLanguageEnabled;
>         }
>     }
> 
>     @ServiceThreadOnly
>     void setSetLanguageEnabled(boolean enabled) {
>         assertRunOnServiceThread();
>         synchronized (mLock) {
>             mSetLanguageEnabled = enabled;
>         }
>     }
> 
>     boolean isInputPassthroughEnabled() {
>         synchronized (mLock) {
>             return mInputPassthroughEnabled;
>         }
>     }
> 
>     @ServiceThreadOnly
>     void setInputPassthroughEnabled(boolean enabled) {
>         assertRunOnServiceThread();
>         synchronized (mLock) {
>             mInputPassthroughEnabled = enabled;
>         }
>     }
>     /// AW: add end.
> 
3349d3414
< 
3353c3418,3420
< 
---
>         /// AW CODE: [feat] HDMI-CEC: Support language and input passthrough switch
>         writeBooleanSetting(Settings.Global.HDMI_CONTROL_ENABLED, true);
>         /// AW: add end.
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/input/InputManagerService.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/input/InputManagerService.java
310a311,315
> 
>     /// AW CODE[feat]hide mouse icon when exit mouse mode
>     private static native void nativeSetHidePointerIcon(long ptr, boolean hide);
>     /// AW CODE:add end
> 
3462a3468,3473
> 
>         /// AW CODE[feat]hide mouse icon when exit mouse mode
>         public void setHidePointerIcon(boolean hide) {
>             nativeSetHidePointerIcon(mPtr, hide);
>         }
>         /// AW CODE:add end
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/location/injector/LocationPermissionsHelper.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/location/injector/LocationPermissionsHelper.java
103c103
<         return mAppOps.checkOpNoThrow(permissionLevel, identity);
---
>         return mAppOps.checkOpNoThrow(LocationPermissions.asAppOp(permissionLevel), identity);
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/location/provider/LocationProviderManager.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/location/provider/LocationProviderManager.java
1081c1081
<             if (e instanceof RemoteException) {
---
>             if (e instanceof PendingIntent.CanceledException) {
1963,1967d1962
<         if (mDelayedRegister != null) {
<             mAlarmHelper.cancel(mDelayedRegister);
<             mDelayedRegister = null;
<         }
< 
2000d1994
<                             setProviderRequest(newRequest);
2001a1996
>                             setProviderRequest(newRequest);
2027a2023,2027
>         if (mDelayedRegister != null) {
>             mAlarmHelper.cancel(mDelayedRegister);
>             mDelayedRegister = null;
>         }
> 
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/net/IpConfigStore.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/net/IpConfigStore.java
42a43
> import java.net.Inet6Address;
322a324,335
>                                 }
>                                 if (dest == null) {
>                                     if (gateway != null) {
>                                         if (gateway instanceof Inet4Address) {
>                                             dest = new LinkAddress(Inet4Address.ANY, 0);
>                                         } else {
>                                             dest = new LinkAddress(Inet6Address.ANY, 0);
>                                         }
>                                     } else {
>                                         throw new IllegalArgumentException("Invalid arguments passed in: " + gateway
>                                             + "," + dest);
>                                     }
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/net/NetworkStatsCollection.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/net/NetworkStatsCollection.java
293c293,294
<             final long rawBytes = entry.rxBytes + entry.txBytes;
---
>             final long rawBytes = (entry.rxBytes + entry.txBytes) == 0 ? 1 :
>                     (entry.rxBytes + entry.txBytes);
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/oemlock/PersistentDataBlockLock.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/oemlock/PersistentDataBlockLock.java
66,67c66
<         return !UserManager.get(mContext)
<                 .hasUserRestriction(UserManager.DISALLOW_OEM_UNLOCK, UserHandle.SYSTEM);
---
>         return true;
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/om/OverlayManagerService.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/om/OverlayManagerService.java
73a74
> import android.util.EventLog;
84d84
< 
287a288,293
>             // Wipe all shell overlays on boot, to recover from a potentially broken device
>             String shellPkgName = TextUtils.emptyIfNull(
>                     getContext().getString(android.R.string.config_systemShell));
>             mSettings.removeIf(overlayInfo -> overlayInfo.isFabricated
>                     && shellPkgName.equals(overlayInfo.packageName));
> 
893a900,909
> 
>                 // Normal apps are blocked from accessing OMS via SELinux, so to block non-root,
>                 // non privileged callers, a simple check against the shell UID is sufficient, since
>                 // that's the only exception from the other categories. This is enough while OMS
>                 // is not a public API, but this will have to be changed if it's ever exposed.
>                 if (callingUid == Process.SHELL_UID) {
>                     EventLog.writeEvent(0x534e4554, "202768292", -1, "");
>                     throw new IllegalArgumentException("Non-root shell cannot fabricate overlays");
>                 }
> 
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/os/NativeTombstoneManager.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/os/NativeTombstoneManager.java
358,359c358,360
< 
<             if (Math.abs(exitInfo.getTimestamp() - mTimestampMs) > 1000) {
---
>             // AW_CODE: our devices is slowly, tombstone file collect maybe more than 1s.
>             // if (Math.abs(exitInfo.getTimestamp() - mTimestampMs) > 1000) {
>             if (Math.abs(exitInfo.getTimestamp() - mTimestampMs) > 2000) {
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/pm/BackgroundDexOptService.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/pm/BackgroundDexOptService.java
71c71,73
< 
---
>     ///AW CODE:[DroidBoost]#system ui optimize
>     private static final int JOB_SYSTEM_UI_OPTIMIZE = 802;
>     // AW:add end
142a145,150
>                 ///AW CODE:[DroidBoost]#system ui optimize
>                 js.schedule(new JobInfo.Builder(JOB_SYSTEM_UI_OPTIMIZE, sDexoptServiceName)
>                         .setMinimumLatency(TimeUnit.MINUTES.toMillis(1))
>                         .setOverrideDeadline(TimeUnit.MINUTES.toMillis(2))
>                         .build());
>                 /// AW:add end
154c162
<                     .setRequiresCharging(true)
---
>                     .setRequiresBatteryNotLow(true)//setRequiresCharging(true)/*AW_CODE;do not need charging for optimize faster;jiangbin;191011*/
418a427,437
>         /*AW_code;add check powerlaunchcall flag;jiangbin;200918*/
>         boolean ispowerlaunchcall = false;
>         for(int i=0;i<pkgs.size();i++) {
>             if(pkgs.valueAt(i).equals("PowerLaunchCall")){
>                 pkgs.removeAt(i);
>                 ispowerlaunchcall = true;
>                break;
>             }
>         }
>         /*end*/
> 
424a444
>             boolean dexOptPerformed = optimizePackage(pm, pkg, isForPrimaryDex,ispowerlaunchcall);//AW_CODE;jiangbin
426d445
<             boolean dexOptPerformed = optimizePackage(pm, pkg, isForPrimaryDex);
500c519
<             boolean isForPrimaryDex) {
---
>             boolean isForPrimaryDex, boolean isPowerLaunchcall) {
504a524,528
>         /*AW_CODE; set flag for PGO-immediately;jiangbin;191009*/
>         if(isPowerLaunchcall) {
>          dexoptFlags |= DexoptOptions.DEXOPT_LAUNCHED_WITH_PGO;
>         }
>         /*end*/
647a672,680
>         ///AW CODE:[DroidBoost]#system ui optimize
>         if (params.getJobId() == JOB_SYSTEM_UI_OPTIMIZE) {
>             final ArraySet<String> pkgList = new ArraySet<>();
>             pkgList.add("com.android.systemui");
>             pkgList.add("com.android.providers.telephony");
>             pkgList.add("com.android.providers.settings");
>             return runIdleOptimization(params, pm, pkgList);
>         }
>         /// AW:add end
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/pm/CompilerStats.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/pm/CompilerStats.java
63a64,66
>         private long lastCompiledTime; //record last compiled time for limit launch-pgo-compile;jiangbin;200605
> 
> 
91a95,105
>         /*AW_CODE:record last compiled time for limit launch-pgo-compile;jiangbin;200605*/
>         public long getLastCompiledTime() {
>             synchronized (compileTimePerCodePath) {
>                 return lastCompiledTime;
>             }
>         }
> 
>         /*end*/
> 
> 
> 
99a114,115
>                 lastCompiledTime = System.currentTimeMillis();//jiangbin;200605
> 
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/pm/dex/DexoptOptions.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/pm/dex/DexoptOptions.java
73a74,77
>     /*AW_CODE;add dexopt flag for PGO-immediately;jiangbin;191009*/
>     public static final int DEXOPT_LAUNCHED_WITH_PGO = 1 << 30;
>     /*end*/
> 
113c117,119
<                 DEXOPT_FOR_RESTORE;
---
>                 DEXOPT_FOR_RESTORE |
>                 DEXOPT_LAUNCHED_WITH_PGO;//AW_CODE;jiangbin
> 
171a178,184
> 
>     /*AW_CODE; get flag PGO-immediately;jiangbin;191009*/
>     public boolean isDexoptLaunchedWithPGO() {
>         return (mFlags & DEXOPT_LAUNCHED_WITH_PGO) != 0;
>     }
>     /*end*/
> 
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/pm/Installer.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/pm/Installer.java
110a111,116
>     /*AW_CODE;add dexopt flag for PGO-immediately;jiangbin;191009*/
>     public static final int DEXOPT_LAUNCHEDWITHPGO = 1 << 30;
>     /*end*/
> 
> 
> 
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/pm/PackageDexOptimizer.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/pm/PackageDexOptimizer.java
33a34,36
> 
> import static com.android.server.pm.Installer.DEXOPT_LAUNCHEDWITHPGO;//AW_CODE;jiangbin
> 
220a224,238
> 
> 
>         /*AW_CODE;limit launch-gpo from lastcompiletime;must check before CheckForProfileUpdates;jiangbin;200605*/
>         if(options.isDexoptLaunchedWithPGO() && (packageStats != null)) {
>             if((packageStats.getLastCompiledTime() != 0)
>             &&(System.currentTimeMillis()- packageStats.getLastCompiledTime() < 300000/*ms*/)) {
>                 Log.i(TAG,"Skip-lastcompiled time-launch-gpo ");
>                 return DEX_OPT_SKIPPED;
>             }
>         }
>         /*end*/
> 
> 
> 
> 
753c771,773
<                 | hiddenApiFlag;
---
>                 | hiddenApiFlag
>                 | (options.isDexoptLaunchedWithPGO() ? DEXOPT_LAUNCHEDWITHPGO : 0);//AW_CODE;jiangbin
> 
886a907,912
> 
>         /*AW_CODE;for debug;jiangbin;191011*/
>         if ((flags & DEXOPT_LAUNCHEDWITHPGO) == DEXOPT_LAUNCHEDWITHPGO) {
>             flagsList.add("launched_with_pgo");
>         }
>         /*end*/
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/pm/PackageInstallerService.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/pm/PackageInstallerService.java
137a138,139
>     /** Destroy sessions older than this on storage free request */
>     private static final long MAX_SESSION_AGE_ON_LOW_STORAGE_MILLIS = 8 * DateUtils.HOUR_IN_MILLIS;
337,344c339
<         final File stagingDir = getTmpSessionDir(volumeUuid);
<         final ArraySet<File> unclaimedStages = newArraySet(
<                 stagingDir.listFiles(sStageFilter));
< 
<         // We also need to clean up orphaned staging directory for staged sessions
<         final File stagedSessionStagingDir = Environment.getDataStagingDirectory(volumeUuid);
<         unclaimedStages.addAll(newArraySet(stagedSessionStagingDir.listFiles()));
< 
---
>         final ArraySet<File> unclaimedStages = getStagingDirsOnVolume(volumeUuid);
349a345,356
>         removeStagingDirs(unclaimedStages);
>     }
> 
>     private ArraySet<File> getStagingDirsOnVolume(String volumeUuid) {
>         final File stagingDir = getTmpSessionDir(volumeUuid);
>         final ArraySet<File> stagingDirs = newArraySet(stagingDir.listFiles(sStageFilter));
> 
>         // We also need to clean up orphaned staging directory for staged sessions
>         final File stagedSessionStagingDir = Environment.getDataStagingDirectory(volumeUuid);
>         stagingDirs.addAll(newArraySet(stagedSessionStagingDir.listFiles()));
>         return stagingDirs;
>     }
350a358
>     private void removeStagingDirs(ArraySet<File> stagingDirsToRemove) {
352c360
<         for (File stage : unclaimedStages) {
---
>         for (File stage : stagingDirsToRemove) {
363a372,398
>     }
> 
>     /**
>      * Called to free up some storage space from obsolete installation files
>      */
>     public void freeStageDirs(String volumeUuid) {
>         final ArraySet<File> unclaimedStagingDirsOnVolume = getStagingDirsOnVolume(volumeUuid);
>         final long currentTimeMillis = System.currentTimeMillis();
>         synchronized (mSessions) {
>             for (int i = 0; i < mSessions.size(); i++) {
>                 final PackageInstallerSession session = mSessions.valueAt(i);
>                 if (!unclaimedStagingDirsOnVolume.contains(session.stageDir)) {
>                     // Only handles sessions stored on the target volume
>                     continue;
>                 }
>                 final long age = currentTimeMillis - session.createdMillis;
>                 if (age >= MAX_SESSION_AGE_ON_LOW_STORAGE_MILLIS) {
>                     // Aggressively close old sessions because we are running low on storage
>                     // Their staging dirs will be removed too
>                     session.abandon();
>                 } else {
>                     // Session is new enough, so it deserves to be kept even on low storage
>                     unclaimedStagingDirsOnVolume.remove(session.stageDir);
>                 }
>             }
>         }
>         removeStagingDirs(unclaimedStagingDirsOnVolume);
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/pm/PackageInstallerSession.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/pm/PackageInstallerSession.java
676c676
<                 assertCallerIsOwnerOrRoot();
---
>                 assertCallerIsOwnerOrRootOrSystem();
3707c3707
<             assertCallerIsOwnerOrRoot();
---
>             assertCallerIsOwnerOrRootOrSystem();
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java
415a416,418
> // AW:add for BOOTEVENT
> import com.aw.server.AwSystemServer;
> 
476a480,481
> import java.nio.file.Files;
> import java.nio.file.Paths;
856a862,865
>     private final static File mFilterFile = new File(Environment.getOemDirectory() + File.separator + "delete.txt");
> 
>     private static Set<String> filterInstallApps;
> 
973a983,990
>     /*AW_code;powerlaunchcall background dex2oat optimize status;jiangbin;191012*/
>     private boolean mHaveLaunchedBdoTask = false;
>     private boolean mNeedStopLaunchedBdo = false;
>     public static final int LAUNCH_BDO_DELAY_TIME = 5000;//ms
>     /*end*/
> 
> 
> 
1719a1737,1738
>     // AW:add for BOOTEVENT
>     private static AwSystemServer sAwSystemServerIns = AwSystemServer.getInstance();
7042a7062,7063
>         // AW:BOOTEVENT
>         sAwSystemServerIns.logBootEvent("Android:PackageManagerService_Start");
7050a7072,7073
>         filterInstallApps = readFilterDeleteFileToSet();
> 
7239a7263,7264
>             // AW:BOOTEVENT
>             sAwSystemServerIns.logBootEvent("Android:PMS_scan_START");
7633a7659,7660
>             // AW:BOOTEVENT
>             sAwSystemServerIns.logBootEvent("Android:PMS_scan_END");
7760a7788,7790
>             // AW:BOOTEVENT
>             sAwSystemServerIns.logBootEvent("Android:PMS_READY");
> 
8964a8995,8998
> 
>             // 12. Clear temp install session files
>             mInstallerService.freeStageDirs(volumeUuid);
> 
9608a9643,9647
>                 if (name.equals(PackageManager.FEATURE_BLUETOOTH)
>                         || name.equals(PackageManager.FEATURE_BLUETOOTH_LE)) {
>                     return SystemProperties.getBoolean("persist.log.tag.bluetooth_support",
>                                    feat.version >= version);
>                 }
11806a11846,11848
>         // AW:BOOTEVENT
>         sAwSystemServerIns.logBootEvent("Android:PMS_scan_data:" + scanDir.getPath().toString());
> 
11817a11860
>             boolean isFilter = isFilterInstall(file);
11819c11862
<                     && !PackageInstallerService.isStageName(file.getName());
---
>                     && !PackageInstallerService.isStageName(file.getName()) && !isFilter;
11873a11917,11938
>     private static Set<String> readFilterDeleteFileToSet() {
>         if(!mFilterFile.exists()) {
>             Log.e(TAG,mFilterFile.getAbsolutePath() + " not exist");
>             return null;
>         }
>         List<String> res = null;
>         try {
>             res = Files.readAllLines(Paths.get(mFilterFile.getAbsolutePath()));
>             return new HashSet<>(res);
>         } catch (IOException ex) {
>             ex.printStackTrace();
>         }
>         return null;
>     }
> 
>     private static boolean isFilterInstall(File scanFile) {
>         if(filterInstallApps != null) {
>             return filterInstallApps.contains(scanFile.getAbsolutePath());
>         }
>         return false;
>     }
> 
12969,12974c13034,13113
<         final long identity = Binder.clearCallingIdentity();
<         try {
<             return BackgroundDexOptService.runIdleOptimizationsNow(this, mContext, packageNames);
<         } finally {
<             Binder.restoreCallingIdentity(identity);
<         }
---
> 
>         /*AW_code;powerlaunchcall background dex2oat optimize;jiangbin;200918*/
>         if(packageNames.contains("PowerLaunchCall")) {
> 
>             if(mHaveLaunchedBdoTask) {
>                  mNeedStopLaunchedBdo = true;
>                  Slog.i(TAG, "stop cur launched bdo");
>                  return false;
>             }
> 
>             String targetpackagename =  packageNames.get(1);
>             if(targetpackagename == null) {
>                 return false;
>             }
>             boolean hitpackage = false;
> 
> 
>             for (AndroidPackage p :  mPackages.values()) {
> 
>                 if (targetpackagename.equals(p.getPackageName())) {
> 
>                  Slog.i(TAG, "runBackgroundDexoptJob tgpackname =" +targetpackagename);
>                     if(PackageDexOptimizer.canOptimizePackage(p)) {
>                         hitpackage = true;
>                         break;
>                     }else {
>                         return false;
>                     }
> 
>                 }
>             }
>             if(hitpackage && !mHaveLaunchedBdoTask) {
> 
>                 PackageManagerService pm = this;
>             //    mHandler.postDelayed(new Runnable() {  //reserve info
>                 mHaveLaunchedBdoTask = true;
>                 mNeedStopLaunchedBdo = false;
>                 new Thread(new Runnable() {
>                  @Override
>                  public void run() {
> 
>                     try {
>                         Thread.sleep(LAUNCH_BDO_DELAY_TIME);
>                     } catch (InterruptedException e) {
>                         e.printStackTrace();
>                     }
> 
>                     if(!mNeedStopLaunchedBdo
>                         && !SystemProperties.getBoolean("pm.dexopt.disable_bg_dexopt" /* key */,false /* default */)) {
> 
>                         Slog.i(TAG, "launched bdo start " + targetpackagename);
>                         final long identity = Binder.clearCallingIdentity();
>                         try {
>                             BackgroundDexOptService.runIdleOptimizationsNow(pm, mContext, packageNames);
>                         } finally {
>                             Binder.restoreCallingIdentity(identity);
>                         }
>                     } else {
>                         Slog.i(TAG, "launched bdo stoped");
>                     }
>                     // mHandler.removeCallbacks(this);
>                     mHaveLaunchedBdoTask = false;
> 
>                  }
>                 }).start();
>               }
>             return hitpackage;
>             } else { /*end*/
> 
>                 final long identity = Binder.clearCallingIdentity();
>                 try {
>                     return BackgroundDexOptService.runIdleOptimizationsNow(this, mContext, packageNames);
>                 } finally {
>                     Binder.restoreCallingIdentity(identity);
>                 }
> 
>             }
> 
> 
> 
14940,14943d15078
<                     } else {
<                         throw new PackageManagerException(INSTALL_FAILED_INVALID_INSTALL_LOCATION,
<                                 "Application package " + pkg.getPackageName()
<                                 + " not found; ignoring.");
22529a22665
>         StorageManagerInternal smInternal = mInjector.getLocalService(StorageManagerInternal.class);
22531c22667
<         if (umInternal.isUserUnlockingOrUnlocked(userId)) {
---
>         if (StorageManager.isUserKeyUnlocked(userId) && smInternal.isCeStoragePrepared(userId)) {
25395a25532
>         StorageManagerInternal smInternal = mInjector.getLocalService(StorageManagerInternal.class);
25398c25535,25536
<             if (umInternal.isUserUnlockingOrUnlocked(user.id)) {
---
>             if (StorageManager.isUserKeyUnlocked(user.id)
>                     && smInternal.isCeStoragePrepared(user.id)) {
25629a25768,25770
>         // AW:BOOTEVENT
>         sAwSystemServerIns.logBootEvent("PMS:reconcileAppsDataLI start");
> 
25710a25852,25853
>         // AW:BOOTEVENT
>         sAwSystemServerIns.logBootEvent("PMS:reconcileAppsDataLI end");
25738c25881,25882
<             if (umInternal.isUserUnlockingOrUnlocked(user.id)) {
---
>             if (StorageManager.isUserKeyUnlocked(user.id)
>                     && smInternal.isCeStoragePrepared(user.id)) {
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/pm/UserManagerService.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/pm/UserManagerService.java
82a83
> import android.os.storage.StorageManagerInternal;
4817a4819,4822
> 
>         StorageManagerInternal smInternal = LocalServices.getService(StorageManagerInternal.class);
>         smInternal.markCeStoragePrepared(userId);
> 
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/policy/keyguard/KeyguardServiceDelegate.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/policy/keyguard/KeyguardServiceDelegate.java
29a30
> import com.android.internal.widget.LockPatternUtils;
59a61
>     private final LockPatternUtils mLockPatternUtils;
136a139
>         mLockPatternUtils = new LockPatternUtils(context);
211a215,218
>             if (mLockPatternUtils.isLockScreenDisabled(mKeyguardState.currentUser)) {
>                 mKeyguardState.reset();
>                 return;
>             }
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/policy/PhoneWindowManager.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/policy/PhoneWindowManager.java
540a541,542
>     WindowState mFocusedWindow;
> 
3010a3013,3016
> 
>         /// AW CODE: [feat] don't pause activity in suspend for eink reading
>         mFocusedWindow = newFocus;
>         /// AW:add end
3968a3975,3979
>                 if (mFocusedWindow != null) {
>                     if ((mFocusedWindow.getAttrs().privateFlags & WindowManager.LayoutParams.PRIVATE_FLAG_AW_EINK_READING) != 0) {
>                         return ACTION_PASS_TO_USER;
>                     }
>                 }
4368c4379
<             mRequestedOrSleepingDefaultDisplay = false;
---
>             //mRequestedOrSleepingDefaultDisplay = false;
4450c4461
<         mRequestedOrSleepingDefaultDisplay = true;
---
>         //mRequestedOrSleepingDefaultDisplay = true;
4916a4928,4935
>         /// AW CODE: [feat] don't pause activity in suspend for eink reading
>         if (mFocusedWindow != null) {
>             if ((mFocusedWindow.getAttrs().privateFlags & WindowManager.LayoutParams.PRIVATE_FLAG_AW_EINK_READING) != 0) {
>                 return;
>             }
>         }
>         /// AW:add end
> 
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/policy: TvWindowManager.java
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java
47a48
> import android.graphics.PixelFormat;
97a99,102
> import android.view.View;
> import android.view.ViewGroup;
> import android.view.WindowManager;
> import android.widget.ImageView;
109a115
> import com.android.internal.R;
631a638,647
>     //AW_CODE; get cur power-scene control mode;jiangbin;200228
>     private int mPowerSceneMode;
> 
>     /// AW CODE: [feat] support standby logo show
>     private final static boolean ELINK_SERVICES_ENABLE = SystemProperties.getBoolean("ro.product.einkservices.enabled", false);
>     private ImageView mStandbyLogoImgView = null;
>     private boolean mIsStandbyLogoShow = false;
>     private boolean mIsWaitForStandbyLogoShow = false;
>     /// AW:add end
> 
1840a1857,1864
> 
> 
>             /// AW CODE: [feat] support standby logo show
>             // wakeup remove standby logo view
>             if (ELINK_SERVICES_ENABLE) {
>                 mHandler.post(mHideStandbyLogoRunner);
>             }
>             /// AW:add end
1884a1909,1918
> 
>             /// AW CODE: [feat] support standby logo show
>             //when power_button sleep to show standby logo
>             if (ELINK_SERVICES_ENABLE && PowerManager.GO_TO_SLEEP_REASON_POWER_BUTTON == reason) {
>                 mIsWaitForStandbyLogoShow = true;
>                 mHandler.post(mShowStandbyLogoRunner);
>                 mHandler.postDelayed(mGoOnStandbyPendingByShowLogoRunner, 1500);
>             }
>             /// AW:add end
> 
2113a2148,2155
>         /// AW CODE: [feat] support standby logo show
>         // handle: wait to image logo show
>         if (mIsWaitForStandbyLogoShow) {
>             Slog.i(TAG, "Waiting for standby log show ... ");
>             return;
>         }
>         /// AW:add end
> 
2606a2649,2653
>             // set USER_ACTIVITY_SCREEN_BRIGHT for never sleep
>             if (mScreenOffTimeoutSetting == Integer.MAX_VALUE) {
>                 groupUserActivitySummary = USER_ACTIVITY_SCREEN_BRIGHT;
>             }
> 
2625c2672
<         if (hasUserActivitySummary && nextTimeout >= 0) {
---
>         if (hasUserActivitySummary && nextTimeout >= 0 && mScreenOffTimeoutSetting < Integer.MAX_VALUE) {
3991a4039,4043
>         /*AW_CODE;record cur power-scene-mode only enable,see power-hal-define;jiangbin;210108*/
>         if(enabled) {
>             mPowerSceneMode = mode;
>         }
>         /*end*/
5129a5182,5192
>         /*AW_CODE;get cur power-scene control mode;jiangbin;200228*/
>         @Override // Binder call
>        public int getPowerSceneMode() {
>            if (!mSystemReady) {
>                 // Service not ready yet, so who the heck cares about power hints, bah.
>                 return 0;
>             }
>             return mPowerSceneMode;
>         }
>         /*end*/
> 
6127a6191,6197
>         /*AW_CODE;add interface for performance control;jiangbin;200302*/
>         @Override
>         public int getPowerSceneMode() {
>             return mPowerSceneMode;
>         }
>         /*end*/
> 
6142a6213,6295
> 
>     /// AW CODE: [feat] support standby logo show for eink
>     private Runnable mShowStandbyLogoRunner = new Runnable() {
>         public void run() {
>             showStandbyLogo();
>         }
>     };
> 
>     private Runnable mGoOnStandbyPendingByShowLogoRunner = new Runnable() {
>         public void run() {
>             Slog.i(TAG, "go on standby: " + "isLogoShow=" + mIsStandbyLogoShow
>                     + ", isWaitingForLogoShow: " + mIsWaitForStandbyLogoShow);
>             mIsWaitForStandbyLogoShow = false;
>             synchronized (mLock) {
>                 updatePowerStateLocked();
>             }
>         }
>     };
> 
>     private Runnable mHideStandbyLogoRunner = new Runnable() {
>         public void run() {
>             hideStandbyLogo();
>         }
>     };
> 
>     private void showStandbyLogo() {
>         Slog.i(TAG, "show standby logo: " + "isLogoShow=" + mIsStandbyLogoShow);
>         if (mIsStandbyLogoShow == true) {
>             return;
>         }
>         if (null == mStandbyLogoImgView) {
>             mStandbyLogoImgView = new ImageView(mContext);
>             mStandbyLogoImgView.setBackgroundResource(R.drawable.default_standby_logo);
>         }
> 
>         final int stretch = ViewGroup.LayoutParams.MATCH_PARENT;
>         int flags = WindowManager.LayoutParams.FLAG_FULLSCREEN |
>             WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN |
>             WindowManager.LayoutParams.FLAG_LAYOUT_INSET_DECOR;
> 
>         WindowManager.LayoutParams lp = new WindowManager.LayoutParams(
>                 // TYPE_DISPLAY_OVERLAY window z-order is top of navigation_bar
>                 //stretch, stretch, WindowManager.LayoutParams.TYPE_SYSTEM_OVERLAY,
>                 stretch, stretch, WindowManager.LayoutParams.TYPE_DISPLAY_OVERLAY,
>                 flags, PixelFormat.RGBX_8888);
>         lp.refreshMode = "GC16";
>         // TODO: maybe we will use this title to handle this window in wms, so don't change this title
>         lp.setTitle("StandbyLogo");
>         lp.token = new Binder();
> 
>         WindowManager wms = (WindowManager)mContext.getSystemService(Context.WINDOW_SERVICE);
>         wms.addView(mStandbyLogoImgView, lp);
>         mStandbyLogoImgView.setSystemUiVisibility(
>                 View.SYSTEM_UI_FLAG_IMMERSIVE |
>                 View.SYSTEM_UI_FLAG_HIDE_NAVIGATION |
>                 View.SYSTEM_UI_FLAG_FULLSCREEN |
>                 View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION |
>                 View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
>                 );
>         //mStandbyLogoImgView.invalidate();
> 
>         mIsStandbyLogoShow = true;
>     }
> 
>     private void hideStandbyLogo() {
>         Slog.i(TAG, "hide standby logo begine: " + " isLogoShow=" + mIsStandbyLogoShow
>                 + ", mLogoView=" + mStandbyLogoImgView);
>         if (false == mIsStandbyLogoShow) {
>             return;
>         }
>         if (null != mStandbyLogoImgView) {
>             WindowManager wms = (WindowManager)mContext.getSystemService(Context.WINDOW_SERVICE);
>             mStandbyLogoImgView.setSystemUiVisibility(
>                     View.SYSTEM_UI_FLAG_LAYOUT_STABLE
>                     );
>             //mStandbyLogoImgView.invalidate();
>             wms.removeView(mStandbyLogoImgView);
>             //wms.forceGlobalRefresh(true);
>         }
> 
>         mIsStandbyLogoShow = false;
>     }
>     /// AW:add end
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/power/ShutdownThread.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/power/ShutdownThread.java
19a20
> import android.app.ActivityManager;
167a169,175
>         //SWC-APD wangchende@allwinnertech.com BugFix:55404 @{
>         if(ActivityManager.isUserAMonkey()){
>             Slog.i(TAG," Monkey mode disable shut down or reboot");
>             return;
>         }
>         //@}
> 
390c398,405
< 
---
>         /// AW CODE:[feat]:shut down screen directly
>         final boolean shutdownForceScreenOff = context.getResources().getBoolean(
>                 com.android.internal.R.bool.config_shutdownForceScreenOff);
>         if (shutdownForceScreenOff) {
>             sInstance.mPowerManager.goToSleep(SystemClock.uptimeMillis(),
>                     PowerManager.GO_TO_SLEEP_REASON_POWER_BUTTON, 0);
>         }
>         /// AW add end
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/SensorPrivacyService.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/SensorPrivacyService.java
710a711,720
>             if (DEBUG) {
>                 Log.d(TAG, "callingUid=" + Binder.getCallingUid()
>                         + " callingPid=" + Binder.getCallingPid()
>                         + " setIndividualSensorPrivacy("
>                         + "userId=" + userId
>                         + " source=" + source
>                         + " sensor=" + sensor
>                         + " enable=" + enable
>                         + ")");
>             }
894a905,912
>             if (DEBUG) {
>                 Log.d(TAG, "callingUid=" + Binder.getCallingUid()
>                         + " callingPid=" + Binder.getCallingPid()
>                         + " isIndividualSensorPrivacyEnabled("
>                         + "userId=" + userId
>                         + " sensor=" + sensor
>                         + ")");
>             }
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/StorageManagerService.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/StorageManagerService.java
223a224,226
>     @GuardedBy("mLock")
>     private final Set<Integer> mCeStoragePreparedUsers = new ArraySet<>();
> 
4865a4869,4882
>         }
> 
>         @Override
>         public void markCeStoragePrepared(int userId) {
>             synchronized (mLock) {
>                 mCeStoragePreparedUsers.add(userId);
>             }
>         }
> 
>         @Override
>         public boolean isCeStoragePrepared(int userId) {
>             synchronized (mLock) {
>                 return mCeStoragePreparedUsers.contains(userId);
>             }
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/SystemServiceManager.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/SystemServiceManager.java
233c233,235
<                 t.traceBegin("OnBootPhase_" + phase + "_" + service.getClass().getName());
---
>                 if (DEBUG) {
>                     t.traceBegin("OnBootPhase_" + phase + "_" + service.getClass().getName());
>                 }
243c245,247
<                 t.traceEnd();
---
>                 if (DEBUG) {
>                     t.traceEnd();
>                 }
398c402,404
<             t.traceBegin("ssm.on" + onWhat + "User-" + curUserId + "_" + serviceName);
---
>             if (DEBUG) {
>                 t.traceBegin("ssm.on" + onWhat + "User-" + curUserId + "_" + serviceName);
>             }
429c435,437
<             t.traceEnd(); // what on service
---
>             if (DEBUG) {
>                 t.traceEnd(); // what on service
>             }
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/WiredAccessoryManager.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/WiredAccessoryManager.java
37a38
> import android.os.SystemProperties;
379a381,382
>             if("homlet".equals(SystemProperties.get("ro.build.characteristics", "tablet"))) {}
>             else{
381,383c384,395
<             // Monitor h2w
<             if (!mUseDevInputEventForAudioJack) {
<                 uei = new UEventInfo(NAME_H2W, BIT_HEADSET, BIT_HEADSET_NO_MIC, BIT_LINEOUT);
---
>                 // Monitor h2w
>                 if (!mUseDevInputEventForAudioJack) {
>                     uei = new UEventInfo(NAME_H2W, BIT_HEADSET, BIT_HEADSET_NO_MIC, BIT_LINEOUT);
>                     if (uei.checkSwitchExists()) {
>                         retVal.add(uei);
>                     } else {
>                         Slog.w(TAG, "This kernel does not have wired headset support");
>                     }
>                 }
> 
>                 // Monitor USB
>                 uei = new UEventInfo(NAME_USB_AUDIO, BIT_USB_HEADSET_ANLG, BIT_USB_HEADSET_DGTL, 0);
387c399
<                     Slog.w(TAG, "This kernel does not have wired headset support");
---
>                     Slog.w(TAG, "This kernel does not have usb audio support");
389,397d400
<             }
< 
<             // Monitor USB
<             uei = new UEventInfo(NAME_USB_AUDIO, BIT_USB_HEADSET_ANLG, BIT_USB_HEADSET_DGTL, 0);
<             if (uei.checkSwitchExists()) {
<                 retVal.add(uei);
<             } else {
<                 Slog.w(TAG, "This kernel does not have usb audio support");
<             }
399,411c402,410
<             // Monitor HDMI
<             //
<             // If the kernel has support for the "hdmi_audio" switch, use that.  It will be
<             // signalled only when the HDMI driver has a video mode configured, and the downstream
<             // sink indicates support for audio in its EDID.
<             //
<             // If the kernel does not have an "hdmi_audio" switch, just fall back on the older
<             // "hdmi" switch instead.
<             uei = new UEventInfo(NAME_HDMI_AUDIO, BIT_HDMI_AUDIO, 0, 0);
<             if (uei.checkSwitchExists()) {
<                 retVal.add(uei);
<             } else {
<                 uei = new UEventInfo(NAME_HDMI, BIT_HDMI_AUDIO, 0, 0);
---
>                 // Monitor HDMI
>                 //
>                 // If the kernel has support for the "hdmi_audio" switch, use that.  It will be
>                 // signalled only when the HDMI driver has a video mode configured, and the downstream
>                 // sink indicates support for audio in its EDID.
>                 //
>                 // If the kernel does not have an "hdmi_audio" switch, just fall back on the older
>                 // "hdmi" switch instead.
>                 uei = new UEventInfo(NAME_HDMI_AUDIO, BIT_HDMI_AUDIO, 0, 0);
415c414,419
<                     Slog.w(TAG, "This kernel does not have HDMI audio support");
---
>                     uei = new UEventInfo(NAME_HDMI, BIT_HDMI_AUDIO, 0, 0);
>                     if (uei.checkSwitchExists()) {
>                         retVal.add(uei);
>                     } else {
>                         Slog.w(TAG, "This kernel does not have HDMI audio support");
>                     }
418d421
< 
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/wm/ActivityRecord.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/wm/ActivityRecord.java
54a55
> import static android.content.Intent.CATEGORY_LAUNCHER_APP;
222a224,225
> 
> 
279a283
> import android.os.SystemProperties;
391a396,397
>     private static final String DEFAULT_FALLBACKHOME_INFO = "com.android.settings.FallbackHome";//AW
> 
404a411,414
> 
>     static final int TRIGGER_RESEVE_GC_FLAG = 128; //new flag for reseve-gc
> 
> 
794a805,810
>     /*AW_code;for app_start performance;jiangbin;200915*/
>     private boolean mNeedSkipStartingWindow;
>     private boolean mTouchStartByLauncher;
>     /*end*/
> 
> 
1722a1739,1762
> 
>         /*AW_code:hook am-shell startactivity skipstartingwindow(userdebug)
>           for GMS-performance-test;hook stary-by-launcher;
>           ActivityManagerShellCommand startActivityAndWait(null,PACKAGE_SHELL,...);jiangbin;200915*/
> 
>         if(Build.DROIDBOOST_ENABLED) {
>             if(_launchedFromPackage != null) {
>                 if((Build.IS_USERDEBUG) && (_caller == null)
>                      && (_launchedFromPackage.contains("android.shell"))) {
>                         mNeedSkipStartingWindow = true;
>                         Slog.d(TAG, "start by-shell");
> 
>                      } else if((_launchedFromPackage.contains("android.launcher"))
>                              ||(_launchedFromPackage.contains("apts"))) {
>                         mTouchStartByLauncher = true;
>                         Slog.d(TAG, "start by-launcher or app");
>                      }
> 
>             }
>         }
>         /*end*/
> 
> 
> 
1785a1826,1834
>     /*AW_code:hook stary-by-launcher scale-skip-animationframe;jiangbin;200915 */
>     public boolean isTouchWithLauncherStartIntent() {
> 
>          return mTouchStartByLauncher;
>     }
>      /*end*/
> 
> 
> 
2371a2421,2432
>     /*AW_CODE;for power-scene-check;jscese;211230*/
>     public boolean  isHomeLauncher() {
>         if(isHomeIntent(intent) && (intent.hasCategory(CATEGORY_LAUNCHER_APP) ||
>                 !info.toString().contains(DEFAULT_FALLBACKHOME_INFO))) {
>             Slog.d(TAG,"isHomeLauncher info= "+info.toString());
>             return true;
>         }
> 
>         return false;
>     }
>     /*end*/
> 
3022c3083,3085
<                 final boolean removedActivity = completeFinishing("finishIfPossible") == null;
---
>                 final boolean removedActivity = completeFinishing(/*AW_CODE;specail reseve process;jiangbin*/
>                         reason.equals("remove-task-rp")?"finishIfPossible-SRP":"finishIfPossible") == null;
> 
3267a3331,3337
> 
>                 /*AW_CODE;trigger reseve-process gc;jiangbin;210708*/
>                 if(reason.contains("finishIfPossible-SRP")) {
>                     configChangeFlags |= TRIGGER_RESEVE_GC_FLAG;
>                 }
>                 /*end*/
> 
4901a4972,4980
>                 /// AW CODE:DroidBoost:V1.3.49:boot:support start launcher when system_server init end
>                 if (intent != null && intent.hasCategory("android.intent.category.HOME")) {
>                     boolean exit_bootanimation_immediately = mAtmService.mContext.getResources().getBoolean(R.bool.config_exit_bootanimation_immediately);
>                     if (exit_bootanimation_immediately) {
>                         Slog.d(TAG,"finish bootanim to show launcher");
>                         SystemProperties.set("service.bootanim.exit", "1");
>                     }
>                 }
>                 /// AW CODE END.
6106c6185,6188
<             return mAtmService.mAmInternal.inputDispatchingTimedOut(anrApp.mOwner,
---
>             /// AW：[BugFix] #55762 if anrApp is null, Null pointer exception occurred, Anr trace capture failed
>             //return mAtmService.mAmInternal.inputDispatchingTimedOut(anrApp.mOwner,
>             return mAtmService.mAmInternal.inputDispatchingTimedOut(anrApp != null ? anrApp.mOwner : null,
>             /// AW：add end
6376a6459,6467
>         /*AW_code:hook am-shell startactivity skipstartingwindow(userdebug)
>         for performance-experience;
>         jiangbin;200915*/
>         if (mNeedSkipStartingWindow) {
>             return;
>         }
>         /*end*/
> 
> 
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/wm/ActivityTaskManagerService.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/wm/ActivityTaskManagerService.java
1926a1927,1964
>     /*AW_CODE;reseve-process interface for performance;jiangbin;210628*/
>     @Override
>     public boolean removeTaskReseveProcess(int taskId) {
>         mAmInternal.enforceCallingPermission(REMOVE_TASKS, "removeTask()");
>         synchronized (mGlobalLock) {
>             final long ident = Binder.clearCallingIdentity();
> 
>             try {
>                 final Task task = mRootWindowContainer.anyTaskForId(taskId,
>                         MATCH_ATTACHED_TASK_OR_RECENT_TASKS);
>                 if (task == null) {
>                     Slog.w(TAG, "removeTask: No task remove with id=" + taskId);
>                     return false;
>                 }
> 
>                 if (task.isLeafTask()) {
>                    if(Build.DROIDBOOST_ENABLED) {
>                        mTaskSupervisor.removeTask(task, false, REMOVE_FROM_RECENTS,
>                                 "remove-task-rp");
>                     } else {
>                         mTaskSupervisor.removeTask(task, true, REMOVE_FROM_RECENTS,
>                                 "remove-task");
>                     }
> 
>                 } else {
>                     mTaskSupervisor.removeRootTask(task);
>                 }
>                 return true;
>             } finally {
>                 Binder.restoreCallingIdentity(ident);
>             }
> 
>         }
>     }
>     /*end*/
> 
> 
> 
4211a4250,4256
>     /*AW_CODE: power scene interface;jiangbin;210816*/
>     void setPowerSceneMode(int mode, boolean enabled) {
>         if (mPowerManagerInternal == null) return;
>         mPowerManagerInternal.setPowerMode(mode,enabled);
>     }
>     /*end*/
> 
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/wm/ActivityTaskSupervisor.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/wm/ActivityTaskSupervisor.java
111a112,115
> 
> import android.content.Context;
> 
> 
210a215,217
> 
> 
> 
390a398,413
>     /*special remove-reseve-process flag :jiangbin*/
>     private boolean mReseveProcessSpecial = false;
>     ArrayList<WindowProcessController> mReseveprocess= new ArrayList<>();
> 
>     private ActivityManager mActivityManager;
>     private int mReseveProcessThreshold;
>     private int DEFAULT_RESEVE_THRESHOLD = 3;
>     private int DEFAULT_LOW_MEMSIZE_THRESHOLD = 200 * 1024 * 1024;//200M
> 
>     private int DEFAULT_RESEVE_MORE_EMPTY_TIME = 30 * 60 * 1000; //30 minutes
> 
>     /*end*/
> 
> 
> 
> 
1562a1586,1590
>             /*AW_CODE;hook reseve-process;jiangbin;210623*/
>             mReseveProcessSpecial = (!killProcess && reason.equals("remove-task-rp"));
>             Slog.v(TAG, "mReseveprocess special =  "+mReseveProcessSpecial);
>             /*end*/
> 
1573a1602,1637
> 
>     /*AW_CODE;set reseve-process size threshod frome mem-avail;jiangbin;210628*/
>     int updateReseveThreshold() {
>         int rethreshod = DEFAULT_RESEVE_THRESHOLD;
>         long lowmemthreshod = DEFAULT_LOW_MEMSIZE_THRESHOLD;
> 
>         if(mActivityManager == null) {
>             mActivityManager = (ActivityManager)mService.mContext.getSystemService(Context.ACTIVITY_SERVICE);
>         }
> 
>         if(mActivityManager != null) {
>             ActivityManager.MemoryInfo info = new ActivityManager.MemoryInfo();
>             mActivityManager.getMemoryInfo(info);
>            //Slog.v(TAG,"MemoryInfo  avail= " + info.availMem + " total= " + info.totalMem + " lowmem= "+ info.lowMemory);
> 
>             if(info.totalMem > (1.5f * 1024 * 1024 * 1024) /*1.5G size*/) {
>                 rethreshod = 2*DEFAULT_RESEVE_THRESHOLD;
>                 lowmemthreshod = 2*DEFAULT_LOW_MEMSIZE_THRESHOLD;
>             }
> 
>             if(info.availMem < lowmemthreshod) {
>                  rethreshod -= (lowmemthreshod/info.availMem);
>                  if(rethreshod <= 0) {
>                      rethreshod = 1;
>                  }
>             }
>         }
>         Slog.v(TAG,"cur reseve-process size rethreshod =" +rethreshod);
>         return rethreshod;
> 
>     }
>     /*end*/
> 
> 
> 
> 
1589c1653,1654
<         if (!killProcess) {
---
>         /*AW_CODE;jiangbin;210708*/
>         if (!killProcess && !mReseveProcessSpecial) {
1591a1657,1662
>         boolean isFirstProcess = true;
>         int listSize = 0;
>         WindowProcessController lastProc = null;
>         mReseveProcessThreshold = updateReseveThreshold();
>         /*end*/
> 
1625a1697,1765
> 
>                 /*AW_CODE;reseve-process when remove recent-task frome systemui;jiangbin;210628*/
>                 Slog.v(TAG, "need kill proc= "+ proc.toString()
>                             +"pid = " + proc.getPid());
>                 if(mReseveProcessSpecial) {
> 
>                 //oomadj default:ProcessList.MAX_EMPTY_TIME = 30 minutes
>                 //now reseve (MAX_EMPTY_TIME + mReseveProcessTimetime) = 1 hour time
>                    proc.mReseveProcessTime = SystemClock.uptimeMillis() + DEFAULT_RESEVE_MORE_EMPTY_TIME;
> 
>                    if(isFirstProcess) {
>                       isFirstProcess = false;
>                        if(!mReseveprocess.contains(proc)) { // do not need repeat
>                            Slog.w(TAG, "firstprocess new");
>                        } else {
>                            mReseveprocess.remove(mReseveprocess.indexOf(proc));
>                            Slog.w(TAG, "firstprocess repeat .remove already exist");
>                        }
>                        mReseveprocess.add(proc);
>                        Slog.w(TAG, "hit firstprocess " + proc.toString() + " listsize= " + mReseveprocess.size()
>                                + " reseve time = " + proc.mReseveProcessTime);
> 
>                        if(mReseveprocess.size() > mReseveProcessThreshold) {
>                            for(int k=0; k < mReseveprocess.size(); k++) {
>                                 proc = mReseveprocess.get(k);
>                                 if(proc.hasForegroundActivities() || proc.hasForegroundServices()) { // need check F-A-S
>                                     continue;
>                                 } else {
>                                     procsToKill.add(proc);
>                                     mReseveprocess.remove(k);
>                                     Slog.w(TAG, "threshold killproc= " + proc.toString() + " listsize= " +mReseveprocess.size());
>                                     break;
>                                 }
>                            }
>                        }
> 
>                     } else {
> 
>                        // abandon policy:
>                        //multi-process-app,proc-sort <22015-task2、21985-task1、21927-home >
>                        // <21927-home> need be reseveed
>                        // new policy: compare pid value with PorcessPid
>                        // kill-others do not need check F-A-S
>                        listSize = mReseveprocess.size();
>                        lastProc = mReseveprocess.get(listSize-1);
>                        if(proc.getPid()  <  lastProc.getPid()) {
>                            procsToKill.add(lastProc);
>                            mReseveprocess.remove(listSize-1);
>                            mReseveprocess.add(proc);
>                        } else {
>                            procsToKill.add(proc);
>                        }
> 
>                     }
> 
>                    /* //for debug-dump
>                    for(int h=0; h < mReseveprocess.size(); h++) {
>                        proc = mReseveprocess.get(h);
>                        Slog.w(TAG, "dump reseve proc " + proc.toString());
>                    }
>                    */
> 
>                     continue;
>                 }
>                 /*end*/
> 
> 
> 
> 
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/wm: AwGestyresPointerEventListener.java
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/wm/DisplayContent.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/wm/DisplayContent.java
179a180
> import android.os.SystemProperties;
3526a3528,3529
>         if(newFocus != null)
>             SystemProperties.set("sys.lmk_top_app",newFocus.packageName);
4406a4410,4414
>         int user_rotation = SystemProperties.getInt("ro.primary_display.user_rotation", 0);
>         if (user_rotation == 90 || user_rotation == 270) {
>             return mBaseDisplayWidth < mBaseDisplayHeight
>                 ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT;
>         }
5804a5813,5815
>         if (ignoreOrientationRequest) {
>             mDisplayRotation.setUserRotation(mDisplayRotation.getUserRotationMode(), mDisplayRotation.getPortraitRotation());
>         }
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/wm/DisplayPolicy.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/wm/DisplayPolicy.java
119a120,121
> import android.content.ContentResolver;
> import android.database.ContentObserver;
127a130
> import android.net.Uri;
134a138,139
> import android.provider.Settings;
> import android.text.TextUtils;
173a179
> import com.softwinner.EinkManager;
245a252
>     private final AwGesturesPointerEventListener mAwGestures;
357a365,366
>     private int mDisplayCutoutTouchableRegionSize;
> 
562a572,573
>         mAwGestures = new AwGesturesPointerEventListener(mContext, mHandler);
>         mDisplayContent.registerPointerEventListener(mAwGestures);
652a664,679
> 
>         /// AW CODE：[feat] support refresh mode for eink screen wangchende
>         ContentResolver resolver = mContext.getContentResolver();
>         resolver.registerContentObserver(
>                 Settings.System.getUriFor(Settings.System.EINK_REFRESHMODE),
>                 false,
>                 new ContentObserver(mHandler) {
>                     @Override
>                     public void onChange(boolean selfChange, Uri uri) {
>                         mSysRefreshMode = Settings.System.getStringForUser(mContext.getContentResolver(),
>                                 Settings.System.EINK_REFRESHMODE, UserHandle.USER_CURRENT);
>                         doUpdateRefreshMode();
>                     }
>                 },
>                 UserHandle.USER_ALL);
>         /// AW：add end
671a699
>         mAwGestures.systemReady();
1083a1112,1123
>                 final TriConsumer<DisplayFrames, WindowState, Rect> gestureFrameProvider =
>                         (displayFrames, windowState, rect) -> {
>                             rect.bottom = rect.top + getStatusBarHeight(displayFrames);
>                             final DisplayCutout cutout =
>                                     displayFrames.mInsetsState.getDisplayCutout();
>                             if (cutout != null) {
>                                 final Rect top = cutout.getBoundingRectTop();
>                                 if (!top.isEmpty()) {
>                                     rect.bottom = rect.bottom + mDisplayCutoutTouchableRegionSize;
>                                 }
>                             }
>                         };
1085c1125,1126
<                 mDisplayContent.setInsetProvider(ITYPE_TOP_MANDATORY_GESTURES, win, frameProvider);
---
>                 mDisplayContent.setInsetProvider(
>                         ITYPE_TOP_MANDATORY_GESTURES, win, gestureFrameProvider);
1456a1498
>         mAwGestures.onDisplayInfoChanged(info);
1995a2038,2039
>             mDisplayCutoutTouchableRegionSize = res.getDimensionPixelSize(
>                     R.dimen.display_cutout_touchable_region_size);
2000a2045
>             mDisplayCutoutTouchableRegionSize = 0;
2523a2569,2571
>         /// AW CODE：[feat] support refresh mode for eink screen wangchende
>         updateRefreshMode(win);
>         /// AW：add end
3072a3121,3142
> 
>     /// AW CODE：[feat] support refresh mode for eink screen wangchende
>     private String mAppRefreshMode = null;
>     private String mSysRefreshMode = "GU16";
>     public final static boolean ELINK_SERVICES_ENABLE = SystemProperties.getBoolean("ro.product.einkservices.enabled", false);
>     private void updateRefreshMode(WindowState win) {
>         final String refreshMode = win.mAttrs.refreshMode;
>         if (!TextUtils.equals(refreshMode, mAppRefreshMode) || mDisplayContent.mFocusedApp != win.mActivityRecord) {
>             mAppRefreshMode = refreshMode;
>             mHandler.post(() -> {
>                 doUpdateRefreshMode();
>             });
>         }
>     }
>     private void doUpdateRefreshMode() {
>         if(ELINK_SERVICES_ENABLE){
>             int mode = EinkManager.checkRefreshMode(mAppRefreshMode, mSysRefreshMode);
>             EinkManager.setRefreshMode(mode);
>             Slog.i(TAG, "Eink setRefreshMode mAppRefreshMode=" + mAppRefreshMode + ", realRefreshMode=0x" + Integer.toHexString(mode));
>         }
>     }
>     /// AW：add end
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/wm/DisplayRotation.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/wm/DisplayRotation.java
131a132,134
>     @Surface.Rotation
>     private int mNaturalRotation;
> 
259a263
>             int user_rotation = SystemProperties.getInt("ro.primary_display.user_rotation", 0);
260a265,278
>             switch (user_rotation) {
>                 case 90:
>                     mRotation = Surface.ROTATION_90;
>                     break;
>                 case 180:
>                     mRotation = Surface.ROTATION_180;
>                    break;
>                 case 270:
>                     mRotation = Surface.ROTATION_270;
>                     break;
>                 default:
>                     break;
>             }
>             mNaturalRotation = mRotation;
464a483
>         Slog.d("AW_CODE","rotation =" + rotation);
1304c1323
<                 return Surface.ROTATION_0;
---
>                 return mNaturalRotation;
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/wm/KeyguardController.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/wm/KeyguardController.java
193,194c193
<             dismissMultiWindowModeForTaskIfNeeded(null /* currentTaskControllsingOcclusion */,
<                     false /* turningScreenOn */);
---
>             dismissMultiWindowModeForTaskIfNeeded(null /* currentTaskControllsingOcclusion */);
387a387,388
>         dismissMultiWindowModeForTaskIfNeeded(topActivity != null
>                 ? topActivity.getRootTask() : null);
413,427d413
<     /**
<      * Called when somebody wants to turn screen on.
<      */
<     private void handleTurnScreenOn(int displayId) {
<         if (displayId != DEFAULT_DISPLAY) {
<             return;
<         }
< 
<         mTaskSupervisor.wakeUp("handleTurnScreenOn");
<         if (mKeyguardShowing && canDismissKeyguard()) {
<             mWindowManager.dismissKeyguard(null /* callback */, null /* message */);
<             mDismissalRequested = true;
<         }
<     }
< 
441,443c427
<             @Nullable Task currentTaskControllingOcclusion, boolean turningScreenOn) {
<         // If turningScreenOn is true, it means that the visibility state has changed from
<         // currentTaskControllingOcclusion and we should update windowing mode.
---
>             @Nullable Task currentTaskControllingOcclusion) {
445c429
<         if (!turningScreenOn && (!mKeyguardShowing || !isDisplayOccluded(DEFAULT_DISPLAY))) {
---
>         if (!mKeyguardShowing || !isDisplayOccluded(DEFAULT_DISPLAY)) {
584,585d567
<             boolean occludingChange = false;
<             boolean turningScreenOn = false;
589,592c571,572
<                     && (mRequestDismissKeyguard || occludedByActivity
<                         || controller.canDismissKeyguard())) {
<                 turningScreenOn = true;
<                 controller.handleTurnScreenOn(mDisplayId);
---
>                     && (mRequestDismissKeyguard || occludedByActivity)) {
>                 controller.mTaskSupervisor.wakeUp("handleTurnScreenOn");
597d576
<                 occludingChange = true;
599,602d577
<             }
< 
<             if (occludingChange || turningScreenOn) {
<                 controller.dismissMultiWindowModeForTaskIfNeeded(task, turningScreenOn);
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/wm/RootWindowContainer.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/wm/RootWindowContainer.java
131a132,135
> 
> import android.os.Build;
> import android.os.PowerManagerInternal;
> 
229a234,238
> 
>     /** Set when a power hint has started, but not ended. */
>     private boolean mPowerHintSent;
> 
> 
271a281,294
>     /*AW_code;scale animator in launch;jiangbin;200915 */
>     private boolean mPowerHintAnimatorScale;
>     final float AW_LAUNCH_VALUE_ANIMATOR_SCALE = 0.55f;
>     /*end*/
>     /*AW_code;record status for backpdo;jiangbin;200917*/
>     private String  mPowerTargetPackageName;
>     private boolean mPowerHintTouchWithLauncherStart;
>     private int mCheckPackageFlag;
>     static final int HOME_LAUNCHER = 5;
>     /*end*/
> 
> 
> 
> 
3343a3367,3398
> 
>     /*AW_CODE;add to check need trigger launcherBdo;jiangbin;210819*/
>     boolean checkNeedTriggerLauncherBdo() {
>         if(mPowerTargetPackageName != null) {
> 
>             final Task task = getTopDisplayFocusedRootTask();
>             if(task != null) {
>                     if(task.isHomeOrRecentsRootTask()) {
>                         mPowerTargetPackageName = null;
>                         return false;
>                     }
>                 }
> 
>             try {
>                 final ActivityManager.MemoryInfo info = new ActivityManager.MemoryInfo();
>                 ActivityManager.getService().getMemoryInfo(info);
> 
> 
>                 if(info.totalMem >= (/*1.5f*/0.75f * 1024 * 1024 * 1024) /*0.75G size*/) {
>                     return true;
>                 }
>             } catch (RemoteException e) {
>                Slog.d(TAG_TASKS,"Cannot obtain MemoryInfo from ActivityManager, assume low memory device");
>             }
> 
>         }
>         return  false;
>     }
>     /*end*/
> 
> 
> 
3367c3422,3451
<         mService.endLaunchPowerMode(ActivityTaskManagerService.POWER_MODE_REASON_START_ACTIVITY);
---
>         if(mPowerHintSent) { //AW_CODE
>             mService.endLaunchPowerMode(ActivityTaskManagerService.POWER_MODE_REASON_START_ACTIVITY);
>             if(Build.DROIDBOOST_ENABLED) {
> 
>                // VMRuntime.getRuntime().setHeapLaunchMode(false);//AW_code;jiangbin mark for heap-gc
> 
>                 if(mPowerHintAnimatorScale) {
>                     mService.mWindowManager.setLaunchValueAnimatorScale(1.0f);//restore scale
>                     mService.mWindowManager.setLaunchSkipAnimatorFrame(false);
>                     mPowerHintAnimatorScale = false;
>                 }
> 
>                 /*AW_code;launcherBdo;jiangbin;200917*/
>                 if(mPowerHintTouchWithLauncherStart && checkNeedTriggerLauncherBdo()) {
>                     mPowerHintTouchWithLauncherStart = false;
>                     List<String> packageNames = new ArrayList<>();
>                     packageNames.add(0,"PowerLaunchCall");
>                     packageNames.add(1,mPowerTargetPackageName);
>                     mService.mContext.getPackageManager().runBackgroundDexoptJob(packageNames);
>                 }
>                 /*end*/
> 
>             }
> 
>             mPowerHintSent = false;
>         } else if(mCheckPackageFlag == HOME_LAUNCHER) {//special for goto home
>             mService.setPowerSceneMode(Mode.SUSTAINED_PERFORMANCE,false);
>             mCheckPackageFlag = 0;
>         }
> 
3560a3645
>          /* AW_code: start app with launch mode;jiangbin;20210817*/
3562,3563c3647,3688
<             mService.startLaunchPowerMode(
<                     ActivityTaskManagerService.POWER_MODE_REASON_START_ACTIVITY);
---
>             if(Build.DROIDBOOST_ENABLED) {
>                 mCheckPackageFlag = 0;
>                 if(targetActivity != null) {
>                    final Task task = getTopDisplayFocusedRootTask();
>                     if(task != null) {
>                         mCheckPackageFlag = task.checkFileName(targetActivity.processName);
>                         if((mCheckPackageFlag == 0) && targetActivity.isHomeLauncher()) {
>                             mCheckPackageFlag = HOME_LAUNCHER;
>                         }
> 
>                     }
>                 }
>             }
> 
>             mPowerTargetPackageName  = targetActivity.processName;
> 
>             if (mCheckPackageFlag > 0) {
>                 mService.setPowerSceneMode(Mode.SUSTAINED_PERFORMANCE, true);
>                 mPowerHintSent = false;//avoid launchend send-normal mode request
>             } else {
>                 if (!mPowerHintSent) {
>                     mService.startLaunchPowerMode(
>                       ActivityTaskManagerService.POWER_MODE_REASON_START_ACTIVITY);
>                     if(Build.DROIDBOOST_ENABLED) {
> 
>                             //VMRuntime.getRuntime().setHeapLaunchMode(true);//AW_code;jiangbin mark for heap-gc
> 
>                             if((targetActivity != null) && targetActivity.isTouchWithLauncherStartIntent()) {
>                                mPowerHintAnimatorScale = mService.mWindowManager.setLaunchValueAnimatorScale(AW_LAUNCH_VALUE_ANIMATOR_SCALE);
>                                if(mPowerHintAnimatorScale) {
>                                    mService.mWindowManager.setLaunchSkipAnimatorFrame(true);
>                                }
>                             mPowerHintTouchWithLauncherStart = true;
> 
>                             }
> 
>                         }
>                     }
> 
>                     mPowerHintSent = true;
>                 }
>             }
3565c3690
<     }
---
>         /*end*/
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/wm/Task.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/wm/Task.java
313a314,320
> 
>     /*AW_code: check_app_name control --author:jiangbin 0918*/
>      public native int checkFileName(String name);
>      /*end*/
> 
> 
> 
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/wm/WindowManagerService.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/wm/WindowManagerService.java
170d169
< import android.hardware.configstore.V1_0.ISurfaceFlingerConfigs;
171a171,173
> import android.hardware.configstore.V1_1.DisplayOrientation;
> import android.hardware.configstore.V1_1.ISurfaceFlingerConfigs;
> import android.hardware.configstore.V1_1.OptionalDisplayOrientation;
222a225
> import android.view.DisplayAddress;
468a472,474
>     private @Surface.Rotation int mPrimaryDisplayOrientation = Surface.ROTATION_0;
>     private DisplayAddress mPrimaryDisplayPhysicalAddress;
> 
2464,2473c2470,2484
<             final DisplayInfo rotatedDisplayInfo =
<                     win.mToken.getFixedRotationTransformDisplayInfo();
<             if (rotatedDisplayInfo != null) {
<                 outSurfaceControl.setTransformHint(rotatedDisplayInfo.rotation);
<             } else {
<                 // We have to update the transform hint of display here, but we need to get if from
<                 // SurfaceFlinger, so set it as rotation of display for most cases, then
<                 // SurfaceFlinger would still update the transform hint of display in next frame.
<                 outSurfaceControl.setTransformHint(displayContent.getDisplayInfo().rotation);
<             }
---
>             final DisplayInfo displayInfo = win.getDisplayInfo();
>             int transformHint = displayInfo.rotation;
>             // If the window is on the primary display, use the panel orientation to adjust the
>             // transform hint
>             final boolean isPrimaryDisplay = displayInfo.address != null &&
>                     displayInfo.address.equals(mPrimaryDisplayPhysicalAddress);
>             if (isPrimaryDisplay) {
>                 transformHint = (transformHint + mPrimaryDisplayOrientation) % 4;
>             }
>             outSurfaceControl.setTransformHint(transformHint);
>             ProtoLog.v(WM_DEBUG_ORIENTATION,
>                     "Passing transform hint %d for window %s%s",
>                     transformHint, win,
>                     isPrimaryDisplay ? " on primary display with orientation "
>                             + mPrimaryDisplayOrientation : "");
2720,2721c2731,2732
<     public boolean attachWindowContextToDisplayArea(IBinder clientToken, int type, int displayId,
<             Bundle options) {
---
>     public Configuration attachWindowContextToDisplayArea(IBinder clientToken, int
>             type, int displayId, Bundle options) {
2732c2743
<                     return false;
---
>                     return null;
2737a2749,2750
>                 // TODO(b/190019118): Avoid to send onConfigurationChanged because it has been done
>                 //  in return value of attachWindowContextToDisplayArea.
2740c2753
<                 return true;
---
>                 return da.getConfiguration();
3543a3557,3612
> 
> 
>     /*AW_code:add skip animation and scale hook for app-start performance;jiangbin 200915*/
>     public boolean setLaunchValueAnimatorScale(float durationScale) {
>         Slog.w(TAG,"setLaunchValueAnimatorScale "+ durationScale );
>         boolean canChangeScale = false;
>         if(((mAnimatorDurationScaleSetting == 1.0f) && (durationScale < 1.0f)) //reduce scale for performance
>           || (durationScale == 1.0f)) {//restore scale
>             canChangeScale = true;
>             if(durationScale == 1.0f) {
>                 mH.sendEmptyMessageDelayed(H.NEW_ANIMATOR_SCALE,500);//restore depend mAnimatorDurationScaleSetting
> 
>             }else {
>                 ValueAnimator.setDurationScale(durationScale);
>                 ArrayList<IWindowSessionCallback> callbacks
>                         = new ArrayList<IWindowSessionCallback>();
>                 synchronized (mWindowMap) {
>                     for (int i=0; i<mSessions.size(); i++) {
>                         callbacks.add(mSessions.valueAt(i).mCallback);
>                     }
>                 }
>                 for (int i=0; i<callbacks.size(); i++) {
>                     try {
>                           callbacks.get(i).onAnimatorScaleChanged(durationScale);
>                         } catch (RemoteException e) {
>                         }
>                 }
>             }
>         }
>         Slog.w(TAG,"setLaunchValueAnimatorScale return "+ canChangeScale);
> 
>         return canChangeScale;
>     }
> 
>     public void setLaunchSkipAnimatorFrame(boolean needskip) {
>         final IBinder flinger = ServiceManager.getService("SurfaceFlinger");
>         //Log.w(TAG,"setLaunchSkipAnimatorFrame "+ needskip );
>         if (flinger != null) {
>             final Parcel data = Parcel.obtain();
>             data.writeInterfaceToken("android.ui.ISurfaceComposer");
>             data.writeFloat(needskip? 0.5f:0.0f);/*60fps->30+fps --0.5f*/
>             try {
>                 flinger.transact(1100/*setRefreshSkipScale*/, data, null, 0);
>             } catch (RemoteException ex) {
>                 Slog.e(TAG, "Failed to set saturation", ex);
>             } finally {
>                 data.recycle();
>             }
>         }
> 
>     }
> 
>     /*end*/
> 
> 
> 
3591c3660,3661
<             if (!mForceDisplayEnabled && !checkBootAnimationCompleteLocked()) {
---
>             boolean prefinish_bootanimation = mContext.getResources().getBoolean(R.bool.config_prefinish_bootanimation);
>             if (!prefinish_bootanimation && !mForceDisplayEnabled && !checkBootAnimationCompleteLocked()) {
4870a4941,4943
>         mPrimaryDisplayOrientation = queryPrimaryDisplayOrientation();
>         mPrimaryDisplayPhysicalAddress =
>             DisplayAddress.fromPhysicalDisplayId(SurfaceControl.getPrimaryPhysicalDisplayId());
4889c4962,4963
< 
---
>     // Keep logic in sync with SurfaceFlingerProperties.cpp
>     // Consider exposing properties via ISurfaceComposer instead.
4927a5002,5038
>     }
> 
>     private static int toRealDisplayOrientation(int prop, int user) {
>         return (prop + 4 - (user / 90)) % 4;
>     }
>     private static @Surface.Rotation int queryPrimaryDisplayOrientation() {
>         Optional<SurfaceFlingerProperties.primary_display_orientation_values> prop =
>                 SurfaceFlingerProperties.primary_display_orientation();
>         int user_rotation = SystemProperties.getInt("ro.primary_display.user_rotation", 0);
>         if (prop.isPresent()) {
>             switch (prop.get()) {
>                 case ORIENTATION_90: return toRealDisplayOrientation(Surface.ROTATION_90, user_rotation);
>                 case ORIENTATION_180: return toRealDisplayOrientation(Surface.ROTATION_180, user_rotation);
>                 case ORIENTATION_270: return toRealDisplayOrientation(Surface.ROTATION_270, user_rotation);
>                 case ORIENTATION_0:
>                 default:
>                     return toRealDisplayOrientation(Surface.ROTATION_0, user_rotation);
>             }
>         }
>         try {
>             ISurfaceFlingerConfigs surfaceFlinger = ISurfaceFlingerConfigs.getService();
>             OptionalDisplayOrientation primaryDisplayOrientation =
>                     surfaceFlinger.primaryDisplayOrientation();
>             if (primaryDisplayOrientation != null && primaryDisplayOrientation.specified) {
>                 switch (primaryDisplayOrientation.value) {
>                     case DisplayOrientation.ORIENTATION_90: return toRealDisplayOrientation(Surface.ROTATION_90, user_rotation);
>                     case DisplayOrientation.ORIENTATION_180: return toRealDisplayOrientation(Surface.ROTATION_180, user_rotation);
>                     case DisplayOrientation.ORIENTATION_270: return toRealDisplayOrientation(Surface.ROTATION_270, user_rotation);
>                     case DisplayOrientation.ORIENTATION_0:
>                     default:
>                         return toRealDisplayOrientation(Surface.ROTATION_0, user_rotation);
>                 }
>             }
>         } catch (Exception e) {
>             // Use default value if we can't talk to config store.
>         }
>         return Surface.ROTATION_0;
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/wm/WindowProcessController.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/wm/WindowProcessController.java
190a191,193
>     public long mReseveProcessTime;//AW_CODE
> 
> 
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/java/com/android/server/ZramWriteback.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com/android/server/ZramWriteback.java
65c65
<     private void markPagesAsIdle() {
---
>     private static void markPagesAsIdle() {
74c74
<     private void flushIdlePages() {
---
>     private static void flushIdlePages() {
164a165,188
> 
>     /*AW_CODE:flush zram to disk,luoweijian*/
>     public static void flushZramPages(Context context) {
> 
>         Thread thread = new Thread("ZramWriteback_FlushPages"){
>             @Override
>             public void run(){
>                 while(!isWritebackEnabled()){
>                     Slog.d(TAG,"wait to flush");
>                     try{
>                         Thread.sleep(30000);
>                     }catch(InterruptedException e){
>                         Slog.w(TAG, "wait InterruptedException");
>                     }
>                 }
>                 Slog.d(TAG,"flush zram to disk");
>                 markPagesAsIdle();
>                 flushIdlePages();
>                 Slog.d(TAG,"finish flush zram to disk");
>             }
>         };
>         thread.start();
>     }
>     /*AW_CODE:end*/
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/java/com: aw
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/jni/Android.bp /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/jni/Android.bp
38a39
>         "com_android_server_ActivityManagerService.cpp",
147a149
>         "libcheckfile",
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/jni: com_android_server_ActivityManagerService.cpp
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/jni: com_android_server_ActivityManagerService.h
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/jni/com_android_server_input_InputManagerService.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/jni/com_android_server_input_InputManagerService.cpp
282a283,287
> 
>     /// AW CODE[feat]hide mouse icon when exit mouse mode
>     void setHideOrShowPointerIcon(bool hide);
>     /// AW CODE:add end
> 
397a403,407
> 
>     /// AW CODE[feat]hide mouse icon when exit mouse modei
>     void setHideOrShowPointerIconLocked(bool hide);
>     /// AW CODE:add end
> 
1040a1051,1065
> /// AW CODE[feat]hide mouse icon when exit mouse mode
> void NativeInputManager::setHideOrShowPointerIcon(bool hide) {
>     AutoMutex _l(mLock);
>     setHideOrShowPointerIconLocked(hide);
> }
> 
> void NativeInputManager::setHideOrShowPointerIconLocked(bool hide) REQUIRES(mLock) {
>     std::shared_ptr<PointerController> controller = mLocked.pointerController.lock();
>     if (controller == nullptr) {
>         return;
>     }
>     controller->setHidePointerImmediately(hide);
> }
> /// AW CODE:add end
> 
1816a1842,1850
> /// AW CODE[feat]hide mouse icon when exit mouse mode
> static void nativeSetHidePointerIcon(JNIEnv* /* env */,
>         jclass /* clazz */, jlong ptr, jboolean hide) {
>     NativeInputManager* im = reinterpret_cast<NativeInputManager*>(ptr);
> 
>     im->setHideOrShowPointerIcon(hide);
> }
> /// AW CODE:add end
> 
2314a2349,2352
> 
>         /// AW CODE[feat]hide mouse icon when exit mouse mode
>         {"nativeSetHidePointerIcon", "(JZ)V", (void*)nativeSetHidePointerIcon},
>         /// AW CODE:add end
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/core/jni/onload.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/core/jni/onload.cpp
26a27
> int register_dp_android_server_ActivityManagerService(JNIEnv* env);
80a82
>     register_dp_android_server_ActivityManagerService(env);
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java
12646a12647,12653
>         public @Nullable ComponentName getProfileOwnerOrDeviceOwnerSupervisionComponent(
>                 @NonNull UserHandle userHandle) {
>             return DevicePolicyManagerService.this.getProfileOwnerOrDeviceOwnerSupervisionComponent(
>                     userHandle);
>         }
> 
>         @Override
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/java/com/android/server/SystemServer.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/java/com/android/server/SystemServer.java
97a98
> import com.android.internal.os.ClassLoaderFactory;
166a168,170
> /// AW CODE[feat]add TvWindowManager and key mouse
> import com.android.server.policy.TvWindowManager;
> /// AW CODE:add end
206a211,212
> // AW: add for BOOTEVENT
> import com.aw.server.AwSystemServer;
214a221,223
> import java.lang.reflect.InvocationTargetException;
> import java.lang.reflect.Method;
> import java.lang.reflect.Modifier;
223a233
> import dalvik.system.DexClassLoader;
387c397,400
< 
---
>     ///AW CODE: [feat] add PPPOE_SERVICE_CLASS
>     private static final String PPPOE_SERVICE_CLASS =
>             "com.android.server.pppoe.PppoeService";
>     ///AW: add end
430a444,445
>     private static final String LOAD_PREINSTALLED_SYSTEM_FONT_MAP = "loadPreinstalledSystemFontMap";
>     private static final String START_FONT_MANAGER_SERVICE = "StartFontManagerService";
440a456,457
>     // AW: add for BOOTEVENT
>     private static AwSystemServer sAwSystemServerIns = AwSystemServer.getInstance();
722a740,741
>             // AW:BOOTEVENT
>             sAwSystemServerIns.logBootEvent("Android:SysServerInit_START");
841a861,862
>             // AW:BOOTEVENT
>             sAwSystemServerIns.logBootEvent("Android:loadPreinstalledSystemFontMap start");
846c867,872
<                 Typeface.loadPreinstalledSystemFontMap();
---
>                 SystemServerInitThreadPool.submit(() -> {
>                     TimingsTraceAndSlog traceLog = TimingsTraceAndSlog.newAsyncLog();
>                     traceLog.traceBegin(LOAD_PREINSTALLED_SYSTEM_FONT_MAP);
>                     Typeface.loadPreinstalledSystemFontMap();
>                     traceLog.traceEnd();
>                 }, LOAD_PREINSTALLED_SYSTEM_FONT_MAP);
847a874,875
>             // AW:BOOTEVENT
>             sAwSystemServerIns.logBootEvent("Android:loadPreinstalledSystemFontMap end");
869a898,899
>         // AW:BOOTEVENT
>         sAwSystemServerIns.logBootEvent("Android:InitBeforeStartServices end");
876a907,924
>             /// AW CODE:boot:reflect VMRuntime setVerifierEnabled
>             Method m = null;
>             try {
>                 m = VMRuntime.class.getDeclaredMethod("setVerifierEnabled", boolean.class);
>             } catch (NoSuchMethodException ex) {
>                 Slog.d(TAG, "VMRuntime.setVerifierEnabled not found.");
>             }
>             if (m != null) {
>                 try {
>                     m.invoke(null, false);
>                     Slog.d(TAG, "VMRuntime.setVerifierEnabled(false)");
>                 } catch (IllegalAccessException ex) {
>                     Slog.d(TAG, "VMRuntime.setVerifierEnabled failed.");
>                 } catch (InvocationTargetException ex) {
>                     Slog.d(TAG, "VMRuntime.setVerifierEnabled failed.");
>                 }
>             }
>             /// AW CODE:end
879a928,939
>             /// AW CODE:boot:reflect VMRuntime setVerifierEnabled
>             if (m != null) {
>                 try {
>                     m.invoke(null, true);
>                     Slog.d(TAG, "VMRuntime.setVerifierEnabled(true)");
>                 } catch (IllegalAccessException ex) {
>                     Slog.d(TAG, "VMRuntime.setVerifierEnabled failed.");
>                 } catch (InvocationTargetException ex) {
>                     Slog.d(TAG, "VMRuntime.setVerifierEnabled failed.");
>                 }
>             }
>             /// AW CODE:end
901a962,963
>         // AW:BOOTEVENT
>         sAwSystemServerIns.logBootEvent("Android:SysServerInit_END");
1079a1142,1153
>         if (!SystemProperties.getBoolean("config.diable_awbms", false)) {
>             t.traceBegin("StartAwbms");
>             try {
>                 new Thread(() -> {
>                     startAwbms();
>                 }).start();
>             } catch (Throwable e) {
>                 reportWtf("starting Awbms", e);
>             }
>             t.traceEnd();
>         }
> 
1488,1489c1562,1573
<             wm = WindowManagerService.main(context, inputManager, !mFirstBoot, mOnlyCore,
<                     new PhoneWindowManager(), mActivityManagerService.mActivityTaskManager);
---
> 
>             /// AW CODE[feat]add TvWindowManager and key mouse
>             //wm = WindowManagerService.main(context, inputManager, !mFirstBoot, mOnlyCore,
>             //        new TvWindowManager(), mActivityManagerService.mActivityTaskManager);
>             if (SystemProperties.get("ro.build.characteristics").equals("homlet")) {
>                 wm = WindowManagerService.main(context, inputManager, !mFirstBoot, mOnlyCore,
>                         new TvWindowManager(), mActivityManagerService.mActivityTaskManager);
>             } else {
>                 wm = WindowManagerService.main(context, inputManager, !mFirstBoot, mOnlyCore,
>                         new PhoneWindowManager(), mActivityManagerService.mActivityTaskManager);
>             }
>             /// AW CODE:add end
1815,1817c1899,1904
<             t.traceBegin("StartFontManagerService");
<             mSystemServiceManager.startService(new FontManagerService.Lifecycle(context, safeMode));
<             t.traceEnd();
---
>             SystemServerInitThreadPool.submit(() -> {
>                 TimingsTraceAndSlog traceLog = TimingsTraceAndSlog.newAsyncLog();
>                 traceLog.traceBegin("START_FONT_MANAGER_SERVICE");
>                 mSystemServiceManager.startService(new FontManagerService.Lifecycle(context, safeMode));
>                 traceLog.traceEnd();
>             }, "START_FONT_MANAGER_SERVICE");
1912a2000,2012
>             ///AW CODE: [feat] start service
>             if (SystemProperties.get("ro.product.platform").equals("homlet")||
>             "homlet".equals(SystemProperties.get("ro.build.characteristics", null))||
>             "stb".equals(SystemProperties.get("ro.build.characteristics", null))) {
>                 if (mPackageManager.hasSystemFeature(PackageManager.FEATURE_PPPOE) ||
>                     mPackageManager.hasSystemFeature(PackageManager.FEATURE_USB_HOST)) {
>                     t.traceBegin("StartPppoe");
>                     mSystemServiceManager.startService(PPPOE_SERVICE_CLASS);
>                     t.traceEnd();
>                 }
>             }
>             ///AW:add end
> 
2086a2187,2201
> 
>             if("homlet".equals(SystemProperties.get("ro.build.characteristics", "tablet"))) {
>                 try {
>                     Slog.i(TAG, "Audio device manager Observer");
>                     String optimizedDexOutputPath = Environment.getExternalStorageDirectory().toString();
>                     DexClassLoader classloader = new DexClassLoader("system/framework/softwinner.audio.jar", optimizedDexOutputPath, null, this.getClass().getClassLoader());
>                     Class<?> clazz = (Class<Object>) classloader.loadClass("com.android.server.AudioDeviceManagerObserver");
>                     Method method = clazz.getDeclaredMethod("getInstance", Context.class);
>                     method.setAccessible(true);
>                     method.invoke(null, context);
>                 } catch (Throwable e) {
>                     reportWtf("Failure starting AudioDeviceManagerObserver", e);
>                 }
>             }
> 
2774a2890,2891
>             // AW:BOOTEVENT
>             sAwSystemServerIns.logBootEvent("SystemServer:NetworkStatsService systemReady");
2801a2919,2920
>             // AW:BOOTEVENT
>             sAwSystemServerIns.logBootEvent("SystemServer:ConnectivityService systemReady");
2926a3046,3047
>             // AW:BOOTEVENT
>             sAwSystemServerIns.logBootEvent("SystemServer:PhaseThirdPartyAppsCanStart");
3021a3143,3192
>     }
> 
>     static final void startAwbms() {
>         callClassMain("/system/framework/awbms.jar", "com.softwinner.awbms.Awbms");
>     }
> 
>     static final void callClassMain(final String classPath, final String className) {
>         Class<?> cl;
>         ClassLoader classLoader = ClassLoaderFactory.createClassLoader(classPath, null /* libraryPath */, null /* libraryPath */,
>                 ClassLoader.getSystemClassLoader(), Build.VERSION.SDK_INT /* targetSdkVersion */, true /* isNamespaceShared */,
>                 null /* classLoaderName */);
> 
>         try {
>             cl = Class.forName(className, true, classLoader);
>         } catch (ClassNotFoundException ex) {
>             throw new RuntimeException(
>                     "Missing class when invoking static main " + className,
>                     ex);
>         }
> 
>         Method m;
>         try {
>             m = cl.getMethod("main", new Class[] { String[].class });
>         } catch (NoSuchMethodException ex) {
>             throw new RuntimeException(
>                     "Missing static main on " + className, ex);
>         } catch (SecurityException ex) {
>             throw new RuntimeException(
>                     "Problem getting static main on " + className, ex);
>         }
> 
>         int modifiers = m.getModifiers();
>         if (! (Modifier.isStatic(modifiers) && Modifier.isPublic(modifiers))) {
>             throw new RuntimeException(
>                     "Main method is not public and static on " + className);
>         }
> 
>         try {
>             m.invoke(null, new Object[] { null });
>         } catch (IllegalAccessException ex) {
>             throw new RuntimeException(ex);
>         } catch (InvocationTargetException ex) {
>             Throwable cause = ex.getCause();
>             if (cause instanceof RuntimeException) {
>                 throw (RuntimeException) cause;
>             } else if (cause instanceof Error) {
>                 throw (Error) cause;
>             }
>             throw new RuntimeException(ex);
>         }
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/tests/mockingservicestests/src/com/android/server/location/provider/LocationProviderManagerTest.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/tests/mockingservicestests/src/com/android/server/location/provider/LocationProviderManagerTest.java
908a909,923
>     public void testProviderRequest_DelayedRequest_Remove() {
>         mProvider.setProviderLocation(createLocation(NAME, mRandom));
> 
>         ILocationListener listener1 = createMockLocationListener();
>         LocationRequest request1 = new LocationRequest.Builder(60000)
>                 .setWorkSource(WORK_SOURCE)
>                 .build();
>         mManager.registerLocationRequest(request1, IDENTITY, PERMISSION_FINE, listener1);
>         mManager.unregisterLocationRequest(listener1);
> 
>         mInjector.getAlarmHelper().incrementAlarmTime(60000);
>         assertThat(mProvider.getRequest().isActive()).isFalse();
>     }
> 
>     @Test
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/tests/mockingservicestests/src/com/android/server/usage/UserUsageStatsServiceTest.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/tests/mockingservicestests/src/com/android/server/usage/UserUsageStatsServiceTest.java
75c75
<         mService.init(System.currentTimeMillis(), installedPkgs);
---
>         mService.init(System.currentTimeMillis(), installedPkgs, true);
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/tests/wmtests/src/com/android/server/wm/InputMethodMenuControllerTest.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/tests/wmtests/src/com/android/server/wm/InputMethodMenuControllerTest.java
85c85
<             return true;
---
>             return dc.getImeContainer().getConfiguration();
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/usage/java/com/android/server/usage/UsageStatsService.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/usage/java/com/android/server/usage/UsageStatsService.java
382a383
>         final boolean deleteObsoleteData = shouldDeleteObsoleteData(UserHandle.of(userId));
405c406
<                     installedPackages);
---
>                     installedPackages, deleteObsoleteData);
599c600
<             HashMap<String, Long> installedPackages) {
---
>             HashMap<String, Long> installedPackages, boolean deleteObsoleteData) {
605c606
<             service.init(currentTimeMillis, installedPackages);
---
>             service.init(currentTimeMillis, installedPackages, deleteObsoleteData);
1167a1169,1172
>         // don't update the mappings if a profile user is defined
>         if (!shouldDeleteObsoleteData(UserHandle.SYSTEM)) {
>             return true; // return true so job scheduler doesn't reschedule the job
>         }
1311a1317,1323
>     private boolean shouldDeleteObsoleteData(UserHandle userHandle) {
>         final DevicePolicyManagerInternal dpmInternal = getDpmInternal();
>         // If a profile owner is not defined for the given user, obsolete data should be deleted
>         return dpmInternal == null
>                 || dpmInternal.getProfileOwnerOrDeviceOwnerSupervisionComponent(userHandle) == null;
>     }
> 
2535,2536c2547,2552
<             mHandler.obtainMessage(MSG_PACKAGE_REMOVED, getChangingUserId(), 0, packageName)
<                     .sendToTarget();
---
>             final int changingUserId = getChangingUserId();
>             // Only remove the package's data if a profile owner is not defined for the user
>             if (shouldDeleteObsoleteData(UserHandle.of(changingUserId))) {
>                 mHandler.obtainMessage(MSG_PACKAGE_REMOVED, changingUserId, 0, packageName)
>                         .sendToTarget();
>             }
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/services/usage/java/com/android/server/usage/UserUsageStatsService.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/services/usage/java/com/android/server/usage/UserUsageStatsService.java
118,119c118,120
<     void init(final long currentTimeMillis, HashMap<String, Long> installedPackages) {
<         readPackageMappingsLocked(installedPackages);
---
>     void init(final long currentTimeMillis, HashMap<String, Long> installedPackages,
>             boolean deleteObsoleteData) {
>         readPackageMappingsLocked(installedPackages, deleteObsoleteData);
183c184,185
<     private void readPackageMappingsLocked(HashMap<String, Long> installedPackages) {
---
>     private void readPackageMappingsLocked(HashMap<String, Long> installedPackages,
>             boolean deleteObsoleteData) {
188c190
<         if (mUserId != UserHandle.USER_SYSTEM) {
---
>         if (mUserId != UserHandle.USER_SYSTEM && deleteObsoleteData) {
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/startop/iorap/src/com/google/android/startop/iorap/IorapForwardingService.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/startop/iorap/src/com/google/android/startop/iorap/IorapForwardingService.java
33a34
> import android.os.Build;
173c174
<             getMendelFlag("iorap_perfetto_enable", "iorapd.perfetto.enable", false);
---
>             getMendelFlag("iorap_perfetto_enable", "iorapd.perfetto.enable",true/*AW_CODE default enable*/);
175c176
<             getMendelFlag("iorap_readahead_enable", "iorapd.readahead.enable", false);
---
>             getMendelFlag("iorap_readahead_enable", "iorapd.readahead.enable",true/*AW_CODE default enable*/);
210a212,216
> 
>             if(Build.DROIDBOOST_ENABLED) {
>                 SystemProperties.set("persist.device_config.runtime_native_boot.iorap_perfetto_enable",IS_ENABLED? "true":"false");
>                 SystemProperties.set("persist.device_config.runtime_native_boot.iorap_readahead_enable",IS_ENABLED? "true":"false");
>             }
217a224
> 
218a226
> 
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/telephony/java/android/telephony/TelephonyManager.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/telephony/java/android/telephony/TelephonyManager.java
12502a12503,12523
>         int callingUid = Binder.getCallingUid();
>         int packageUid;
>         try {
>             packageUid = mContext.getPackageManager().getPackageUid("android.telephony.cts", 0);
>             if (packageUid == callingUid) {
>                 Log.d(TAG, "Claim do not support mobile network during cts net testcase.");
>                 return false;
>             }
>         } catch (Exception e) {
>             Log.e("TAG", "Exception = "  + e );
>         }
> 
>         try {
>             packageUid = mContext.getPackageManager().getPackageUid("android.net.cts", 0);
>             if (packageUid == callingUid) {
>                 Log.d(TAG, "Claim do not support mobile network during cts net testcase.");
>                 return false;
>             }
>         } catch (Exception e) {
>             Log.e("TAG", "Exception = "  + e );
>         }
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/telephony/java/com/android/internal/telephony/TelephonyIntents.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/telephony/java/com/android/internal/telephony/TelephonyIntents.java
183a184,189
>      *
>      * @hide
>      */
>     public static final String ACTION_RADIO_STATE_CHANGED = Intent.ACTION_RADIO_STATE_CHANGED;
> 
>     /**
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/base/test-mock/src/android/test/mock/MockPackageManager.java /home/yajat/Desktop/H618-Android12-Src/frameworks/base/test-mock/src/android/test/mock/MockPackageManager.java
1251a1252,1260
>     /*AW_code;add interface;jiangbin;191011*/
>     /**
>      * @hide
>      */
>     public boolean runBackgroundDexoptJob(List<String> packageNames){
>         throw new UnsupportedOperationException();
>     }
>     /*end*/
> 
Only in /home/yajat/Desktop/aosp12_r11/frameworks/compile/libbcc: .git
Only in /home/yajat/Desktop/aosp12_r11/frameworks/compile/mclinker: .git
Only in /home/yajat/Desktop/aosp12_r11/frameworks/compile/slang: .git
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/ex/camera2/portability/src/com/android/ex/camera2/portability/AndroidCamera2AgentImpl.java /home/yajat/Desktop/H618-Android12-Src/frameworks/ex/camera2/portability/src/com/android/ex/camera2/portability/AndroidCamera2AgentImpl.java
1294a1295
>         private final int mFirstExternalCameraId;
1303a1305
>             int firstExternalId = NO_DEVICE;
1315a1318,1321
>                     if (firstFrontId == NO_DEVICE &&
>                             lensDirection == CameraCharacteristics.LENS_FACING_EXTERNAL) {
>                         firstExternalId = id;
>                     }
1321a1328
>             mFirstExternalCameraId = firstExternalId;
1349a1357,1361
>         @Override
>         public int getFirstExternalCameraId() {
>             return mFirstExternalCameraId;
>         }
> 
1366a1379,1384
>             }
> 
>             @Override
>             public boolean isFacingExternal() {
>                 return mCameraInfo.get(CameraCharacteristics.LENS_FACING)
>                         .equals(CameraCharacteristics.LENS_FACING_EXTERNAL);
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/ex/camera2/portability/src/com/android/ex/camera2/portability/AndroidCameraAgentImpl.java /home/yajat/Desktop/H618-Android12-Src/frameworks/ex/camera2/portability/src/com/android/ex/camera2/portability/AndroidCameraAgentImpl.java
41a42
> import java.util.HashMap;
129c130
<         private final Camera.CameraInfo[] mCameraInfos;
---
>         private final HashMap<Integer, Camera.CameraInfo> mCameraInfos;
132a134
>         private final int mFirstExternalCameraId;
134,136c136,137
<         private AndroidCameraDeviceInfo(Camera.CameraInfo[] info, int numberOfCameras,
<                 int firstBackCameraId, int firstFrontCameraId) {
< 
---
>         private AndroidCameraDeviceInfo(HashMap<Integer, Camera.CameraInfo> info, int numberOfCameras,
>                 int firstBackCameraId, int firstFrontCameraId, int firstExternalCameraId) {
140a142
>             mFirstExternalCameraId = firstExternalCameraId;
145c147
<             Camera.CameraInfo[] cameraInfos;
---
>             HashMap<Integer, Camera.CameraInfo> cameraInfos;
148c150,151
<                 cameraInfos = new Camera.CameraInfo[numberOfCameras];
---
>                 Log.d(TAG, "create with number " + numberOfCameras);
>                 cameraInfos = new HashMap<Integer, Camera.CameraInfo>();
150,151c153,154
<                     cameraInfos[i] = new Camera.CameraInfo();
<                     Camera.getCameraInfo(i, cameraInfos[i]);
---
>                     cameraInfos.put(i, new Camera.CameraInfo());
>                     Camera.getCameraInfo(i, cameraInfos.get(i));
159a163
>             int firstExternal = NO_DEVICE;
162c166
<                 if (cameraInfos[i].facing == Camera.CameraInfo.CAMERA_FACING_BACK) {
---
>                 if (cameraInfos.get(i).facing == Camera.CameraInfo.CAMERA_FACING_BACK) {
164,167c168,172
<                 } else {
<                     if (cameraInfos[i].facing == Camera.CameraInfo.CAMERA_FACING_FRONT) {
<                         firstFront = i;
<                     }
---
>                 } else if (cameraInfos.get(i).facing == Camera.CameraInfo.CAMERA_FACING_FRONT) {
>                     firstFront = i;
>                 }
>                 else if (cameraInfos.get(i).facing == Camera.CameraInfo.CAMERA_FACING_EXTERNAL) {
>                     firstExternal = i;
171c176
<             return new AndroidCameraDeviceInfo(cameraInfos, numberOfCameras, firstBack, firstFront);
---
>             return new AndroidCameraDeviceInfo(cameraInfos, numberOfCameras, firstBack, firstFront, firstExternal);
176c181
<             Camera.CameraInfo info = mCameraInfos[cameraId];
---
>             Camera.CameraInfo info = mCameraInfos.get(cameraId);
178a184,185
>             } else if (!mCameraInfos.isEmpty()){
>                 return new AndroidCharacteristics(mCameraInfos.get(0));
198a206,210
>         @Override
>         public int getFirstExternalCameraId() {
>             return mFirstExternalCameraId;
>         }
> 
213a226,230
>             }
> 
>             @Override
>             public boolean isFacingExternal() {
>                 return mCameraInfo.facing == Camera.CameraInfo.CAMERA_FACING_EXTERNAL;
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/ex/camera2/portability/src/com/android/ex/camera2/portability/CameraDeviceInfo.java /home/yajat/Desktop/H618-Android12-Src/frameworks/ex/camera2/portability/src/com/android/ex/camera2/portability/CameraDeviceInfo.java
54a55,60
>      * @return The first (lowest) ID of the external cameras or {@code NO_DEVICE}
>      *         if not available.
>      */
>     int getFirstExternalCameraId();
> 
>     /**
68a75,80
> 
>         /**
>          * @return Whether the camera faces any other direction.
>          */
>         public abstract boolean isFacingExternal();
> 
Only in /home/yajat/Desktop/aosp12_r11/frameworks/ex: .git
Only in /home/yajat/Desktop/aosp12_r11/frameworks/hardware/interfaces: .git
Only in /home/yajat/Desktop/aosp12_r11/frameworks/layoutlib: .git
Only in /home/yajat/Desktop/aosp12_r11/frameworks/libs/modules-utils: .git
Only in /home/yajat/Desktop/aosp12_r11/frameworks/libs/native_bridge_support: .git
Only in /home/yajat/Desktop/aosp12_r11/frameworks/libs/net: .git
Only in /home/yajat/Desktop/aosp12_r11/frameworks/libs/service_entitlement: .git
Only in /home/yajat/Desktop/aosp12_r11/frameworks/libs/systemui: .git
Only in /home/yajat/Desktop/aosp12_r11/frameworks/minikin: .git
Only in /home/yajat/Desktop/aosp12_r11/frameworks/multidex: .git
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/native/cmds/atrace/atrace.rc /home/yajat/Desktop/H618-Android12-Src/frameworks/native/cmds/atrace/atrace.rc
225,227d224
< # Tracing disabled by default
<     write /sys/kernel/debug/tracing/tracing_on 0
<     write /sys/kernel/tracing/tracing_on 0
347a345,362
> 
> #Tracing enabled
> on property:persist.debug.traced.enable=1
>     write /sys/kernel/debug/tracing/tracing_on 1
>     write /sys/kernel/tracing/tracing_on 1
>     setprop debug.atrace.tags.enableflags 802922
>     setprop persist.traced.enable 0
> 
> # Stop tracing on the boot_completed
> on property:persist.debug.traced.enable=1 && property:sys.boot_completed=1
>     write /sys/kernel/tracing/tracing_on 0
>     write /sys/kernel/tracing/events/ext4/enable 0
>     write /sys/kernel/tracing/events/block/enable 0
> 
> # Stop tracing on the boot_completed
> on property:persist.sys.without.treadahead=1 && property:sys.boot_completed=1
>     write /sys/kernel/tracing/tracing_on 0
> 
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/native/cmds/dumpstate/dumpstate.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/native/cmds/dumpstate/dumpstate.cpp
171a172
> #define AWLOG_DATA_DIR "/data/media/awlog"
1845a1847
>     ds.AddDir(AWLOG_DATA_DIR, true);
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/native/cmds/installd/dexopt.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/native/cmds/installd/dexopt.cpp
283,284c283,286
< static void SetDex2OatScheduling(bool set_to_bg) {
<     if (set_to_bg) {
---
> /*AW_CODE;check add lowest priority policy if launched with pgo;jiangbin;191010*/
> static void SetDex2OatScheduling(bool set_to_bg,bool set_lowest_bg) {
>     if (set_to_bg || set_lowest_bg) {
> 
289c291
<         if (setpriority(PRIO_PROCESS, 0, ANDROID_PRIORITY_BACKGROUND) < 0) {
---
>         if (setpriority(PRIO_PROCESS, 0, set_lowest_bg? ANDROID_PRIORITY_LOWEST : ANDROID_PRIORITY_BACKGROUND) < 0) {
294a297
> /*end*/
1706a1710,1716
> 
>     /*AW_CODE; add check launched with PGO-immediately flag;jiangbin;191009*/
>     bool launched_with_pgo = (dexopt_flags & DEXOPT_LAUNCHEDWITHPGO) != 0;
>     /*end*/
> 
> 
> 
1856c1866
<         SetDex2OatScheduling(boot_complete);
---
>         SetDex2OatScheduling(boot_complete,launched_with_pgo/*AW_CODE;check set-to-bg if launched with pgo;jiangbin;191010*/);
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/native/cmds/installd/installd_constants.h /home/yajat/Desktop/H618-Android12-Src/frameworks/native/cmds/installd/installd_constants.h
59a60,66
> 
> /*AW_CODE;add dexopt flag for PGO-immediately;jiangbin;191009*/
> constexpr int DEXOPT_LAUNCHEDWITHPGO = 1 << 30;
> /*end*/
> 
> 
> 
74c81,82
<     | DEXOPT_FOR_RESTORE;
---
>     | DEXOPT_FOR_RESTORE
>     | DEXOPT_LAUNCHEDWITHPGO;//AW_CODE;jiangbin
Only in /home/yajat/Desktop/aosp12_r11/frameworks/native: .git
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/native/include/android/keycodes.h /home/yajat/Desktop/H618-Android12-Src/frameworks/native/include/android/keycodes.h
779c779,815
<     AKEYCODE_PROFILE_SWITCH = 288
---
>     AKEYCODE_PROFILE_SWITCH = 288,
> 
>     AKEYCODE_MIC_VOLUME_UP   = 370,
>     AKEYCODE_MIC_VOLUME_DOWN = 371,
>     AKEYCODE_KOUT_VOLUME_UP  = 372,
>     AKEYCODE_KOUT_VOLUME_DOWN = 373,
> 
>     //HISENSE SECTION,RANG 4201-4300
>     AKEYCODE_HISENSE_FAC_NEC_OK = 4213,
>     AKEYCODE_HISENSE_FAC_NEC_MAC = 4214,
>     AKEYCODE_HISENSE_FAC_NEC_IP = 4215,
>     AKEYCODE_HISENSE_FAC_NEC_M = 4315,
>     AKEYCODE_HISENSE_FAC_NEC_AGING = 4313,
>     AKEYCODE_HISENSE_FAC_NEC_DMP = 4312,
>     AKEYCODE_PRE = 4307,
>     AKEYCODE_NEXT = 4308,
>     AKEYCODE_HISENSE_FAVOURITE_APP = 4229,
>     AKEYCODE_HISENSE_MEDIA_CENTRE = 4320,
>     AKEYCODE_HISENSE_EDUCATION = 4321,
>     AKEYCODE_HISENSE_SHOPPING = 4322,
>     /* add by Gary. start {{----------------------------------- */
>     /* 2011-10-27 */
>     /* add some new keys for TVD */
>     AKEYCODE_TV_SYSTEM       = 10000,
>     AKEYCODE_GOTO            = 10001,
>     AKEYCODE_SUBTITLE        = 10002,
>     AKEYCODE_AUDIO           = 10003,
>     AKEYCODE_ZOOM            = 10004,
>     AKEYCODE_FAVOURITE       = 10006,
>     AKEYCODE_LOOP            = 10007,
>     AKEYCODE_EXPAND          = 10008,
>     AKEYCODE_MOUSE           = 10009,
>     AKEYCODE_MOVIE           = 10010,
>     AKEYCODE_APPS            = 10011,
>     AKEYCODE_BROWSER         = 10012,
>     AKEYCODE_SCREENSHOT      = 10013
>     /* add by Gary. end   -----------------------------------}} */
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/native/include/binder/IInterface.h /home/yajat/Desktop/H618-Android12-Src/frameworks/native/include/binder/IInterface.h
243a244,245
>   "android.hardware.IHDCPObserver",
>   "android.hardware.IHDCP",
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/native/include/binder/IPCThreadState.h /home/yajat/Desktop/H618-Android12-Src/frameworks/native/include/binder/IPCThreadState.h
55a56,62
> 
>     // TODO: Remove the above legacy duplicated function in next version
> #ifndef __ANDROID_VNDK__
>     static  status_t            getProcessFreezeInfo(pid_t pid, uint32_t *sync_received,
>                                                     uint32_t *async_received);
> #endif
> 
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/native/include/gui/BLASTBufferQueue.h /home/yajat/Desktop/H618-Android12-Src/frameworks/native/include/gui/BLASTBufferQueue.h
64a65
>     std::mutex mBufferQueueMutex;
69c70
<     BLASTBufferQueue* mBLASTBufferQueue GUARDED_BY(mMutex);
---
>     BLASTBufferQueue* mBLASTBufferQueue GUARDED_BY(mBufferQueueMutex);
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/native/include/gui/ISurfaceComposer.h /home/yajat/Desktop/H618-Android12-Src/frameworks/native/include/gui/ISurfaceComposer.h
142a143,144
>     virtual status_t getPrimaryPhysicalDisplayId(PhysicalDisplayId*) const = 0;
> 
626a629
>         GET_PRIMARY_PHYSICAL_DISPLAY_ID,
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/native/include/gui/SurfaceComposerClient.h /home/yajat/Desktop/H618-Android12-Src/frameworks/native/include/gui/SurfaceComposerClient.h
309a310
>     static status_t getPrimaryPhysicalDisplayId(PhysicalDisplayId*);
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/native/include/gui/view/Surface.h /home/yajat/Desktop/H618-Android12-Src/frameworks/native/include/gui/view/Surface.h
25a26
> #include <gui/IGraphicBufferProducer.h>
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/native/libs/binder/binder_module.h /home/yajat/Desktop/H618-Android12-Src/frameworks/native/libs/binder/binder_module.h
76a77,78
>     // bit 0: received sync transaction after being frozen
>     // bit 1: new pending sync transaction during freezing
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/native/libs/binder/BpBinder.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/native/libs/binder/BpBinder.cpp
39c39,40
< std::unordered_map<int32_t,uint32_t> BpBinder::sTrackingMap;
---
> std::unordered_map<int32_t, uint32_t> BpBinder::sTrackingMap;
> std::unordered_map<int32_t, uint32_t> sLastLimitCallbackMap;
119a121,131
>             trackedValue = trackedValue & COUNTING_VALUE_MASK;
>             uint32_t lastLimitCallbackAt = sLastLimitCallbackMap[trackedUid];
> 
>             if (trackedValue > lastLimitCallbackAt &&
>                 (trackedValue - lastLimitCallbackAt > sBinderProxyCountHighWatermark)) {
>                 ALOGE("Still too many binder proxy objects sent to uid %d from uid %d (%d proxies "
>                       "held)",
>                       getuid(), trackedUid, trackedValue);
>                 if (sLimitCallback) sLimitCallback(trackedUid);
>                 sLastLimitCallbackMap[trackedUid] = trackedValue;
>             }
125a138
>                 sLastLimitCallbackMap[trackedUid] = trackedValue & COUNTING_VALUE_MASK;
455c468
<                                    getuid(), mTrackedUid, sBinderProxyCountLowWatermark);
---
>                       getuid(), sBinderProxyCountLowWatermark, mTrackedUid);
456a470
>                 sLastLimitCallbackMap.erase(mTrackedUid);
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/native/libs/binder/include/binder/IInterface.h /home/yajat/Desktop/H618-Android12-Src/frameworks/native/libs/binder/include/binder/IInterface.h
243a244,245
>   "android.hardware.IHDCPObserver",
>   "android.hardware.IHDCP",
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/native/libs/binder/include/binder/IPCThreadState.h /home/yajat/Desktop/H618-Android12-Src/frameworks/native/libs/binder/include/binder/IPCThreadState.h
55a56,62
> 
>     // TODO: Remove the above legacy duplicated function in next version
> #ifndef __ANDROID_VNDK__
>     static  status_t            getProcessFreezeInfo(pid_t pid, uint32_t *sync_received,
>                                                     uint32_t *async_received);
> #endif
> 
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/native/libs/binder/IPCThreadState.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/native/libs/binder/IPCThreadState.cpp
1400a1401,1419
> #ifndef __ANDROID_VNDK__
> status_t IPCThreadState::getProcessFreezeInfo(pid_t pid, uint32_t *sync_received,
>                                               uint32_t *async_received)
> {
>     int ret = 0;
>     binder_frozen_status_info info;
>     info.pid = pid;
> 
> #if defined(__ANDROID__)
>     if (ioctl(self()->mProcess->mDriverFD, BINDER_GET_FROZEN_INFO, &info) < 0)
>         ret = -errno;
> #endif
>     *sync_received = info.sync_recv;
>     *async_received = info.async_recv;
> 
>     return ret;
> }
> #endif
> 
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/native/libs/binder/Parcel.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/native/libs/binder/Parcel.cpp
2144,2145c2144
<             // recover gracefully by clearing out the objects, and releasing the objects we do
<             // know about.
---
>             // recover gracefully by clearing out the objects.
2146a2146
>             android_errorWriteLog(0x534e4554, "203847542");
2149c2149,2151
<             releaseObjects();
---
> 
>             // WARNING: callers of ipcSetDataReference need to make sure they
>             // don't rely on mObjectsSize in their release_func.
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/native/libs/binder/tests/binderLibTest.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/native/libs/binder/tests/binderLibTest.cpp
97c97
<     BINDER_LIB_TEST_REJECT_BUF,
---
>     BINDER_LIB_TEST_REJECT_OBJECTS,
428c428
<     std::ifstream freezer_file("/sys/fs/cgroup/freezer/cgroup.freeze");
---
>     std::ifstream freezer_file("/sys/fs/cgroup/uid_0/cgroup.freeze");
430c430
<     //Pass test on devices where the freezer is not supported
---
>     // Pass test on devices where the cgroup v2 freezer is not supported
436,444d435
<     std::string freezer_enabled;
<     std::getline(freezer_file, freezer_enabled);
< 
<     //Pass test on devices where the freezer is disabled
<     if (freezer_enabled != "1") {
<         GTEST_SKIP();
<         return;
<     }
< 
450,452c441,451
<     EXPECT_EQ(-EAGAIN, IPCThreadState::self()->freeze(pid, 1, 0));
<     EXPECT_EQ(-EAGAIN, IPCThreadState::self()->freeze(pid, 1, 0));
<     EXPECT_EQ(NO_ERROR, IPCThreadState::self()->freeze(pid, 1, 1000));
---
> 
>     // Pass test on devices where BINDER_FREEZE ioctl is not supported
>     int ret = IPCThreadState::self()->freeze(pid, false, 0);
>     if (ret != 0) {
>         GTEST_SKIP();
>         return;
>     }
> 
>     EXPECT_EQ(-EAGAIN, IPCThreadState::self()->freeze(pid, true, 0));
>     EXPECT_EQ(-EAGAIN, IPCThreadState::self()->freeze(pid, true, 0));
>     EXPECT_EQ(NO_ERROR, IPCThreadState::self()->freeze(pid, true, 1000));
462a462,469
>     uint32_t sync_received2, async_received2;
> 
>     EXPECT_EQ(NO_ERROR, IPCThreadState::self()->getProcessFreezeInfo(pid, &sync_received2,
>                 &async_received2));
> 
>     EXPECT_EQ(sync_received2, 1);
>     EXPECT_EQ(async_received2, 0);
> 
1122a1130,1131
>     EXPECT_EQ(data.objectsCount(), 1);
> 
1126c1135
<     EXPECT_THAT(server->transact(BINDER_LIB_TEST_REJECT_BUF, data, &reply),
---
>     EXPECT_THAT(server->transact(BINDER_LIB_TEST_REJECT_OBJECTS, data, &reply),
1129a1139,1176
> TEST_F(BinderLibTest, WeakRejected) {
>     Parcel data, reply;
>     sp<IBinder> server = addServer();
>     ASSERT_TRUE(server != nullptr);
> 
>     auto binder = sp<BBinder>::make();
>     wp<BBinder> wpBinder(binder);
>     flat_binder_object obj{
>             .hdr = {.type = BINDER_TYPE_WEAK_BINDER},
>             .flags = 0,
>             .binder = reinterpret_cast<uintptr_t>(wpBinder.get_refs()),
>             .cookie = reinterpret_cast<uintptr_t>(wpBinder.unsafe_get()),
>     };
>     data.setDataCapacity(1024);
>     // Write a bogus object at offset 0 to get an entry in the offset table
>     data.writeFileDescriptor(0);
>     EXPECT_EQ(data.objectsCount(), 1);
>     uint8_t *parcelData = const_cast<uint8_t *>(data.data());
>     // And now, overwrite it with the weak binder
>     memcpy(parcelData, &obj, sizeof(obj));
>     data.setDataSize(sizeof(obj));
> 
>     // a previous bug caused other objects to be released an extra time, so we
>     // test with an object that libbinder will actually try to release
>     EXPECT_EQ(OK, data.writeStrongBinder(sp<BBinder>::make()));
> 
>     EXPECT_EQ(data.objectsCount(), 2);
> 
>     // send it many times, since previous error was memory corruption, make it
>     // more likely that the server crashes
>     for (size_t i = 0; i < 100; i++) {
>         EXPECT_THAT(server->transact(BINDER_LIB_TEST_REJECT_OBJECTS, data, &reply),
>                     StatusEq(BAD_VALUE));
>     }
> 
>     EXPECT_THAT(server->pingBinder(), StatusEq(NO_ERROR));
> }
> 
1436c1483
<             case BINDER_LIB_TEST_REJECT_BUF: {
---
>             case BINDER_LIB_TEST_REJECT_OBJECTS: {
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/native/libs/gui/BLASTBufferQueue.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/native/libs/gui/BLASTBufferQueue.cpp
121c121
<     Mutex::Autolock lock(mMutex);
---
>     std::scoped_lock lock(mBufferQueueMutex);
126c126
<     Mutex::Autolock lock(mMutex);
---
>     std::scoped_lock lock(mBufferQueueMutex);
459a460
> #if 0
462a464
> #endif
480,482c482
<     if (updateDestinationFrame) {
<         t->setDestinationFrame(mSurfaceControl, Rect(0, 0, mSize.getWidth(), mSize.getHeight()));
<     }
---
>     t->setDestinationFrame(mSurfaceControl, Rect(0, 0, mSize.getWidth(), mSize.getHeight()));
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/native/libs/gui/include/gui/BLASTBufferQueue.h /home/yajat/Desktop/H618-Android12-Src/frameworks/native/libs/gui/include/gui/BLASTBufferQueue.h
64a65
>     std::mutex mBufferQueueMutex;
69c70
<     BLASTBufferQueue* mBLASTBufferQueue GUARDED_BY(mMutex);
---
>     BLASTBufferQueue* mBLASTBufferQueue GUARDED_BY(mBufferQueueMutex);
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/native/libs/gui/include/gui/ISurfaceComposer.h /home/yajat/Desktop/H618-Android12-Src/frameworks/native/libs/gui/include/gui/ISurfaceComposer.h
142a143,144
>     virtual status_t getPrimaryPhysicalDisplayId(PhysicalDisplayId*) const = 0;
> 
626a629
>         GET_PRIMARY_PHYSICAL_DISPLAY_ID,
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/native/libs/gui/include/gui/SurfaceComposerClient.h /home/yajat/Desktop/H618-Android12-Src/frameworks/native/libs/gui/include/gui/SurfaceComposerClient.h
309a310
>     static status_t getPrimaryPhysicalDisplayId(PhysicalDisplayId*);
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/native/libs/gui/include/gui/view/Surface.h /home/yajat/Desktop/H618-Android12-Src/frameworks/native/libs/gui/include/gui/view/Surface.h
25a26
> #include <gui/IGraphicBufferProducer.h>
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/native/libs/gui/ISurfaceComposer.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/native/libs/gui/ISurfaceComposer.cpp
293a294,304
>     status_t getPrimaryPhysicalDisplayId(PhysicalDisplayId* displayId) const override {
>         Parcel data, reply;
>         SAFE_PARCEL(data.writeInterfaceToken, ISurfaceComposer::getInterfaceDescriptor());
>         SAFE_PARCEL(remote()->transact, BnSurfaceComposer::GET_PRIMARY_PHYSICAL_DISPLAY_ID, data,
>                     &reply);
>         uint64_t rawId;
>         SAFE_PARCEL(reply.readUint64, &rawId);
>         *displayId = PhysicalDisplayId(rawId);
>         return NO_ERROR;
>     }
> 
1714a1726,1735
>         }
>         case GET_PRIMARY_PHYSICAL_DISPLAY_ID: {
>             CHECK_INTERFACE(ISurfaceComposer, data, reply);
>             PhysicalDisplayId id;
>             status_t result = getPrimaryPhysicalDisplayId(&id);
>             if (result != NO_ERROR) {
>                 ALOGE("getPrimaryPhysicalDisplayId: Failed to get id");
>                 return result;
>             }
>             return reply->writeUint64(id.value);
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/native/libs/gui/SurfaceComposerClient.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/native/libs/gui/SurfaceComposerClient.cpp
923a924,927
> status_t SurfaceComposerClient::getPrimaryPhysicalDisplayId(PhysicalDisplayId* id) {
>     return ComposerService::getComposerService()->getPrimaryPhysicalDisplayId(id);
> }
> 
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/native/libs/gui/tests/Surface_test.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/native/libs/gui/tests/Surface_test.cpp
696a697
>     status_t getPrimaryPhysicalDisplayId(PhysicalDisplayId*) const override { return NO_ERROR; }
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/native/libs/input/android/os/IInputConstants.aidl /home/yajat/Desktop/H618-Android12-Src/frameworks/native/libs/input/android/os/IInputConstants.aidl
26c26
<     const int UNMULTIPLIED_DEFAULT_DISPATCHING_TIMEOUT_MILLIS = 5000; // 5 seconds
---
>     const int UNMULTIPLIED_DEFAULT_DISPATCHING_TIMEOUT_MILLIS = 10000; // 10 seconds
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/native/libs/input/InputEventLabels.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/native/libs/input/InputEventLabels.cpp
317c317,348
<     DEFINE_KEYCODE(PROFILE_SWITCH)
---
>     DEFINE_KEYCODE(PROFILE_SWITCH), \
>     DEFINE_KEYCODE(MIC_VOLUME_UP), \
>     DEFINE_KEYCODE(MIC_VOLUME_DOWN), \
>     DEFINE_KEYCODE(KOUT_VOLUME_UP), \
>     DEFINE_KEYCODE(KOUT_VOLUME_DOWN), \
>     DEFINE_KEYCODE(HISENSE_FAC_NEC_OK), \
>     DEFINE_KEYCODE(HISENSE_FAC_NEC_MAC), \
>     DEFINE_KEYCODE(HISENSE_FAC_NEC_IP), \
>     DEFINE_KEYCODE(HISENSE_FAC_NEC_M), \
>     DEFINE_KEYCODE(HISENSE_FAC_NEC_AGING), \
>     DEFINE_KEYCODE(HISENSE_FAC_NEC_DMP), \
>     DEFINE_KEYCODE(PRE), \
>     DEFINE_KEYCODE(NEXT), \
>     DEFINE_KEYCODE(HISENSE_FAVOURITE_APP), \
>     DEFINE_KEYCODE(HISENSE_MEDIA_CENTRE), \
>     DEFINE_KEYCODE(HISENSE_EDUCATION), \
>     DEFINE_KEYCODE(HISENSE_SHOPPING), \
>     DEFINE_KEYCODE(TV_SYSTEM), \
>     DEFINE_KEYCODE(GOTO), \
>     DEFINE_KEYCODE(SUBTITLE), \
>     DEFINE_KEYCODE(AUDIO), \
>     DEFINE_KEYCODE(ZOOM), \
>     DEFINE_KEYCODE(FAVOURITE), \
>     DEFINE_KEYCODE(LOOP), \
>     DEFINE_KEYCODE(EXPAND), \
>     DEFINE_KEYCODE(MOUSE), \
>     DEFINE_KEYCODE(MOVIE), \
>     DEFINE_KEYCODE(APPS), \
>     DEFINE_KEYCODE(BROWSER), \
>     DEFINE_KEYCODE(SCREENSHOT), \
>     DEFINE_KEYCODE(MOUSE), \
>     DEFINE_KEYCODE(SCREENSHOT)
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/native/libs/renderengine/include/renderengine/RenderEngine.h /home/yajat/Desktop/H618-Android12-Src/frameworks/native/libs/renderengine/include/renderengine/RenderEngine.h
317,318c317
<     RenderEngine::RenderEngineType renderEngineType =
<             RenderEngine::RenderEngineType::SKIA_GL_THREADED;
---
>     RenderEngine::RenderEngineType renderEngineType = RenderEngine::RenderEngineType::GLES;
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/native/libs/renderengine/skia/SkiaGLRenderEngine.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/native/libs/renderengine/skia/SkiaGLRenderEngine.cpp
427c427,434
< bool SkiaGLRenderEngine::waitFence(base::unique_fd fenceFd) {
---
> void SkiaGLRenderEngine::waitFence(base::borrowed_fd fenceFd) {
>     if (fenceFd.get() >= 0 && !waitGpuFence(fenceFd)) {
>         ATRACE_NAME("SkiaGLRenderEngine::waitFence");
>         sync_wait(fenceFd.get(), -1);
>     }
> }
> 
> bool SkiaGLRenderEngine::waitGpuFence(base::borrowed_fd fenceFd) {
432a440,446
>     // Duplicate the fence for passing to eglCreateSyncKHR.
>     base::unique_fd fenceDup(dup(fenceFd.get()));
>     if (fenceDup.get() < 0) {
>         ALOGE("failed to create duplicate fence fd: %d", fenceDup.get());
>         return false;
>     }
> 
434c448
<     EGLint attribs[] = {EGL_SYNC_NATIVE_FENCE_FD_ANDROID, fenceFd.release(), EGL_NONE};
---
>     EGLint attribs[] = {EGL_SYNC_NATIVE_FENCE_FD_ANDROID, fenceDup.release(), EGL_NONE};
729,736d742
<     if (bufferFence.get() >= 0) {
<         // Duplicate the fence for passing to waitFence.
<         base::unique_fd bufferFenceDup(dup(bufferFence.get()));
<         if (bufferFenceDup < 0 || !waitFence(std::move(bufferFenceDup))) {
<             ATRACE_NAME("Waiting before draw");
<             sync_wait(bufferFence.get(), -1);
<         }
<     }
760a767,769
>     // wait on the buffer to be ready to use prior to using it
>     waitFence(bufferFence);
> 
1014a1024,1029
>             }
> 
>             // if the layer's buffer has a fence, then we must must respect the fence prior to using
>             // the buffer.
>             if (layer->source.buffer.fence != nullptr) {
>                 waitFence(layer->source.buffer.fence->get());
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/native/libs/renderengine/skia/SkiaGLRenderEngine.h /home/yajat/Desktop/H618-Android12-Src/frameworks/native/libs/renderengine/skia/SkiaGLRenderEngine.h
102c102,105
<     bool waitFence(base::unique_fd fenceFd);
---
>     // waitFence attempts to wait in the GPU, and if unable to waits on the CPU instead.
>     void waitFence(base::borrowed_fd fenceFd);
>     bool waitGpuFence(base::borrowed_fd fenceFd);
> 
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/native/services/inputflinger/reader/mapper/CursorInputMapper.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/native/services/inputflinger/reader/mapper/CursorInputMapper.cpp
65c65,72
<       : InputMapper(deviceContext) {}
---
>       : InputMapper(deviceContext) {
>     std::string test("(Test)");
>     std::string::size_type found = deviceContext.getName().rfind(test);
>     if (found != std::string::npos)
>         mOverrideRightClick = false;
>     else
>         mOverrideRightClick = true;
> }
296a304,310
>     // if device is not test hid device, override right btn func.
>     if ((currentButtonState & AMOTION_EVENT_BUTTON_SECONDARY) != 0) {
>         if (mOverrideRightClick) {
>             currentButtonState &= ~AMOTION_EVENT_BUTTON_SECONDARY;
>             currentButtonState |= AMOTION_EVENT_BUTTON_BACK;
>         }
>     }
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/native/services/inputflinger/reader/mapper/CursorInputMapper.h /home/yajat/Desktop/H618-Android12-Src/frameworks/native/services/inputflinger/reader/mapper/CursorInputMapper.h
96a97
>     bool mOverrideRightClick;
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/native/services/inputflinger/reader/mapper/MultiTouchInputMapper.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/native/services/inputflinger/reader/mapper/MultiTouchInputMapper.cpp
260a261
>     int32_t tmpX, tmpY;
293,294c294,313
<         outPointer.x = inSlot->getX();
<         outPointer.y = inSlot->getY();
---
>         tmpX = inSlot->getX();
>         tmpY = inSlot->getY();
>         switch (mParameters.rotation) {
>             case Parameters::ROTATION_90:
>                 std::swap(tmpX, tmpY);
>                 tmpY = mRawPointerAxes.y.maxValue - tmpY;
>                 break;
>            case Parameters::ROTATION_180:
>                 tmpX = mRawPointerAxes.x.maxValue - tmpX;
>                 tmpY = mRawPointerAxes.y.maxValue - tmpY;
>                 break;
>             case Parameters::ROTATION_270:
>                 std::swap(tmpX, tmpY);
>                 tmpX = mRawPointerAxes.x.maxValue - tmpX;
>                 break;
>             default:
>                 break;
>         }
>         outPointer.x = tmpX;
>         outPointer.y = tmpY;
358,359c377,384
<     getAbsoluteAxisInfo(ABS_MT_POSITION_X, &mRawPointerAxes.x);
<     getAbsoluteAxisInfo(ABS_MT_POSITION_Y, &mRawPointerAxes.y);
---
>     if (mParameters.rotation == Parameters::ROTATION_90 ||
>             mParameters.rotation == Parameters::ROTATION_270) {
>         getAbsoluteAxisInfo(ABS_MT_POSITION_Y, &mRawPointerAxes.x);
>         getAbsoluteAxisInfo(ABS_MT_POSITION_X, &mRawPointerAxes.y);
>     } else {
>         getAbsoluteAxisInfo(ABS_MT_POSITION_X, &mRawPointerAxes.x);
>         getAbsoluteAxisInfo(ABS_MT_POSITION_Y, &mRawPointerAxes.y);
>     }
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/native/services/inputflinger/reader/mapper/SingleTouchInputMapper.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/native/services/inputflinger/reader/mapper/SingleTouchInputMapper.cpp
39a40,41
> 		int32_t tmpX, tmpY;
> 
51,52c53,72
<         outPointer.x = mSingleTouchMotionAccumulator.getAbsoluteX();
<         outPointer.y = mSingleTouchMotionAccumulator.getAbsoluteY();
---
>         tmpX = mSingleTouchMotionAccumulator.getAbsoluteX();
>         tmpY = mSingleTouchMotionAccumulator.getAbsoluteY();
>         switch (mParameters.rotation) {
>             case Parameters::ROTATION_90:
>                 std::swap(tmpX, tmpY);
>                 tmpY = mRawPointerAxes.y.maxValue - tmpY;
>                 break;
>             case Parameters::ROTATION_180:
>                 tmpX = mRawPointerAxes.x.maxValue - tmpX;
>                 tmpY = mRawPointerAxes.y.maxValue - tmpY;
>                 break;
>             case Parameters::ROTATION_270:
>                 std::swap(tmpX, tmpY);
>                 tmpX = mRawPointerAxes.x.maxValue - tmpX;
>                 break;
>             default:
>                 break;
>         }
>         outPointer.x = tmpX;
>         outPointer.y = tmpY;
73,74c93,100
<     getAbsoluteAxisInfo(ABS_X, &mRawPointerAxes.x);
<     getAbsoluteAxisInfo(ABS_Y, &mRawPointerAxes.y);
---
>     if (mParameters.rotation == Parameters::ROTATION_90 ||
>             mParameters.rotation == Parameters::ROTATION_270) {
>         getAbsoluteAxisInfo(ABS_Y, &mRawPointerAxes.x);
>         getAbsoluteAxisInfo(ABS_X, &mRawPointerAxes.y);
>     } else {
>         getAbsoluteAxisInfo(ABS_X, &mRawPointerAxes.x);
>         getAbsoluteAxisInfo(ABS_Y, &mRawPointerAxes.y);
>     }
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/native/services/inputflinger/reader/mapper/TouchInputMapper.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/native/services/inputflinger/reader/mapper/TouchInputMapper.cpp
21a22
> #include <cutils/properties.h>
495a497,519
> 
>     int rotation = 0;
>     if (!(mParameters.deviceType == Parameters::DeviceType::TOUCH_SCREEN &&
>                 !mParameters.associatedDisplayIsExternal &&
>                 (rotation = (int)property_get_int32("ro.input_flinger.primary_touch.rotation", -1)) != -1)) {
>         if (!getDeviceContext().getConfiguration().tryGetProperty(String8("touch.rotation"), rotation)) {
>             rotation = 0;
>         }
>     }
>     switch (rotation) {
>         case 90:
>             mParameters.rotation = Parameters::ROTATION_90;
>             break;
>         case 180:
>             mParameters.rotation = Parameters::ROTATION_180;
>             break;
>         case 270:
>             mParameters.rotation = Parameters::ROTATION_270;
>             break;
>         default:
>             mParameters.rotation = Parameters::ROTATION_0;
>             break;
>     }
510a535,536
>     dump += StringPrintf(INDENT4 "Wake: %s\n", toString(mParameters.wake));
>     dump += StringPrintf(INDENT4 "touch screen rotation: %d\n", mParameters.rotation * 90);
649c675
<     if (!newViewport->isActive) {
---
>     if (!newViewport->isActive && !mParameters.wake) {
1046a1073,1075
>     }
>     if (oldDeviceMode == DeviceMode::DISABLED && mDeviceMode != DeviceMode::DISABLED) {
>         processRawTouches(false /*timeout*/);
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/native/services/inputflinger/reader/mapper/TouchInputMapper.h /home/yajat/Desktop/H618-Android12-Src/frameworks/native/services/inputflinger/reader/mapper/TouchInputMapper.h
188a189
> 
202a204,210
>         enum RotationType {
>             ROTATION_0,
>             ROTATION_90,
>             ROTATION_180,
>             ROTATION_270,
>         };
> 
216a225
>         RotationType rotation;
812c821
< #endif // _UI_INPUTREADER_TOUCH_INPUT_MAPPER_H
\ No newline at end of file
---
> #endif // _UI_INPUTREADER_TOUCH_INPUT_MAPPER_H
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/native/services/surfaceflinger/DisplayDevice.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/native/services/surfaceflinger/DisplayDevice.cpp
36a37
> #include <cutils/properties.h>
70a72,73
>     int user_rotation = property_get_int32("ro.primary_display.user_rotation", int32_t(0));
>     mDefaultRotation = ui::ROTATION_0;
101a105,120
>     if (mIsPrimary) {
>         switch (user_rotation) {
>             case 90:
>                 mDefaultRotation = ui::ROTATION_90;
>                 break;
>             case 180:
>                 mDefaultRotation = ui::ROTATION_180;
>                 break;
>             case 270:
>                 mDefaultRotation = ui::ROTATION_270;
>                 break;
>             default:
>                 break;
>         }
>     }
> 
103c122
<     setProjection(ui::ROTATION_0, Rect::INVALID_RECT, Rect::INVALID_RECT);
---
>     setProjection(mDefaultRotation, Rect::INVALID_RECT, Rect::INVALID_RECT);
230a250,251
>     bool sfSwap = ((toRotationInt(mPhysicalOrientation) & toRotationInt(android::ui::ROTATION_90))
>             && isPrimary()) ? true : false;
239a261,265
>         if (mDefaultRotation == android::ui::ROTATION_90 ||
>                 mDefaultRotation == android::ui::ROTATION_270)
>             std::swap(orientedDisplaySpaceRect.right, orientedDisplaySpaceRect.bottom);
>         if (sfSwap)
>             std::swap(orientedDisplaySpaceRect.right, orientedDisplaySpaceRect.bottom);
246c272,278
<         if (orientation == ui::ROTATION_90 || orientation == ui::ROTATION_270) {
---
>         if (mDefaultRotation == android::ui::ROTATION_90 ||
>                 mDefaultRotation == android::ui::ROTATION_270) {
>             std::swap(layerStackSpaceRect.right, layerStackSpaceRect.bottom);
>             if (orientation == ui::ROTATION_0 || orientation == ui::ROTATION_180 || sfSwap) {
>                 std::swap(layerStackSpaceRect.right, layerStackSpaceRect.bottom);
>             }
>         } else if (orientation == ui::ROTATION_90 || orientation == ui::ROTATION_270 || sfSwap) {
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/native/services/surfaceflinger/DisplayDevice.h /home/yajat/Desktop/H618-Android12-Src/frameworks/native/services/surfaceflinger/DisplayDevice.h
229c229
< 
---
>     ui::Rotation mDefaultRotation;
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/native/services/surfaceflinger/Layer.h /home/yajat/Desktop/H618-Android12-Src/frameworks/native/services/surfaceflinger/Layer.h
279c279
<         bool isTrustedOverlay;
---
>         bool isTrustedOverlay{false};
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/native/services/surfaceflinger/Scheduler/RefreshRateConfigs.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/native/services/surfaceflinger/Scheduler/RefreshRateConfigs.cpp
914c914,917
<     constexpr float kThreshold = 0.1f;
---
> 
>     // The threshold must be smaller than 0.001 in order to differentiate
>     // between the fractional pairs (e.g. 59.94 and 60).
>     constexpr float kThreshold = 0.0009f;
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/native/services/surfaceflinger/Scheduler/Scheduler.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/native/services/surfaceflinger/Scheduler/Scheduler.cpp
536a537,563
> 
> 
> /*AW_code:for skip-frame(60->30fps scale=0.5);jiangbin 210818*/
> void Scheduler::setRefreshSkipScale(float scale) {
>     std::lock_guard<std::mutex> lock(mHWVsyncLock);
>     if(scale > 0.0f && scale < 1.0f ) {
>         mRefreshPeriodScale = 1/scale;
>         mRecordPeriod = mVsyncSchedule.tracker->currentPeriod();
>         mVsyncSchedule.tracker->setPeriod(nsecs_t(mRecordPeriod * mRefreshPeriodScale));
>         ALOGE("VSyncReactor recordperiod-fps=  %.3f with scale=%f",1000000000.0 / mRecordPeriod,mRefreshPeriodScale);
> 
>     } else if((mRefreshPeriodScale != 0) && (mRecordPeriod != 0)) {
>         ALOGE("VSyncReactor reset with recordperiod-fps=  %.3f",1000000000.0 / mRecordPeriod);
> 
>         mVsyncSchedule.tracker->setPeriod(mRecordPeriod);
>         mRefreshPeriodScale = 0;
>         mRecordPeriod = 0;
>     }
> 
>     return;
> }
> /*end*/
> 
> 
> 
> 
> 
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/native/services/surfaceflinger/Scheduler/Scheduler.h /home/yajat/Desktop/H618-Android12-Src/frameworks/native/services/surfaceflinger/Scheduler/Scheduler.h
169a170,172
>     void setRefreshSkipScale(float scale);//skip-frame(60->30fps scale=0.5);jiangbin;200915
> 
> 
284a288,292
> 
>     /*AW_code: skip-frame scale;jiangbin 200915*/
>     float mRefreshPeriodScale;
>     nsecs_t mRecordPeriod;
> 
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/native/services/surfaceflinger/StartPropertySetThread.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/native/services/surfaceflinger/StartPropertySetThread.cpp
17a18,22
> // AW:Added for BOOTEVENT
> #include <string.h>
> #include <sys/types.h>
> #include <sys/stat.h>
> #include <fcntl.h>
40a46,72
> // AW:Added for BOOTEVENT
> void StartPropertySetThread::addBootEvent(int enable) {
>     int fd;
>     char buf[64];
> 
>     if (!property_get_bool("persist.sys.bootevent", false)) {
>         return;
>     }
> 
>     fd = open("/proc/bootevent", O_RDWR);
>     if (fd == -1) return;
> 
>     if (1 == enable) {
>         strcpy(buf,"BOOT_Animation:START");
>         if (fd > 0) {
>             write(fd, buf, 32);
>             close(fd);
>         }
>     } else {
>         strcpy(buf, "BOOT_Animation:END");
>         if (fd > 0) {
>             write(fd, buf, 32);
>             //write(fd, "0", 1);
>             close(fd);
>         }
>     }
> }
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/native/services/surfaceflinger/StartPropertySetThread.h /home/yajat/Desktop/H618-Android12-Src/frameworks/native/services/surfaceflinger/StartPropertySetThread.h
37a38
>     void addBootEvent(int enable);
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/native/services/surfaceflinger/SurfaceFlinger.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/native/services/surfaceflinger/SurfaceFlinger.cpp
374c374
<     useColorManagement = use_color_management(true);
---
>     useColorManagement = use_color_management(false);
411a412,427
> 
>     int32_t user_rotation = property_get_int32("ro.primary_display.user_rotation", int32_t(0));
>     switch (user_rotation) {
>         case 90:
>             internalDisplayOrientation = internalDisplayOrientation + ui::ROTATION_270;
>             break;
>         case 180:
>             internalDisplayOrientation = internalDisplayOrientation + ui::ROTATION_180;
>             break;
>         case 270:
>             internalDisplayOrientation = internalDisplayOrientation + ui::ROTATION_90;
>             break;
>         default:
>             break;
>     }
> 
655a672,682
> status_t SurfaceFlinger::getPrimaryPhysicalDisplayId(PhysicalDisplayId* id) const {
>     Mutex::Autolock lock(mStateLock);
>     const auto display = getInternalDisplayIdLocked();
>     if (!display) {
>         return NAME_NOT_FOUND;
>     }
> 
>     *id = *display;
>     return NO_ERROR;
> }
> 
733a761,763
> 
>     // AW:add for BOOTEVENT  bootanim is end
>     mStartPropertySetThread->addBootEvent(0);
851a882,884
>     // AW:add for BOOTEVENT  bootanim is start
>     mStartPropertySetThread->addBootEvent(1);
> 
4067c4100
<     if (what & layer_state_t::eBlurRegionsChanged) {
---
>     if (what & layer_state_t::eBlurRegionsChanged && mSupportsBlur) {
4500a4534
>     int32_t user_rotation = property_get_int32("ro.primary_display.user_rotation", int32_t(0));
4510c4544,4557
<     d.orientation = ui::ROTATION_0;
---
>     switch (user_rotation) {
>         case 90:
>             d.orientation = ui::ROTATION_90;
>             break;
>         case 180:
>             d.orientation = ui::ROTATION_180;
>             break;
>         case 270:
>             d.orientation = ui::ROTATION_270;
>             break;
>         default:
>             d.orientation = ui::ROTATION_0;
>             break;
>     }
5240a5288
>         case GET_PRIMARY_PHYSICAL_DISPLAY_ID:
5360c5408
<     if (code >= 1000 && code <= 1040) {
---
>     if (code >= 1000 && code <= 1100 /*AW_CODE:extend code 1100 by jiangbin;210818*/) {
5795a5844,5855
>            /*AW_code:add skip animation-frame for app-start performance;jiangbin;200915*/
>           case 1100: {
>                 float scale = data.readFloat();
> 
>                 //mScheduler->setDuration(mSfConnectionHandle, std::chrono::nanoseconds(n), 0ns);
>                 //std::chrono::nanoseconds(vsyncPeriod)
>                 ALOGD("setRefreshSkipScale %f", scale );
>                 mScheduler->setRefreshSkipScale(scale);
>                 return NO_ERROR;
>             }
> 
> 
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/native/services/surfaceflinger/SurfaceFlinger.h /home/yajat/Desktop/H618-Android12-Src/frameworks/native/services/surfaceflinger/SurfaceFlinger.h
616a617
>     status_t getPrimaryPhysicalDisplayId(PhysicalDisplayId*) const override EXCLUDES(mStateLock);
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/native/services/surfaceflinger/SurfaceFlingerProperties.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/native/services/surfaceflinger/SurfaceFlingerProperties.cpp
36a37,38
> // Keep logic in sync with WindowManagerService functions that query SurfaceFlinger properties.
> // Consider exposing properties via ISurfaceComposer instead.
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/native/services/surfaceflinger/tests/unittests/RefreshRateConfigsTest.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/native/services/surfaceflinger/tests/unittests/RefreshRateConfigsTest.cpp
2126c2126,2130
<     EXPECT_EQ(4, RefreshRateConfigs::getFrameRateDivider(displayRefreshRate, Fps(22.6f)));
---
> 
>     EXPECT_EQ(0, RefreshRateConfigs::getFrameRateDivider(Fps(24.f), Fps(25.f)));
>     EXPECT_EQ(0, RefreshRateConfigs::getFrameRateDivider(Fps(24.f), Fps(23.976f)));
>     EXPECT_EQ(0, RefreshRateConfigs::getFrameRateDivider(Fps(30.f), Fps(29.97f)));
>     EXPECT_EQ(0, RefreshRateConfigs::getFrameRateDivider(Fps(60.f), Fps(59.94f)));
Only in /home/yajat/Desktop/aosp12_r11/frameworks/opt/bitmap: .git
Only in /home/yajat/Desktop/aosp12_r11/frameworks/opt/calendar: .git
Only in /home/yajat/Desktop/aosp12_r11/frameworks/opt/car/services: .git
Only in /home/yajat/Desktop/aosp12_r11/frameworks/opt/car/setupwizard: .git
Only in /home/yajat/Desktop/aosp12_r11/frameworks/opt/chips: .git
Only in /home/yajat/Desktop/aosp12_r11/frameworks/opt/colorpicker: .git
Only in /home/yajat/Desktop/aosp12_r11/frameworks/opt/localepicker: .git
Only in /home/yajat/Desktop/aosp12_r11/frameworks/opt/net/ethernet: .git
Only in /home/yajat/Desktop/aosp12_r11/frameworks/opt/net/ims: .git
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/opt/net: pppoe
Only in /home/yajat/Desktop/aosp12_r11/frameworks/opt/net/voip: .git
Only in /home/yajat/Desktop/aosp12_r11/frameworks/opt/net/wifi: .git
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/opt/net/wifi/libwifi_hal/Android.mk /home/yajat/Desktop/H618-Android12-Src/frameworks/opt/net/wifi/libwifi_hal/Android.mk
76a77,80
> ifeq ($(BOARD_WIFI_VENDOR),common)
> LOCAL_CPPFLAGS   += -DBOARD_WIFI_VENDOR_COMMON
> LOCAL_C_INCLUDES += hardware/aw/wireless/hwinfo
> endif
120a125,139
>   else ifeq ($(BOARD_WLAN_DEVICE), xradio)
>     # support XRadio WIFI HAL
>     LIB_WIFI_HAL := libwifi-hal-xradio
>   else ifeq ($(BOARD_WLAN_DEVICE), ssv)
>     # support ssv WIFI HAL
>     LIB_WIFI_HAL := libwifi-hal-ssv
>   else ifeq ($(BOARD_WLAN_DEVICE), sprd)
>     # support sprd WIFI HAL
>     LIB_WIFI_HAL := libwifi-hal-sprd
>   else ifeq ($(BOARD_WLAN_DEVICE), aic)
>     # support aic WIFI HAL
>     LIB_WIFI_HAL := libwifi-hal-aic
>   else ifeq ($(BOARD_WLAN_DEVICE), common)
>     # support aw autodetct WIFI HAL
>     LIB_WIFI_HAL := libwifi-hal-autodetect
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/opt/net/wifi/libwifi_hal/wifi_hal_common.cpp /home/yajat/Desktop/H618-Android12-Src/frameworks/opt/net/wifi/libwifi_hal/wifi_hal_common.cpp
47a48
> #ifndef BOARD_WIFI_VENDOR_COMMON
54a56,58
> #endif
> 
> #include "wifi_hal_hook.h"
137c141
<   char line[sizeof(DRIVER_MODULE_TAG) + 10];
---
>   char line[strlen(DRIVER_MODULE_TAG) + 10];
144a149,153
>     /*
>      * If thread exit abnormal, dure to "is_driver_loaded" cannot
>      * hold it's value before, we cannot get driver real status
>      * from it. Here we just print some debug info rather than
>      * return.
145a155,157
>      */
>     LOG(INFO) << "Driver " << DRIVER_MODULE_NAME \
>               << " not load? I'm not sure.";
Only in /home/yajat/Desktop/H618-Android12-Src/frameworks/opt/net/wifi/libwifi_hal: wifi_hal_hook.h
Only in /home/yajat/Desktop/aosp12_r11/frameworks/opt/photoviewer: .git
Only in /home/yajat/Desktop/aosp12_r11/frameworks/opt/setupwizard: .git
Only in /home/yajat/Desktop/aosp12_r11/frameworks/opt/telephony: .git
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/opt/telephony/src/java/com/android/internal/telephony/RadioIndication.java /home/yajat/Desktop/H618-Android12-Src/frameworks/opt/telephony/src/java/com/android/internal/telephony/RadioIndication.java
73a74,76
> import android.app.ActivityThread;
> import android.content.Context;
> import android.content.Intent;
129a133
>     Context mContext;
132a137
>         mContext = ActivityThread.currentApplication().getApplicationContext();
147a153,159
> 
>         Integer mPhoneId = -1;
>         Intent intent = new Intent(TelephonyIntents.ACTION_RADIO_STATE_CHANGED);
>         intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT);
>         intent.putExtra(PhoneConstants.STATE_KEY,
>                 (state == TelephonyManager.RADIO_POWER_UNAVAILABLE) ? "off" : "on");
>         IntentBroadcaster.getInstance(mContext).broadcastStickyIntent(mContext, intent, mPhoneId);
diff -r /home/yajat/Desktop/aosp12_r11/frameworks/opt/telephony/src/java/com/android/internal/telephony/SubscriptionController.java /home/yajat/Desktop/H618-Android12-Src/frameworks/opt/telephony/src/java/com/android/internal/telephony/SubscriptionController.java
907a908,920
>         return getAllSubInfoList(callingPackage, callingFeatureId, false);
>     }
> 
>     /**
>      * @param callingPackage The package making the IPC.
>      * @param callingFeatureId The feature in the package
>      * @param skipConditionallyRemoveIdentifier if set, skip removing identifier conditionally
>      * @return List of all SubscriptionInfo records in database,
>      * include those that were inserted before, maybe empty but not null.
>      * @hide
>      */
>     public List<SubscriptionInfo> getAllSubInfoList(String callingPackage,
>             String callingFeatureId, boolean skipConditionallyRemoveIdentifier) {
926c939
<         if (subList != null) {
---
>         if (subList != null && !skipConditionallyRemoveIdentifier) {
928c941
<             subList.stream().map(
---
>             subList = subList.stream().map(
3892a3906,3907
>             // need to bypass removing identifier check because that will remove the subList without
>             // group id.
3894c3909
<                     mContext.getAttributionTag());
---
>                     mContext.getAttributionTag(), true);
Only in /home/yajat/Desktop/aosp12_r11/frameworks/opt/timezonepicker: .git
Only in /home/yajat/Desktop/aosp12_r11/frameworks/opt/tv/tvsystem: .git
Only in /home/yajat/Desktop/aosp12_r11/frameworks/opt/vcard: .git
Only in /home/yajat/Desktop/aosp12_r11/frameworks/proto_logging: .git
Only in /home/yajat/Desktop/aosp12_r11/frameworks/rs: .git
Only in /home/yajat/Desktop/aosp12_r11/frameworks/wilhelm: .git
